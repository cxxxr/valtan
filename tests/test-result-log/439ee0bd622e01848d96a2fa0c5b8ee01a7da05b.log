
> tests@1.0.0 start /Users/cxxxr/common-lisp/valtan/tests
> npm run build && node dist/main.js


> tests@1.0.0 prebuild /Users/cxxxr/common-lisp/valtan/tests
> valtan-build tests.system

creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/defpackage.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/valtan-package.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/target-system-defs.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/valtan-core-slash-system.asd\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/constants-and-variables.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/control.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/destructuring-bind.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/setf.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/ffi.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/cons.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/condition.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/struct.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/symbol.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/type.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/number.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/array.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/character.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/string.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/function.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/sequence.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/hashtable.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/package.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/stream.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/print.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/read.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/file.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/pkg.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/clos.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/restart.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/catch-throw.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/documentation.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/loop.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/valtan-core-slash-common-lisp.asd\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/compiler/variables.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/compiler/parse-body.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/compiler/util.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/compiler/error.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/compiler/source-info.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/compiler/interface.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/compiler/hir.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/compiler/backquote.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/compiler/pass1.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/compiler/pass2.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/compiler/compiler.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/lisp/compilation.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/valtan-core-slash-compiler.asd\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/library/valtan-core/valtan-core.asd\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/tests/sacla-tests.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/tests/main.lisp\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/Users/cxxxr/common-lisp/valtan/tests/tests.system\.js
creating /Users/cxxxr/common-lisp/valtan/tests/.valtan-cache/tests.js

> tests@1.0.0 build /Users/cxxxr/common-lisp/valtan/tests
> webpack

Hash: fda3572396d49448efb1
Version: webpack 4.43.0
Time: 1085ms
Built at: 2020-05-23 16:59:18
  Asset      Size  Chunks             Chunk Names
main.js  3.94 MiB       0  [emitted]  main
Entrypoint main = main.js
 [0] ./.valtan-cache/tests.js 391 bytes {0} [built]
 [1] ../kernel/lisp.js 7.63 KiB {0} [built]
 [2] ../kernel/values.js 658 bytes {0} [built]
 [3] ../kernel/header.js 1.19 KiB {0} [built]
 [4] ../kernel/error.js 1020 bytes {0} [built]
 [5] ../kernel/callstack.js 982 bytes {0} [built]
 [6] ../kernel/symbol.js 3.56 KiB {0} [built]
 [7] ../kernel/cons.js 1.6 KiB {0} [built]
 [8] ../kernel/package.js 6.49 KiB {0} [built]
 [9] ../kernel/ffi.js 177 bytes {0} [built]
[10] ../kernel/structure.js 1.03 KiB {0} [built]
[11] ../kernel/number.js 1.27 KiB {0} [built]
[12] ../kernel/function.js 2.23 KiB {0} [built]
[13] ../kernel/control.js 622 bytes {0} [built]
[16] ./.valtan-cache/Users/cxxxr/common-lisp/valtan/tests/tests.system.js 147 bytes {0} [built]
    + 52 hidden modules
test: sacla-tests/desirable-printer.lisp
0 Pass: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :UPCASE) (STRING= (WRITE-TO-STRING (QUOTE ZEBRA) :PRETTY NIL :READABLY T :CASE :UPCASE) "ZEBRA"))
1 Failed: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :UPCASE) (STRING= (WRITE-TO-STRING (QUOTE Zebra) :PRETTY NIL :READABLY T :CASE :UPCASE) "|Zebra|"))
2 Failed: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :UPCASE) (STRING= (WRITE-TO-STRING (QUOTE zebra) :PRETTY NIL :READABLY T :CASE :UPCASE) "|zebra|"))
3 Failed: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :UPCASE) (STRING= (WRITE-TO-STRING (QUOTE ZEBRA) :PRETTY NIL :READABLY T :CASE :DOWNCASE) "zebra"))
4 Failed: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :UPCASE) (STRING= (WRITE-TO-STRING (QUOTE Zebra) :PRETTY NIL :READABLY T :CASE :DOWNCASE) "|Zebra|"))
5 Failed: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :UPCASE) (STRING= (WRITE-TO-STRING (QUOTE zebra) :PRETTY NIL :READABLY T :CASE :DOWNCASE) "|zebra|"))
6 Failed: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :UPCASE) (STRING= (WRITE-TO-STRING (QUOTE ZEBRA) :PRETTY NIL :READABLY T :CASE :CAPITALIZE) "Zebra"))
7 Failed: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :UPCASE) (STRING= (WRITE-TO-STRING (QUOTE Zebra) :PRETTY NIL :READABLY T :CASE :CAPITALIZE) "|Zebra|"))
8 Failed: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :UPCASE) (STRING= (WRITE-TO-STRING (QUOTE zebra) :PRETTY NIL :READABLY T :CASE :CAPITALIZE) "|zebra|"))
9 Failed: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :DOWNCASE) (STRING= (WRITE-TO-STRING (QUOTE ZEBRA) :PRETTY NIL :READABLY T :CASE :UPCASE) "|ZEBRA|"))
10 Failed: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :DOWNCASE) (STRING= (WRITE-TO-STRING (QUOTE Zebra) :PRETTY NIL :READABLY T :CASE :UPCASE) "|Zebra|"))
11 Failed: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :DOWNCASE) (STRING= (WRITE-TO-STRING (QUOTE zebra) :PRETTY NIL :READABLY T :CASE :UPCASE) "ZEBRA"))
12 Failed: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :DOWNCASE) (STRING= (WRITE-TO-STRING (QUOTE ZEBRA) :PRETTY NIL :READABLY T :CASE :DOWNCASE) "|ZEBRA|"))
13 Failed: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :DOWNCASE) (STRING= (WRITE-TO-STRING (QUOTE Zebra) :PRETTY NIL :READABLY T :CASE :DOWNCASE) "|Zebra|"))
14 Pass: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :DOWNCASE) (STRING= (WRITE-TO-STRING (QUOTE zebra) :PRETTY NIL :READABLY T :CASE :DOWNCASE) "zebra"))
15 Failed: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :DOWNCASE) (STRING= (WRITE-TO-STRING (QUOTE ZEBRA) :PRETTY NIL :READABLY T :CASE :CAPITALIZE) "|ZEBRA|"))
16 Failed: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :DOWNCASE) (STRING= (WRITE-TO-STRING (QUOTE Zebra) :PRETTY NIL :READABLY T :CASE :CAPITALIZE) "|Zebra|"))
17 Failed: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :DOWNCASE) (STRING= (WRITE-TO-STRING (QUOTE zebra) :PRETTY NIL :READABLY T :CASE :CAPITALIZE) "Zebra"))
18 Pass: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :PRESERVE) (STRING= (WRITE-TO-STRING (QUOTE ZEBRA) :PRETTY NIL :READABLY T :CASE :UPCASE) "ZEBRA"))
19 Pass: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :PRESERVE) (STRING= (WRITE-TO-STRING (QUOTE Zebra) :PRETTY NIL :READABLY T :CASE :UPCASE) "Zebra"))
20 Pass: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :PRESERVE) (STRING= (WRITE-TO-STRING (QUOTE zebra) :PRETTY NIL :READABLY T :CASE :UPCASE) "zebra"))
21 Pass: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :PRESERVE) (STRING= (WRITE-TO-STRING (QUOTE ZEBRA) :PRETTY NIL :READABLY T :CASE :DOWNCASE) "ZEBRA"))
22 Pass: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :PRESERVE) (STRING= (WRITE-TO-STRING (QUOTE Zebra) :PRETTY NIL :READABLY T :CASE :DOWNCASE) "Zebra"))
23 Pass: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :PRESERVE) (STRING= (WRITE-TO-STRING (QUOTE zebra) :PRETTY NIL :READABLY T :CASE :DOWNCASE) "zebra"))
24 Pass: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :PRESERVE) (STRING= (WRITE-TO-STRING (QUOTE ZEBRA) :PRETTY NIL :READABLY T :CASE :CAPITALIZE) "ZEBRA"))
25 Pass: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :PRESERVE) (STRING= (WRITE-TO-STRING (QUOTE Zebra) :PRETTY NIL :READABLY T :CASE :CAPITALIZE) "Zebra"))
26 Pass: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :PRESERVE) (STRING= (WRITE-TO-STRING (QUOTE zebra) :PRETTY NIL :READABLY T :CASE :CAPITALIZE) "zebra"))
27 Failed: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :INVERT) (STRING= (WRITE-TO-STRING (QUOTE ZEBRA) :PRETTY NIL :READABLY T :CASE :UPCASE) "zebra"))
28 Pass: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :INVERT) (STRING= (WRITE-TO-STRING (QUOTE Zebra) :PRETTY NIL :READABLY T :CASE :UPCASE) "Zebra"))
29 Failed: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :INVERT) (STRING= (WRITE-TO-STRING (QUOTE zebra) :PRETTY NIL :READABLY T :CASE :UPCASE) "ZEBRA"))
30 Failed: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :INVERT) (STRING= (WRITE-TO-STRING (QUOTE ZEBRA) :PRETTY NIL :READABLY T :CASE :DOWNCASE) "zebra"))
31 Pass: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :INVERT) (STRING= (WRITE-TO-STRING (QUOTE Zebra) :PRETTY NIL :READABLY T :CASE :DOWNCASE) "Zebra"))
32 Failed: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :INVERT) (STRING= (WRITE-TO-STRING (QUOTE zebra) :PRETTY NIL :READABLY T :CASE :DOWNCASE) "ZEBRA"))
33 Failed: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :INVERT) (STRING= (WRITE-TO-STRING (QUOTE ZEBRA) :PRETTY NIL :READABLY T :CASE :CAPITALIZE) "zebra"))
34 Pass: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :INVERT) (STRING= (WRITE-TO-STRING (QUOTE Zebra) :PRETTY NIL :READABLY T :CASE :CAPITALIZE) "Zebra"))
35 Failed: (LET ((*READTABLE* (COPY-READTABLE NIL))) (SETF (READTABLE-CASE *READTABLE*) :INVERT) (STRING= (WRITE-TO-STRING (QUOTE zebra) :PRETTY NIL :READABLY T :CASE :CAPITALIZE) "ZEBRA"))
Pass: 14, Failed: 22

test: sacla-tests/must-array.lisp
0 Pass: (ARRAYP (MAKE-ARRAY NIL))
1 Pass: (ARRAYP (MAKE-ARRAY 10))
2 Pass: (VECTORP (MAKE-ARRAY 10))
3 Pass: (ARRAYP (MAKE-ARRAY (QUOTE (1 2))))
4 Pass: (ARRAYP (MAKE-ARRAY (QUOTE (1 2 3))))
5 Pass: (ARRAYP (MAKE-ARRAY (QUOTE (1 2 3 4))))
6 Pass: (ARRAYP (MAKE-ARRAY (QUOTE (1 2 3 4 5))))
7 Pass: (ARRAYP (MAKE-ARRAY (QUOTE (3 3 3))))
8 Pass: (ARRAYP (MAKE-ARRAY (QUOTE (3 0 3))))
9 Pass: (ARRAYP (MAKE-ARRAY (QUOTE 5) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO "array"))
10 Pass: (ARRAYP "")
11 Pass: (ARRAYP "array")
12 Pass: (ARRAYP (MAKE-ARRAY (QUOTE (2 3 4)) :ADJUSTABLE T))
13 Pass: (ARRAYP (MAKE-ARRAY 6))
14 Pass: (ARRAYP #(1 0 1 1))
15 Pass: (ARRAYP "hi")
16 Pass: (NOT (ARRAYP (QUOTE HI)))
17 Pass: (NOT (ARRAYP 12))
18 Pass: (LET ((ARRAY (MAKE-ARRAY (QUOTE (2 3)) :INITIAL-CONTENTS (QUOTE ((0 1 2) (3 4 5)))))) (AND (EQL (AREF ARRAY 0 0) 0) (EQL (AREF ARRAY 0 1) 1) (EQL (AREF ARRAY 0 2) 2) (EQL (AREF ARRAY 1 0) 3) (EQL (AREF ARRAY 1 1) 4) (EQL (AREF ARRAY 1 2) 5)))
19 Pass: (LET ((ARRAY (MAKE-ARRAY (QUOTE (3 2 1)) :INITIAL-CONTENTS (QUOTE (((0) (1)) ((2) (3)) ((4) (5))))))) (AND (EQL (AREF ARRAY 0 0 0) 0) (EQL (AREF ARRAY 0 1 0) 1) (EQL (AREF ARRAY 1 0 0) 2) (EQL (AREF ARRAY 1 1 0) 3) (EQL (AREF ARRAY 2 0 0) 4) (EQL (AREF ARRAY 2 1 0) 5)))
20 Pass: (LET ((ARRAY (MAKE-ARRAY (QUOTE (2 2 2 2)) :INITIAL-CONTENTS (QUOTE ((((0 1) (2 3)) ((4 5) (6 7))) (((8 9) (10 11)) ((12 13) (14 15)))))))) (AND (EQL (AREF ARRAY 0 0 0 0) 0) (EQL (AREF ARRAY 0 0 0 1) 1) (EQL (AREF ARRAY 0 0 1 0) 2) (EQL (AREF ARRAY 0 0 1 1) 3) (EQL (AREF ARRAY 0 1 0 0) 4) (EQL (AREF ARRAY 0 1 0 1) 5) (EQL (AREF ARRAY 0 1 1 0) 6) (EQL (AREF ARRAY 0 1 1 1) 7) (EQL (AREF ARRAY 1 0 0 0) 8) (EQL (AREF ARRAY 1 0 0 1) 9) (EQL (AREF ARRAY 1 0 1 0) 10) (EQL (AREF ARRAY 1 0 1 1) 11) (EQL (AREF ARRAY 1 1 0 0) 12) (EQL (AREF ARRAY 1 1 0 1) 13) (EQL (AREF ARRAY 1 1 1 0) 14) (EQL (AREF ARRAY 1 1 1 1) 15)))
21 Pass: (LET ((ARRAY (MAKE-ARRAY (QUOTE (3 3 3 3 3 3)) :INITIAL-ELEMENT NIL))) (DOTIMES (I 729) (SETF (ROW-MAJOR-AREF ARRAY I) I)) (DOTIMES (I 729 T) (UNLESS (= (AREF ARRAY (FLOOR I (* 3 3 3 3 3)) (FLOOR (MOD I (* 3 3 3 3 3)) (* 3 3 3 3)) (FLOOR (MOD I (* 3 3 3 3)) (* 3 3 3)) (FLOOR (MOD I (* 3 3 3)) (* 3 3)) (FLOOR (MOD I (* 3 3)) (* 3)) (MOD I 3)) I) (RETURN NIL))))
22 Pass: (ZEROP (AREF (MAKE-ARRAY (QUOTE NIL) :INITIAL-CONTENTS 0)))
23 Pass: (LET ((ARRAY (MAKE-ARRAY 10 :INITIAL-CONTENTS (QUOTE (0 1 2 3 4 5 6 7 8 9)))) (OK T)) (DOTIMES (I 10) (UNLESS (EQL (AREF ARRAY I) I) (SETQ OK NIL) (RETURN))) OK)
24 Pass: (LET ((ARRAY (VECTOR 0 1 2 3 4 5 6 7 8 9)) (OK T)) (DOTIMES (I 10) (UNLESS (EQL (AREF ARRAY I) I) (SETQ OK NIL) (RETURN))) OK)
25 Pass: (LET ((ARRAY "0123456789") (OK T)) (DOTIMES (I 10) (UNLESS (CHAR= (AREF ARRAY I) (CHAR "0123456789" I)) (SETQ OK NIL) (RETURN))) OK)
26 Pass: (LET ((ARRAY (MAKE-ARRAY (QUOTE (2 3)) :INITIAL-CONTENTS (QUOTE ((0 1 2) (3 4 5)))))) (EQUAL (ARRAY-DIMENSIONS ARRAY) (QUOTE (2 3))))
27 Pass: (EQUAL (ARRAY-DIMENSIONS (MAKE-ARRAY 4)) (QUOTE (4)))
28 Pass: (EQUAL (ARRAY-DIMENSIONS (MAKE-ARRAY (QUOTE (2 3)))) (QUOTE (2 3)))
29 Pass: (EQUAL (ARRAY-DIMENSIONS (MAKE-ARRAY 4 :FILL-POINTER 2)) (QUOTE (4)))
30 Pass: (EQUAL (ARRAY-DIMENSIONS (MAKE-ARRAY (QUOTE (2 3 4 5 6)))) (QUOTE (2 3 4 5 6)))
31 Pass: (EQL (ARRAY-DIMENSION (MAKE-ARRAY 4) 0) 4)
32 Pass: (EQL (ARRAY-DIMENSION (MAKE-ARRAY (QUOTE (2 3))) 1) 3)
33 Pass: (EQL (ARRAY-DIMENSION (MAKE-ARRAY (QUOTE (2 3 4))) 2) 4)
34 Pass: (EQ (ARRAY-ELEMENT-TYPE (MAKE-ARRAY 4)) T)
35 Pass: (EQUAL (ARRAY-ELEMENT-TYPE (MAKE-ARRAY 12 :ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8)))) (UPGRADED-ARRAY-ELEMENT-TYPE (QUOTE (UNSIGNED-BYTE 8))))
36 Pass: (LET ((ARRAY (MAKE-ARRAY (QUOTE NIL)))) (MULTIPLE-VALUE-BIND (DISPLACED-TO DISPLACED-INDEX-OFFSET) (ARRAY-DISPLACEMENT ARRAY) (AND (NOT DISPLACED-TO) (ZEROP DISPLACED-INDEX-OFFSET))))
37 Pass: (LET ((ARRAY (MAKE-ARRAY (QUOTE 10)))) (MULTIPLE-VALUE-BIND (DISPLACED-TO DISPLACED-INDEX-OFFSET) (ARRAY-DISPLACEMENT ARRAY) (AND (NOT DISPLACED-TO) (ZEROP DISPLACED-INDEX-OFFSET))))
38 Pass: (LET ((ARRAY (MAKE-ARRAY (QUOTE (2 3)) :INITIAL-CONTENTS (QUOTE ((0 1 2) (3 4 5)))))) (MULTIPLE-VALUE-BIND (DISPLACED-TO DISPLACED-INDEX-OFFSET) (ARRAY-DISPLACEMENT ARRAY) (AND (NOT DISPLACED-TO) (ZEROP DISPLACED-INDEX-OFFSET))))
39 Pass: (LET* ((SOURCE (MAKE-ARRAY (QUOTE (2 5)) :INITIAL-CONTENTS (QUOTE ((1 2 3 4 5) (11 12 13 14 15))))) (ARRAY (MAKE-ARRAY 10 :DISPLACED-TO SOURCE))) (MULTIPLE-VALUE-BIND (DISPLACED-TO DISPLACED-INDEX-OFFSET) (ARRAY-DISPLACEMENT ARRAY) (AND (EQ DISPLACED-TO SOURCE) (ZEROP DISPLACED-INDEX-OFFSET))))
40 Pass: (LET* ((SOURCE (MAKE-ARRAY (QUOTE 10) :INITIAL-ELEMENT 0)) (ARRAY (MAKE-ARRAY (QUOTE (5 2)) :DISPLACED-TO SOURCE))) (MULTIPLE-VALUE-BIND (DISPLACED-TO DISPLACED-INDEX-OFFSET) (ARRAY-DISPLACEMENT ARRAY) (AND (EQ DISPLACED-TO SOURCE) (ZEROP DISPLACED-INDEX-OFFSET))))
41 Pass: (LET* ((E0-0 (LIST 0 0)) (E0-1 (LIST 0 1)) (E1-0 (LIST 1 0)) (E1-1 (LIST 1 1)) (SOURCE (MAKE-ARRAY (QUOTE (2 2)) :INITIAL-CONTENTS (LIST (LIST E0-0 E0-1) (LIST E1-0 E1-1)))) (ARRAY (MAKE-ARRAY 4 :DISPLACED-TO SOURCE))) (MULTIPLE-VALUE-BIND (DISPLACED-TO DISPLACED-INDEX-OFFSET) (ARRAY-DISPLACEMENT ARRAY) (AND (EQ DISPLACED-TO SOURCE) (ZEROP DISPLACED-INDEX-OFFSET) (EQ (AREF ARRAY 0) E0-0) (EQ (AREF ARRAY 1) E0-1) (EQ (AREF ARRAY 2) E1-0) (EQ (AREF ARRAY 3) E1-1))))
42 Pass: (LET* ((E0-0 (LIST 0 0)) (E0-1 (LIST 0 1)) (E1-0 (LIST 1 0)) (E1-1 (LIST 1 1)) (SOURCE (MAKE-ARRAY (QUOTE (2 2)) :INITIAL-CONTENTS (LIST (LIST E0-0 E0-1) (LIST E1-0 E1-1)))) (ARRAY (MAKE-ARRAY 2 :DISPLACED-TO SOURCE :DISPLACED-INDEX-OFFSET 1))) (MULTIPLE-VALUE-BIND (DISPLACED-TO DISPLACED-INDEX-OFFSET) (ARRAY-DISPLACEMENT ARRAY) (AND (EQ DISPLACED-TO SOURCE) (EQL DISPLACED-INDEX-OFFSET 1) (EQ (AREF ARRAY 0) E0-1) (EQ (AREF ARRAY 1) E1-0))))
43 Pass: (LET ((ARRAY (MAKE-ARRAY 4 :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO "0123456789" :DISPLACED-INDEX-OFFSET 6))) (MULTIPLE-VALUE-BIND (DISPLACED-TO DISPLACED-INDEX-OFFSET) (ARRAY-DISPLACEMENT ARRAY) (AND (STRING= DISPLACED-TO "0123456789") (EQL DISPLACED-INDEX-OFFSET 6) (EQL (AREF ARRAY 0) #\6) (EQL (AREF ARRAY 1) #\7) (EQL (AREF ARRAY 2) #\8) (EQL (AREF ARRAY 3) #\9))))
44 Pass: (LET ((ARRAY (MAKE-ARRAY (QUOTE (1 2 5)) :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO "0123456789"))) (MULTIPLE-VALUE-BIND (DISPLACED-TO DISPLACED-INDEX-OFFSET) (ARRAY-DISPLACEMENT ARRAY) (AND (STRING= DISPLACED-TO "0123456789") (EQL DISPLACED-INDEX-OFFSET 0) (EQL (AREF ARRAY 0 0 0) #\0) (EQL (AREF ARRAY 0 0 1) #\1) (EQL (AREF ARRAY 0 0 2) #\2) (EQL (AREF ARRAY 0 0 3) #\3) (EQL (AREF ARRAY 0 0 4) #\4) (EQL (AREF ARRAY 0 1 0) #\5) (EQL (AREF ARRAY 0 1 1) #\6) (EQL (AREF ARRAY 0 1 2) #\7) (EQL (AREF ARRAY 0 1 3) #\8) (EQL (AREF ARRAY 0 1 4) #\9))))
45 Pass: (LET* ((SOURCE (MAKE-ARRAY (QUOTE (2 5)) :INITIAL-CONTENTS (QUOTE ("love&" "peace")) :ELEMENT-TYPE (QUOTE CHARACTER))) (ARRAY (MAKE-ARRAY 10 :DISPLACED-TO SOURCE :ELEMENT-TYPE (QUOTE CHARACTER)))) (MULTIPLE-VALUE-BIND (DISPLACED-TO DISPLACED-INDEX-OFFSET) (ARRAY-DISPLACEMENT ARRAY) (AND (EQ DISPLACED-TO SOURCE) (EQL DISPLACED-INDEX-OFFSET 0) (STRING= ARRAY "love&peace"))))
46 Pass: (ARRAY-IN-BOUNDS-P (MAKE-ARRAY 5) 4)
47 Pass: (NOT (ARRAY-IN-BOUNDS-P (MAKE-ARRAY 5) -1))
48 Pass: (LET ((A (MAKE-ARRAY (QUOTE (7 11)) :ELEMENT-TYPE (QUOTE STRING-CHAR)))) (AND (ARRAY-IN-BOUNDS-P A 0 0) (ARRAY-IN-BOUNDS-P A 6 10) (NOT (ARRAY-IN-BOUNDS-P A 0 -1)) (NOT (ARRAY-IN-BOUNDS-P A 0 11)) (NOT (ARRAY-IN-BOUNDS-P A 7 0))))
49 Pass: (LET ((ARRAY (MAKE-ARRAY (QUOTE (2 3)) :INITIAL-CONTENTS (QUOTE ((0 1 2) (3 4 5)))))) (EQL (ARRAY-RANK ARRAY) 2))
50 Pass: (ZEROP (ARRAY-RANK (MAKE-ARRAY (QUOTE NIL))))
51 Pass: (EQL (ARRAY-RANK (MAKE-ARRAY 10)) 1)
52 Pass: (EQL (ARRAY-RANK (MAKE-ARRAY (QUOTE (2 10)))) 2)
53 Pass: (EQL (ARRAY-RANK (MAKE-ARRAY (QUOTE (2 10 1)))) 3)
54 Pass: (EQL (ARRAY-RANK (MAKE-ARRAY (QUOTE (2 10 1 3)))) 4)
55 Pass: (EQL (ARRAY-RANK "") 1)
56 Pass: (EQL (ARRAY-RANK "a") 1)
57 Pass: (ZEROP (ARRAY-ROW-MAJOR-INDEX (MAKE-ARRAY (QUOTE NIL))))
58 Pass: (ZEROP (ARRAY-ROW-MAJOR-INDEX (MAKE-ARRAY (QUOTE 5)) 0))
59 Pass: (EQL (ARRAY-ROW-MAJOR-INDEX (MAKE-ARRAY (QUOTE 5)) 4) 4)
60 Pass: (EQL (ARRAY-ROW-MAJOR-INDEX (MAKE-ARRAY (QUOTE 10)) 3) 3)
61 Pass: (ZEROP (ARRAY-ROW-MAJOR-INDEX (MAKE-ARRAY (QUOTE (3 4))) 0 0))
62 Pass: (EQL (ARRAY-ROW-MAJOR-INDEX (MAKE-ARRAY (QUOTE (3 4))) 2 3) 11)
63 Pass: (ZEROP (ARRAY-ROW-MAJOR-INDEX (MAKE-ARRAY (QUOTE (3 4 5))) 0 0 0))
64 Pass: (EQL (ARRAY-ROW-MAJOR-INDEX (MAKE-ARRAY (QUOTE (3 4 5))) 2 3 4) 59)
65 Pass: (LET ((ARRAY (MAKE-ARRAY (QUOTE (2 3)) :INITIAL-CONTENTS (QUOTE ((0 1 2) (3 4 5)))))) (EQL (ARRAY-TOTAL-SIZE ARRAY) 6))
66 Pass: (EQL (ARRAY-TOTAL-SIZE (MAKE-ARRAY 4)) 4)
67 Pass: (EQL (ARRAY-TOTAL-SIZE (MAKE-ARRAY 4 :FILL-POINTER 2)) 4)
68 Pass: (EQL (ARRAY-TOTAL-SIZE (MAKE-ARRAY 0)) 0)
69 Pass: (EQL (ARRAY-TOTAL-SIZE (MAKE-ARRAY (QUOTE (4 2)))) 8)
70 Pass: (EQL (ARRAY-TOTAL-SIZE (MAKE-ARRAY (QUOTE (4 0)))) 0)
71 Pass: (EQL (ARRAY-TOTAL-SIZE (MAKE-ARRAY (QUOTE NIL))) 1)
72 Pass: (EQL (ARRAY-TOTAL-SIZE (MAKE-ARRAY (QUOTE (2 3 4 5)))) (* 2 3 4 5))
73 Pass: (LET ((ARRAY (MAKE-ARRAY 10 :INITIAL-CONTENTS (QUOTE (0 1 2 3 4 5 6 7 8 9)) :FILL-POINTER 0))) (DOTIMES (I 10 T) (UNLESS (EQL (AREF ARRAY I) I) (RETURN NIL))))
74 Pass: (LET ((ARRAY (MAKE-ARRAY (QUOTE (10 10)) :ELEMENT-TYPE (QUOTE NUMBER) :INITIAL-ELEMENT 0))) (DOTIMES (I 10) (DOTIMES (J 10) (UNLESS (ZEROP (AREF ARRAY I J)) (RETURN NIL)) (SETF (AREF ARRAY I J) (+ (* I 10) J)))) (DOTIMES (I 100 T) (UNLESS (EQL (ROW-MAJOR-AREF ARRAY I) I) (RETURN NIL))))
75 Pass: (LET ((ARRAY (MAKE-ARRAY (QUOTE NIL)))) (SETF (AREF ARRAY) 100) (EQL (AREF ARRAY) 100))
76 Pass: (LET ((ARRAY (MAKE-ARRAY 10 :INITIAL-CONTENTS (QUOTE (A B C D E F G H I J))))) (SETF (AREF ARRAY 0) #\a) (SETF (AREF ARRAY 2) #\c) (SETF (AREF ARRAY 4) #\e) (SETF (AREF ARRAY 6) #\g) (SETF (AREF ARRAY 8) #\i) (AND (EQL (AREF ARRAY 0) #\a) (EQL (AREF ARRAY 1) (QUOTE B)) (EQL (AREF ARRAY 2) #\c) (EQL (AREF ARRAY 3) (QUOTE D)) (EQL (AREF ARRAY 4) #\e) (EQL (AREF ARRAY 5) (QUOTE F)) (EQL (AREF ARRAY 6) #\g) (EQL (AREF ARRAY 7) (QUOTE H)) (EQL (AREF ARRAY 8) #\i) (EQL (AREF ARRAY 9) (QUOTE J))))
77 Pass: (LET ((ARRAY (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) (QUOTE F) (QUOTE G) (QUOTE H) (QUOTE I) (QUOTE J)))) (SETF (AREF ARRAY 0) #\a) (SETF (AREF ARRAY 2) #\c) (SETF (AREF ARRAY 4) #\e) (SETF (AREF ARRAY 6) #\g) (SETF (AREF ARRAY 8) #\i) (AND (EQL (AREF ARRAY 0) #\a) (EQL (AREF ARRAY 1) (QUOTE B)) (EQL (AREF ARRAY 2) #\c) (EQL (AREF ARRAY 3) (QUOTE D)) (EQL (AREF ARRAY 4) #\e) (EQL (AREF ARRAY 5) (QUOTE F)) (EQL (AREF ARRAY 6) #\g) (EQL (AREF ARRAY 7) (QUOTE H)) (EQL (AREF ARRAY 8) #\i) (EQL (AREF ARRAY 9) (QUOTE J))))
78 Pass: (LET ((ARRAY (MAKE-ARRAY (QUOTE (3 4 5)) :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE NUMBER)))) (SETF (AREF ARRAY 0 0 0) 0) (SETF (AREF ARRAY 1 1 1) 1) (SETF (AREF ARRAY 2 2 2) 2) (DOTIMES (I 3 T) (UNLESS (EQL (AREF ARRAY I I I) I) (RETURN NIL))))
79 Pass: (LET* ((ARRAY (MAKE-ARRAY (QUOTE (3 4 5 6 7)) :INITIAL-ELEMENT 0 :ELEMENT-TYPE (QUOTE NUMBER))) (ARRAY2 (MAKE-ARRAY (* 3 4 5 6 7) :DISPLACED-TO ARRAY))) (SETF (AREF ARRAY 2 3 4 5 6) 100) (SETF (AREF ARRAY 0 0 0 0 0) 200) (EQL (REDUCE (FUNCTION +) ARRAY2) 300))
80 Pass: (ADJUSTABLE-ARRAY-P (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE CHARACTER) :ADJUSTABLE T :FILL-POINTER 3))
81 Pass: (LET ((ARRAY (ADJUST-ARRAY (MAKE-ARRAY (QUOTE (2 3)) :INITIAL-CONTENTS (QUOTE ((0 1 2) (3 4 5))) :ADJUSTABLE T) (QUOTE (3 2)) :INITIAL-ELEMENT (QUOTE UNDEFINED)))) (AND (EQL (AREF ARRAY 0 0) 0) (EQL (AREF ARRAY 0 1) 1) (EQL (AREF ARRAY 1 0) 3) (EQL (AREF ARRAY 1 1) 4) (EQL (AREF ARRAY 2 0) (QUOTE UNDEFINED)) (EQL (AREF ARRAY 2 1) (QUOTE UNDEFINED))))
82 Pass: (LET ((ARRAY (ADJUST-ARRAY (MAKE-ARRAY (QUOTE (2 3)) :INITIAL-CONTENTS (QUOTE ((0 1 2) (3 4 5))) :ADJUSTABLE T) (QUOTE (3 2)) :INITIAL-ELEMENT (QUOTE UNDEFINED)))) (EQUAL (ARRAY-DIMENSIONS ARRAY) (QUOTE (3 2))))
83 Pass: (LET ((ARRAY (ADJUST-ARRAY (MAKE-ARRAY (QUOTE (2 3)) :INITIAL-CONTENTS (QUOTE ((0 1 2) (3 4 5))) :ADJUSTABLE T) (QUOTE (3 2)) :INITIAL-ELEMENT (QUOTE UNDEFINED)))) (NOT (ARRAY-HAS-FILL-POINTER-P ARRAY)))
84 Pass: (LET ((ARRAY (MAKE-ARRAY (QUOTE (2 3)) :INITIAL-CONTENTS (QUOTE ((0 1 2) (3 4 5)))))) (NOT (ARRAY-HAS-FILL-POINTER-P ARRAY)))
85 Pass: (ARRAY-HAS-FILL-POINTER-P (MAKE-ARRAY 10 :FILL-POINTER 0))
86 Pass: (ARRAY-HAS-FILL-POINTER-P (MAKE-ARRAY 8 :FILL-POINTER 0 :INITIAL-ELEMENT 8))
87 Pass: (NOT (ARRAY-HAS-FILL-POINTER-P (MAKE-ARRAY (QUOTE (2 3 4)))))
88 Pass: (LET ((ARRAY (ADJUST-ARRAY (MAKE-ARRAY (QUOTE (2 3)) :INITIAL-CONTENTS (QUOTE ((0 1 2) (3 4 5))) :ADJUSTABLE T) (QUOTE (3 2)) :INITIAL-ELEMENT (QUOTE UNDEFINED)))) (MULTIPLE-VALUE-BIND (DISPLACED-TO DISPLACED-INDEX-OFFSET) (ARRAY-DISPLACEMENT ARRAY) (AND (NOT DISPLACED-TO) (ZEROP DISPLACED-INDEX-OFFSET))))
89 Pass: (LET ((ARRAY (ADJUST-ARRAY (MAKE-ARRAY (QUOTE (2 3)) :INITIAL-CONTENTS (QUOTE ((0 1 2) (3 4 5))) :ADJUSTABLE T) (QUOTE (3 2)) :INITIAL-ELEMENT (QUOTE UNDEFINED)))) (EQL (ARRAY-RANK ARRAY) 2))
90 Pass: (LET ((ARRAY (ADJUST-ARRAY (MAKE-ARRAY (QUOTE (2 3)) :INITIAL-CONTENTS (QUOTE ((0 1 2) (3 4 5))) :ADJUSTABLE T) (QUOTE (3 2)) :INITIAL-ELEMENT (QUOTE UNDEFINED)))) (EQL (ARRAY-TOTAL-SIZE ARRAY) 6))
91 Pass: (EQL (FILL-POINTER (MAKE-ARRAY 8 :FILL-POINTER 4)) 4)
92 Pass: (LET ((ARRAY (MAKE-ARRAY 8 :FILL-POINTER 4 :INITIAL-ELEMENT NIL))) (AND (EQL (LENGTH ARRAY) 4) (SETF (FILL-POINTER ARRAY) 3) (EQL (FILL-POINTER ARRAY) 3) (EQL (LENGTH ARRAY) 3)))
93 Pass: (LET ((VECTOR (MAKE-ARRAY 10 :FILL-POINTER 0 :INITIAL-ELEMENT #\  :ELEMENT-TYPE (QUOTE CHARACTER)))) (AND (EQL (VECTOR-PUSH #\a VECTOR) 0) (EQL (VECTOR-PUSH #\b VECTOR) 1) (EQL (VECTOR-PUSH #\c VECTOR) 2) (STRING= VECTOR "abc")))
94 Pass: (LET ((VECTOR (MAKE-ARRAY 3 :FILL-POINTER T :INITIAL-CONTENTS (QUOTE (A B C))))) (AND (EQL (ARRAY-DIMENSION VECTOR 0) (FILL-POINTER VECTOR)) (EQUAL (CONCATENATE (QUOTE LIST) VECTOR) (QUOTE (A B C))) (ZEROP (SETF (FILL-POINTER VECTOR) 0)) (NULL (CONCATENATE (QUOTE LIST) VECTOR)) (EQL (VECTOR-PUSH (QUOTE X) VECTOR) 0) (EQUAL (CONCATENATE (QUOTE LIST) VECTOR) (QUOTE (X))) (EQ (VECTOR-POP VECTOR) (QUOTE X)) (ZEROP (LENGTH VECTOR))))
95 Pass: (LET ((VECTOR (MAKE-ARRAY 10 :FILL-POINTER 0 :INITIAL-ELEMENT NIL))) (AND (EQL (LENGTH VECTOR) 0) (SETF (FILL-POINTER VECTOR) 10) (EQL (LENGTH VECTOR) 10) (SETF (FILL-POINTER VECTOR) 5) (EQL (LENGTH VECTOR) 5)))
96 Pass: (LET ((ARRAY (MAKE-ARRAY (QUOTE (3 2 1)) :INITIAL-CONTENTS (QUOTE (((0) (1)) ((2) (3)) ((4) (5))))))) (AND (EQL (AREF ARRAY 0 0 0) (ROW-MAJOR-AREF ARRAY 0)) (EQL (AREF ARRAY 0 1 0) (ROW-MAJOR-AREF ARRAY 1)) (EQL (AREF ARRAY 1 0 0) (ROW-MAJOR-AREF ARRAY 2)) (EQL (AREF ARRAY 1 1 0) (ROW-MAJOR-AREF ARRAY 3)) (EQL (AREF ARRAY 2 0 0) (ROW-MAJOR-AREF ARRAY 4)) (EQL (AREF ARRAY 2 1 0) (ROW-MAJOR-AREF ARRAY 5))))
97 Pass: (LET ((ARRAY (MAKE-ARRAY (QUOTE (3 2 1)) :INITIAL-CONTENTS (QUOTE (((0) (1)) ((2) (3)) ((4) (5))))))) (AND (EQL 0 (ROW-MAJOR-AREF ARRAY 0)) (EQL 1 (ROW-MAJOR-AREF ARRAY 1)) (EQL 2 (ROW-MAJOR-AREF ARRAY 2)) (EQL 3 (ROW-MAJOR-AREF ARRAY 3)) (EQL 4 (ROW-MAJOR-AREF ARRAY 4)) (EQL 5 (ROW-MAJOR-AREF ARRAY 5))))
98 Pass: (LET* ((ARRAY0 (MAKE-ARRAY (QUOTE (3 2 1)) :INITIAL-CONTENTS (QUOTE (((0) (1)) ((2) (3)) ((4) (5)))))) (ARRAY1 (MAKE-ARRAY 6 :DISPLACED-TO ARRAY0))) (AND (EQL (AREF ARRAY1 0) (ROW-MAJOR-AREF ARRAY0 0)) (EQL (AREF ARRAY1 1) (ROW-MAJOR-AREF ARRAY0 1)) (EQL (AREF ARRAY1 2) (ROW-MAJOR-AREF ARRAY0 2)) (EQL (AREF ARRAY1 3) (ROW-MAJOR-AREF ARRAY0 3)) (EQL (AREF ARRAY1 4) (ROW-MAJOR-AREF ARRAY0 4)) (EQL (AREF ARRAY1 5) (ROW-MAJOR-AREF ARRAY0 5))))
99 Pass: (LET* ((ARRAY0 (MAKE-ARRAY 6 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcdef")) (ARRAY1 (MAKE-ARRAY (QUOTE (3 2 1)) :DISPLACED-TO ARRAY0 :ELEMENT-TYPE (QUOTE CHARACTER)))) (AND (EQL (AREF ARRAY0 0) (ROW-MAJOR-AREF ARRAY1 0)) (EQL (AREF ARRAY0 1) (ROW-MAJOR-AREF ARRAY1 1)) (EQL (AREF ARRAY0 2) (ROW-MAJOR-AREF ARRAY1 2)) (EQL (AREF ARRAY0 3) (ROW-MAJOR-AREF ARRAY1 3)) (EQL (AREF ARRAY0 4) (ROW-MAJOR-AREF ARRAY1 4)) (EQL (AREF ARRAY0 5) (ROW-MAJOR-AREF ARRAY1 5))))
100 Pass: (LET* ((ARRAY0 (MAKE-ARRAY 6 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcdef")) (ARRAY1 (MAKE-ARRAY (QUOTE (3 2 1)) :DISPLACED-TO ARRAY0 :ELEMENT-TYPE (QUOTE CHARACTER)))) (AND (EQL #\a (ROW-MAJOR-AREF ARRAY1 0)) (EQL #\b (ROW-MAJOR-AREF ARRAY1 1)) (EQL #\c (ROW-MAJOR-AREF ARRAY1 2)) (EQL #\d (ROW-MAJOR-AREF ARRAY1 3)) (EQL #\e (ROW-MAJOR-AREF ARRAY1 4)) (EQL #\f (ROW-MAJOR-AREF ARRAY1 5))))
101 Pass: (LET ((ARRAY (MAKE-ARRAY (QUOTE (3 2 1)) :INITIAL-ELEMENT NIL))) (SETF (ROW-MAJOR-AREF ARRAY 0) (QUOTE A)) (SETF (ROW-MAJOR-AREF ARRAY 1) (QUOTE B)) (SETF (ROW-MAJOR-AREF ARRAY 2) (QUOTE C)) (SETF (ROW-MAJOR-AREF ARRAY 3) (QUOTE D)) (SETF (ROW-MAJOR-AREF ARRAY 4) (QUOTE E)) (AND (EQL (AREF ARRAY 0 0 0) (QUOTE A)) (EQL (AREF ARRAY 0 1 0) (QUOTE B)) (EQL (AREF ARRAY 1 0 0) (QUOTE C)) (EQL (AREF ARRAY 1 1 0) (QUOTE D)) (EQL (AREF ARRAY 2 0 0) (QUOTE E)) (EQL (AREF ARRAY 2 1 0) (QUOTE NIL))))
102 Pass: (LET ((STR "abcdefg")) (DOTIMES (I 7 T) (UNLESS (EQL (CHAR STR 0) (ROW-MAJOR-AREF STR 0)) (RETURN NIL))))
103 Pass: (LET ((STR (MAKE-ARRAY 5 :INITIAL-CONTENTS "abcde"))) (DOTIMES (I 3) (SETF (ROW-MAJOR-AREF STR I) (ROW-MAJOR-AREF STR (- 4 I)))) (AND (CHAR= (ROW-MAJOR-AREF STR 0) #\e) (CHAR= (ROW-MAJOR-AREF STR 1) #\d) (CHAR= (ROW-MAJOR-AREF STR 2) #\c) (CHAR= (ROW-MAJOR-AREF STR 3) #\d) (CHAR= (ROW-MAJOR-AREF STR 4) #\e)))
104 Pass: (EQ (UPGRADED-ARRAY-ELEMENT-TYPE T) T)
105 Failed: (AND (SUBTYPEP (UPGRADED-ARRAY-ELEMENT-TYPE (QUOTE BIT)) (QUOTE BIT)) (SUBTYPEP (QUOTE BIT) (UPGRADED-ARRAY-ELEMENT-TYPE (QUOTE BIT))))
106 Failed: (AND (SUBTYPEP (UPGRADED-ARRAY-ELEMENT-TYPE (QUOTE BASE-CHAR)) (QUOTE BASE-CHAR)) (SUBTYPEP (QUOTE BASE-CHAR) (UPGRADED-ARRAY-ELEMENT-TYPE (QUOTE BASE-CHAR))))
107 Pass: (AND (SUBTYPEP (UPGRADED-ARRAY-ELEMENT-TYPE (QUOTE CHARACTER)) (QUOTE CHARACTER)) (SUBTYPEP (QUOTE CHARACTER) (UPGRADED-ARRAY-ELEMENT-TYPE (QUOTE CHARACTER))))
108 Pass: (SIMPLE-VECTOR-P (MAKE-ARRAY 6))
109 Failed: (NOT (SIMPLE-VECTOR-P "aaaaaa"))
110 Pass: (LET ((SV (MAKE-ARRAY 10))) (DOTIMES (I 10) (SETF (SVREF SV I) (* I I))) (DOTIMES (I 10 T) (UNLESS (EQL (SVREF SV I) (* I I)) (RETURN NIL))))
111 Pass: (LET ((SV (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) (QUOTE F)))) (AND (EQ (SVREF SV 0) (QUOTE A)) (EQ (SVREF SV 1) (QUOTE B)) (EQ (SVREF SV 2) (QUOTE C)) (EQ (SVREF SV 3) (QUOTE D)) (EQ (SVREF SV 4) (QUOTE E)) (EQ (SVREF SV 5) (QUOTE F))))
112 Pass: (LET ((SV (MAKE-ARRAY 3 :INITIAL-CONTENTS (QUOTE (1 2 LAST))))) (AND (SIMPLE-VECTOR-P SV) (EQ (SVREF SV 2) (QUOTE LAST)) (EQL (SVREF SV 1) 2) (EQL (SVREF SV 0) 1) (EQL (SETF (SVREF SV 1) (QUOTE LAST-BUT-ONE)) (QUOTE LAST-BUT-ONE)) (EQ (SVREF SV 1) (QUOTE LAST-BUT-ONE))))
113 Pass: (LET ((VEC (VECTOR 1 2 (QUOTE LAST)))) (AND (ARRAYP VEC) (VECTORP VEC) (SIMPLE-VECTOR-P VEC) (EQL (LENGTH VEC) 3) (EQUAL (CONCATENATE (QUOTE LIST) VEC) (QUOTE (1 2 LAST)))))
114 Pass: (EQ (VECTOR-POP (MAKE-ARRAY 3 :INITIAL-CONTENTS (QUOTE (A B C)) :FILL-POINTER T)) (QUOTE C))
115 Pass: (EQ (VECTOR-POP (MAKE-ARRAY 3 :INITIAL-CONTENTS (QUOTE (A B C)) :FILL-POINTER 3)) (QUOTE C))
116 Pass: (EQ (VECTOR-POP (MAKE-ARRAY 3 :INITIAL-CONTENTS (QUOTE (A B C)) :FILL-POINTER 2)) (QUOTE B))
117 Pass: (EQ (VECTOR-POP (MAKE-ARRAY 3 :INITIAL-CONTENTS (QUOTE (A B C)) :FILL-POINTER 1)) (QUOTE A))
118 Pass: (LET ((VEC (MAKE-ARRAY 3 :FILL-POINTER 0))) (AND (EQL (VECTOR-PUSH (QUOTE A) VEC) 0) (EQL (VECTOR-PUSH (QUOTE B) VEC) 1) (EQL (VECTOR-PUSH (QUOTE C) VEC) 2) (EQ (VECTOR-POP VEC) (QUOTE C)) (EQ (VECTOR-POP VEC) (QUOTE B)) (EQ (VECTOR-POP VEC) (QUOTE A))))
119 Pass: (LET ((VEC (MAKE-ARRAY 3 :FILL-POINTER T :INITIAL-CONTENTS (QUOTE (A B C))))) (AND (SETF (FILL-POINTER VEC) 1) (EQL (VECTOR-PUSH (QUOTE Y) VEC) 1) (EQL (VECTOR-PUSH (QUOTE Z) VEC) 2) (EQ (VECTOR-POP VEC) (QUOTE Z)) (EQ (VECTOR-POP VEC) (QUOTE Y)) (EQ (VECTOR-POP VEC) (QUOTE A)) (EQL (FILL-POINTER VEC) 0)))
120 Pass: (LET ((VEC (MAKE-ARRAY 3 :FILL-POINTER T :INITIAL-CONTENTS (QUOTE (A B C))))) (AND (NOT (VECTOR-PUSH (QUOTE X) VEC)) (NOT (VECTOR-PUSH (QUOTE Y) VEC)) (EQL (SETF (FILL-POINTER VEC) 0) 0) (EQL (VECTOR-PUSH (QUOTE X) VEC) 0) (EQL (VECTOR-PUSH (QUOTE Y) VEC) 1) (EQL (VECTOR-PUSH (QUOTE Z) VEC) 2) (NOT (VECTOR-PUSH (QUOTE L) VEC))))
121 Pass: (LET ((VEC (MAKE-ARRAY 3 :FILL-POINTER 2 :INITIAL-CONTENTS (QUOTE (A B L)) :ADJUSTABLE T))) (AND (EQL (LENGTH VEC) 2) (EQL (VECTOR-PUSH-EXTEND (QUOTE C) VEC) 2) (EQL (LENGTH VEC) 3) (EQ (VECTOR-POP VEC) (QUOTE C)) (EQL (VECTOR-PUSH-EXTEND (QUOTE C) VEC) 2) (EQL (VECTOR-PUSH-EXTEND (QUOTE X) VEC) 3) (EQL (VECTOR-PUSH-EXTEND (QUOTE Y) VEC) 4) (EQL (VECTOR-PUSH-EXTEND (QUOTE Z) VEC) 5) (EQL (LENGTH VEC) 6)))
122 Pass: (LET ((VEC (MAKE-ARRAY 0 :FILL-POINTER T :ADJUSTABLE T))) (DOTIMES (I 50) (VECTOR-PUSH-EXTEND (* I I) VEC)) (DOTIMES (I 50 T) (UNLESS (EQL (VECTOR-POP VEC) (* (- 49 I) (- 49 I))) (RETURN NIL))))
123 Pass: (LET ((VEC (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcdefghij" :ADJUSTABLE T :FILL-POINTER T))) (AND (EQL (VECTOR-PUSH-EXTEND #\x VEC) 10) (EQL (VECTOR-PUSH-EXTEND #\y VEC) 11) (EQL (VECTOR-PUSH-EXTEND #\z VEC) 12) (STRING= VEC "abcdefghijxyz")))
124 Pass: (VECTORP "aaaaaa")
125 Pass: (VECTORP (MAKE-ARRAY 6 :FILL-POINTER T))
126 Pass: (NOT (VECTORP (MAKE-ARRAY (QUOTE (2 3 4)))))
127 Pass: (VECTORP #(1 1))
128 Pass: (NOT (VECTORP 3))
129 Pass: (VECTORP (MAKE-ARRAY 3 :DISPLACED-TO "abc" :ELEMENT-TYPE (QUOTE CHARACTER)))
130 Pass: (EQL (BIT (MAKE-ARRAY 8 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 1) 3) 1)
131 Pass: (EQL (SBIT (MAKE-ARRAY 8 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 1) 3) 1)
132 Pass: (LET ((BA (MAKE-ARRAY 8 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 1 0 1))))) (DOTIMES (I 8 T) (UNLESS (OR (AND (EVENP I) (ZEROP (BIT BA I))) (AND (ODDP I) (EQL (BIT BA I) 1))) (RETURN NIL))))
133 Pass: (LET ((BA (MAKE-ARRAY 8 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (0 1 0 1 0 1 0 1))))) (DOTIMES (I 8 T) (UNLESS (OR (AND (EVENP I) (ZEROP (SBIT BA I))) (AND (ODDP I) (EQL (SBIT BA I) 1))) (RETURN NIL))))
134 Pass: (LET ((BA (MAKE-ARRAY (QUOTE (3 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1 0) (1 0 1) (0 1 0)))))) (AND (ZEROP (BIT BA 0 0)) (EQL (BIT BA 0 1) 1) (ZEROP (BIT BA 0 2)) (EQL (BIT BA 1 0) 1) (ZEROP (BIT BA 1 1)) (EQL (BIT BA 1 2) 1) (ZEROP (BIT BA 2 0)) (EQL (BIT BA 2 1) 1) (ZEROP (BIT BA 2 2))))
135 Pass: (LET ((BA (MAKE-ARRAY (QUOTE (3 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE ((0 1 0) (1 0 1) (0 1 0)))))) (AND (ZEROP (SBIT BA 0 0)) (EQL (SBIT BA 0 1) 1) (ZEROP (SBIT BA 0 2)) (EQL (SBIT BA 1 0) 1) (ZEROP (SBIT BA 1 1)) (EQL (SBIT BA 1 2) 1) (ZEROP (SBIT BA 2 0)) (EQL (SBIT BA 2 1) 1) (ZEROP (SBIT BA 2 2))))
136 Pass: (LET ((BA (MAKE-ARRAY (QUOTE (3 3 3)) :ELEMENT-TYPE (QUOTE BIT)))) (DOTIMES (I (* 3 3 3)) (SETF (BIT BA (FLOOR I 9) (FLOOR (MOD I 9) 3) (MOD I 3)) (IF (EVENP I) 0 1))) (DOTIMES (I (* 3 3 3) T) (UNLESS (EQL (ROW-MAJOR-AREF BA I) (IF (EVENP I) 0 1)) (RETURN NIL))))
137 Pass: (LET ((BA (MAKE-ARRAY (QUOTE (3 3 3)) :ELEMENT-TYPE (QUOTE BIT)))) (DOTIMES (I (* 3 3 3)) (SETF (SBIT BA (FLOOR I 9) (FLOOR (MOD I 9) 3) (MOD I 3)) (IF (EVENP I) 0 1))) (DOTIMES (I (* 3 3 3) T) (UNLESS (EQL (ROW-MAJOR-AREF BA I) (IF (EVENP I) 0 1)) (RETURN NIL))))
138 Pass: (LET ((BA (MAKE-ARRAY (QUOTE (1 2 3 4 5)) :ELEMENT-TYPE (QUOTE BIT)))) (DOTIMES (I (* 1 2 3 4 5)) (SETF (BIT BA (FLOOR I (* 1 2 3 4 5)) (FLOOR (MOD I (* 2 3 4 5)) (* 3 4 5)) (FLOOR (MOD I (* 3 4 5)) (* 4 5)) (FLOOR (MOD I (* 4 5)) 5) (MOD I 5)) (IF (EVENP I) 0 1))) (DOTIMES (I (* 1 2 3 4 5) T) (UNLESS (EQL (ROW-MAJOR-AREF BA I) (IF (EVENP I) 0 1)) (RETURN NIL))))
139 Pass: (LET ((BA (MAKE-ARRAY (QUOTE (1 2 3 4 5)) :ELEMENT-TYPE (QUOTE BIT)))) (DOTIMES (I (* 1 2 3 4 5)) (SETF (SBIT BA (FLOOR I (* 1 2 3 4 5)) (FLOOR (MOD I (* 2 3 4 5)) (* 3 4 5)) (FLOOR (MOD I (* 3 4 5)) (* 4 5)) (FLOOR (MOD I (* 4 5)) 5) (MOD I 5)) (IF (EVENP I) 0 1))) (DOTIMES (I (* 1 2 3 4 5) T) (UNLESS (EQL (ROW-MAJOR-AREF BA I) (IF (EVENP I) 0 1)) (RETURN NIL))))
140 Pass: (LET ((BA (MAKE-ARRAY 8 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 1))) (AND (EQL (SETF (BIT BA 3) 0) 0) (EQL (BIT BA 3) 0) (EQL (SBIT BA 5) 1) (EQL (SETF (SBIT BA 5) 0) 0) (EQL (SBIT BA 5) 0)))
141 Pass: (LET ((BA (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 0))) (DOTIMES (I 10) (VECTOR-PUSH (IF (ODDP I) 0 1) BA)) (DOTIMES (I 10 T) (UNLESS (AND (EQL (BIT BA I) (IF (ODDP I) 0 1)) (OR (NOT (SIMPLE-VECTOR-P BA)) (EQL (SBIT BA I) (IF (ODDP I) 0 1))) (EQL (AREF BA I) (IF (ODDP I) 0 1))) (RETURN NIL))))
142 Pass: (LET ((BA (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 0))) (DOTIMES (I 10) (VECTOR-PUSH (IF (ODDP I) 0 1) BA)) (DOTIMES (J 10 T) (LET ((I (- 9 J))) (UNLESS (AND (EQL (BIT BA I) (IF (ODDP I) 0 1)) (OR (NOT (SIMPLE-VECTOR-P BA)) (EQL (SBIT BA I) (IF (ODDP I) 0 1))) (EQL (AREF BA I) (IF (ODDP I) 0 1)) (EQL (VECTOR-POP BA) (IF (ODDP I) 0 1))) (RETURN NIL)))))
143 Failed: (EQUAL (BIT-AND #(1 1 1 0 1 0 1 0) #(0 1 1 0 1 0 1 1)) #(0 1 1 0 1 0 1 0))
144 Failed: (EQUAL (BIT-AND #(1 1 1 0 1 0 1 0) #(0 1 1 0 1 0 1 1) NIL) #(0 1 1 0 1 0 1 0))
145 Failed: (EQUAL (BIT-AND (MAKE-ARRAY 8 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #(1 1 1 0 1 0 1 0)) #(0 1 1 0 1 0 1 1) T) #(0 1 1 0 1 0 1 0))
146 Failed: (EQUAL (BIT-AND #(1 1 1 0 1 0 1 0) #(0 1 1 0 1 0 1 1) (MAKE-ARRAY 8 :ELEMENT-TYPE (QUOTE BIT))) #(0 1 1 0 1 0 1 0))
147 Failed: (LET* ((BA1 (MAKE-ARRAY 8 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #(1 1 1 0 1 0 1 0))) (BA2 (MAKE-ARRAY 8 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #(0 1 1 0 1 0 1 1))) (BA (BIT-AND BA1 BA2))) (AND (NOT (EQ BA1 BA)) (NOT (EQ BA2 BA)) (NOT (EQ BA1 BA2)) (EQUAL BA #(0 1 1 0 1 0 1 0))))
148 Pass: (LET* ((BA1 (MAKE-ARRAY 8 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #(0 1 0 1 0 1 0 1))) (BA (BIT-AND BA1 #(1 0 1 0 1 0 1 0) T))) (AND (EQ BA1 BA) (EQUAL BA1 #(0 0 0 0 0 0 0 0))))
149 Failed: (LET* ((BA1 (MAKE-ARRAY 8 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #(0 1 1 1 0 0 0 1))) (BA (BIT-AND BA1 #(0 0 1 1 1 1 1 0) T))) (AND (EQ BA1 BA) (EQUAL BA1 #(0 0 1 1 0 0 0 0))))
150 Failed: (LET* ((BA1 (MAKE-ARRAY 8 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #(0 1 1 1 0 0 0 1))) (BA2 (MAKE-ARRAY 8 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #(0 0 1 1 1 1 1 0))) (BA3 (MAKE-ARRAY 8 :ELEMENT-TYPE (QUOTE BIT))) (BA4 (BIT-AND BA1 BA2 BA3))) (AND (EQ BA3 BA4) (EQUAL BA3 #(0 0 1 1 0 0 0 0)) (NOT (EQ BA1 BA3)) (NOT (EQ BA1 BA4)) (NOT (EQ BA2 BA3)) (NOT (EQ BA2 BA4))))
151 Pass: (EQUALP (BIT-AND (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (#(0 1 0) #(1 0 1)))) (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (#(1 0 1) #(0 1 0))))) (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (#(0 0 0) #(0 0 0)))))
152 Pass: (EQUALP (BIT-AND (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (#(0 1 0) #(1 0 1)))) (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (#(1 0 1) #(0 1 0)))) NIL) (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (#(0 0 0) #(0 0 0)))))
153 Pass: (EQUALP (BIT-AND (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (#(0 1 0) #(1 0 1)))) (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (#(1 0 1) #(0 1 0)))) T) (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (#(0 0 0) #(0 0 0)))))
154 Pass: (EQUALP (BIT-AND (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (#(0 1 0) #(1 0 1)))) (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (#(1 0 1) #(0 1 0)))) (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT))) (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (#(0 0 0) #(0 0 0)))))
155 Pass: (LET* ((BA1 (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (#(0 1 0) #(1 0 1))))) (BA2 (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (#(1 0 1) #(0 1 0))))) (BA (BIT-AND BA1 BA2))) (AND (NOT (EQ BA1 BA)) (NOT (EQ BA2 BA)) (NOT (EQ BA1 BA2)) (EQUALP BA (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (#(0 0 0) #(0 0 0)))))))
156 Pass: (LET* ((BA1 (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (#(0 1 0) #(1 0 1))))) (BA2 (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (#(1 0 1) #(0 1 0))))) (BA (BIT-AND BA1 BA2 T))) (AND (EQ BA1 BA) (EQUALP BA1 (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (#(0 0 0) #(0 0 0)))))))
157 Pass: (LET* ((BA1 (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (#(0 1 0) #(1 0 1))))) (BA2 (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (#(1 0 1) #(0 1 0))))) (BA3 (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT))) (BA4 (BIT-AND BA1 BA2 BA3))) (AND (EQ BA3 BA4) (EQUALP BA3 (MAKE-ARRAY (QUOTE (2 3)) :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS (QUOTE (#(0 0 0) #(0 0 0))))) (NOT (EQ BA1 BA3)) (NOT (EQ BA1 BA4)) (NOT (EQ BA2 BA3)) (NOT (EQ BA2 BA4))))
158 Failed: The function BIT-ANDC1 is undefined
159 Failed: The function BIT-ANDC1 is undefined
160 Failed: The function BIT-ANDC1 is undefined
161 Failed: The function BIT-ANDC1 is undefined
162 Failed: The function BIT-ANDC1 is undefined
163 Failed: The function BIT-ANDC1 is undefined
164 Failed: The function BIT-ANDC1 is undefined
165 Failed: The function BIT-ANDC1 is undefined
166 Failed: The function BIT-ANDC1 is undefined
167 Failed: The function BIT-ANDC1 is undefined
168 Failed: The function BIT-ANDC1 is undefined
169 Failed: The function BIT-ANDC1 is undefined
170 Failed: The function BIT-ANDC1 is undefined
171 Failed: The function BIT-ANDC1 is undefined
172 Failed: The function BIT-ANDC1 is undefined
173 Failed: The function BIT-ANDC2 is undefined
174 Failed: The function BIT-ANDC2 is undefined
175 Failed: The function BIT-ANDC2 is undefined
176 Failed: The function BIT-ANDC2 is undefined
177 Failed: The function BIT-ANDC2 is undefined
178 Failed: The function BIT-ANDC2 is undefined
179 Failed: The function BIT-ANDC2 is undefined
180 Failed: The function BIT-ANDC2 is undefined
181 Failed: The function BIT-ANDC2 is undefined
182 Failed: The function BIT-ANDC2 is undefined
183 Failed: The function BIT-ANDC2 is undefined
184 Failed: The function BIT-ANDC2 is undefined
185 Failed: The function BIT-ANDC2 is undefined
186 Failed: The function BIT-ANDC2 is undefined
187 Failed: The function BIT-ANDC2 is undefined
188 Failed: The function BIT-EQV is undefined
189 Failed: The function BIT-EQV is undefined
190 Failed: The function BIT-EQV is undefined
191 Failed: The function BIT-EQV is undefined
192 Failed: The function BIT-EQV is undefined
193 Failed: The function BIT-EQV is undefined
194 Failed: The function BIT-EQV is undefined
195 Failed: The function BIT-EQV is undefined
196 Failed: The function BIT-EQV is undefined
197 Failed: The function BIT-EQV is undefined
198 Failed: The function BIT-EQV is undefined
199 Failed: The function BIT-EQV is undefined
200 Failed: The function BIT-EQV is undefined
201 Failed: The function BIT-EQV is undefined
202 Failed: The function BIT-EQV is undefined
203 Failed: The function BIT-IOR is undefined
204 Failed: The function BIT-IOR is undefined
205 Failed: The function BIT-IOR is undefined
206 Failed: The function BIT-IOR is undefined
207 Failed: The function BIT-IOR is undefined
208 Failed: The function BIT-IOR is undefined
209 Failed: The function BIT-IOR is undefined
210 Failed: The function BIT-IOR is undefined
211 Failed: The function BIT-IOR is undefined
212 Failed: The function BIT-IOR is undefined
213 Failed: The function BIT-IOR is undefined
214 Failed: The function BIT-IOR is undefined
215 Failed: The function BIT-IOR is undefined
216 Failed: The function BIT-IOR is undefined
217 Failed: The function BIT-IOR is undefined
218 Failed: The function BIT-NAND is undefined
219 Failed: The function BIT-NAND is undefined
220 Failed: The function BIT-NAND is undefined
221 Failed: The function BIT-NAND is undefined
222 Failed: The function BIT-NAND is undefined
223 Failed: The function BIT-NAND is undefined
224 Failed: The function BIT-NAND is undefined
225 Failed: The function BIT-NAND is undefined
226 Failed: The function BIT-NAND is undefined
227 Failed: The function BIT-NAND is undefined
228 Failed: The function BIT-NAND is undefined
229 Failed: The function BIT-NAND is undefined
230 Failed: The function BIT-NAND is undefined
231 Failed: The function BIT-NAND is undefined
232 Failed: The function BIT-NAND is undefined
233 Failed: The function BIT-NOR is undefined
234 Failed: The function BIT-NOR is undefined
235 Failed: The function BIT-NOR is undefined
236 Failed: The function BIT-NOR is undefined
237 Failed: The function BIT-NOR is undefined
238 Failed: The function BIT-NOR is undefined
239 Failed: The function BIT-NOR is undefined
240 Failed: The function BIT-NOR is undefined
241 Failed: The function BIT-NOR is undefined
242 Failed: The function BIT-NOR is undefined
243 Failed: The function BIT-NOR is undefined
244 Failed: The function BIT-NOR is undefined
245 Failed: The function BIT-NOR is undefined
246 Failed: The function BIT-NOR is undefined
247 Failed: The function BIT-NOR is undefined
248 Failed: The function BIT-ORC1 is undefined
249 Failed: The function BIT-ORC1 is undefined
250 Failed: The function BIT-ORC1 is undefined
251 Failed: The function BIT-ORC1 is undefined
252 Failed: The function BIT-ORC1 is undefined
253 Failed: The function BIT-ORC1 is undefined
254 Failed: The function BIT-ORC1 is undefined
255 Failed: The function BIT-ORC1 is undefined
256 Failed: The function BIT-ORC1 is undefined
257 Failed: The function BIT-ORC1 is undefined
258 Failed: The function BIT-ORC1 is undefined
259 Failed: The function BIT-ORC1 is undefined
260 Failed: The function BIT-ORC1 is undefined
261 Failed: The function BIT-ORC1 is undefined
262 Failed: The function BIT-ORC1 is undefined
263 Failed: The function BIT-ORC2 is undefined
264 Failed: The function BIT-ORC2 is undefined
265 Failed: The function BIT-ORC2 is undefined
266 Failed: The function BIT-ORC2 is undefined
267 Failed: The function BIT-ORC2 is undefined
268 Failed: The function BIT-ORC2 is undefined
269 Failed: The function BIT-ORC2 is undefined
270 Failed: The function BIT-ORC2 is undefined
271 Failed: The function BIT-ORC2 is undefined
272 Failed: The function BIT-ORC2 is undefined
273 Failed: The function BIT-ORC2 is undefined
274 Failed: The function BIT-ORC2 is undefined
275 Failed: The function BIT-ORC2 is undefined
276 Failed: The function BIT-ORC2 is undefined
277 Failed: The function BIT-ORC2 is undefined
278 Failed: The function BIT-XOR is undefined
279 Failed: The function BIT-XOR is undefined
280 Failed: The function BIT-XOR is undefined
281 Failed: The function BIT-XOR is undefined
282 Failed: The function BIT-XOR is undefined
283 Failed: The function BIT-XOR is undefined
284 Failed: The function BIT-XOR is undefined
285 Failed: The function BIT-XOR is undefined
286 Failed: The function BIT-XOR is undefined
287 Failed: The function BIT-XOR is undefined
288 Failed: The function BIT-XOR is undefined
289 Failed: The function BIT-XOR is undefined
290 Failed: The function BIT-XOR is undefined
291 Failed: The function BIT-XOR is undefined
292 Failed: The function BIT-XOR is undefined
293 Failed: The function BIT-NOT is undefined
294 Failed: The function BIT-NOT is undefined
295 Failed: The function BIT-NOT is undefined
296 Failed: The function BIT-NOT is undefined
297 Failed: The function BIT-NOT is undefined
298 Failed: The function BIT-NOT is undefined
299 Failed: The function BIT-NOT is undefined
300 Failed: The function BIT-NOT is undefined
301 Failed: The function BIT-NOT is undefined
302 Failed: The function BIT-NOT is undefined
303 Failed: The function BIT-NOT is undefined
304 Failed: The function BIT-NOT is undefined
305 Failed: The function BIT-NOT is undefined
306 Failed: The function BIT-NOT is undefined
307 Failed: The function BIT-NOT is undefined
308 Failed: The function BIT-VECTOR-P is undefined
309 Failed: The function BIT-VECTOR-P is undefined
310 Failed: The function BIT-VECTOR-P is undefined
311 Failed: (NOT (SIMPLE-BIT-VECTOR-P (MAKE-ARRAY 6)))
312 Pass: (SIMPLE-BIT-VECTOR-P #())
313 Pass: (SIMPLE-BIT-VECTOR-P #(0 1 0 1))
314 Pass: (SIMPLE-BIT-VECTOR-P #(0))
315 Pass: (SIMPLE-BIT-VECTOR-P #(1))
316 Pass: (SIMPLE-BIT-VECTOR-P (MAKE-ARRAY 6 :ELEMENT-TYPE (QUOTE BIT)))
317 Pass: (EQUAL (CONCATENATE (QUOTE LIST) (ADJUST-ARRAY (MAKE-ARRAY 5 :INITIAL-CONTENTS (QUOTE (0 1 2 3 4))) 10 :INITIAL-ELEMENT -1)) (QUOTE (0 1 2 3 4 -1 -1 -1 -1 -1)))
318 Pass: (LET* ((ARRAY0 (MAKE-ARRAY (QUOTE (3 2)) :INITIAL-CONTENTS (QUOTE ((E0-0 E0-1) (E1-0 E1-1) (E2-0 E2-1))))) (ARRAY (ADJUST-ARRAY ARRAY0 (QUOTE (4 3)) :INITIAL-ELEMENT 0))) (AND (EQ (AREF ARRAY 0 0) (QUOTE E0-0)) (EQ (AREF ARRAY 0 1) (QUOTE E0-1)) (EQL (AREF ARRAY 0 2) (QUOTE 0)) (EQ (AREF ARRAY 1 0) (QUOTE E1-0)) (EQ (AREF ARRAY 1 1) (QUOTE E1-1)) (EQL (AREF ARRAY 1 2) 0) (EQ (AREF ARRAY 2 0) (QUOTE E2-0)) (EQ (AREF ARRAY 2 1) (QUOTE E2-1)) (EQL (AREF ARRAY 2 2) 0)))
319 Pass: (LET* ((ARRAY0 (MAKE-ARRAY (QUOTE (3 2)) :INITIAL-CONTENTS (QUOTE ((E0-0 E0-1) (E1-0 E1-1) (E2-0 E2-1))))) (ARRAY (ADJUST-ARRAY ARRAY0 (QUOTE (1 1)) :INITIAL-ELEMENT 0))) (EQ (AREF ARRAY 0 0) (QUOTE E0-0)))
320 Failed: (LET* ((ARRAY0 (MAKE-ARRAY (QUOTE (3 2)) :INITIAL-ELEMENT 0)) (ARRAY1 (MAKE-ARRAY 6 :INITIAL-ELEMENT 1)) (ARRAY (ADJUST-ARRAY ARRAY1 3 :DISPLACED-TO ARRAY0))) (AND (EQUAL (ARRAY-DIMENSIONS ARRAY) (QUOTE (3))) (EVERY (FUNCTION ZEROP) ARRAY)))
321 Pass: (LET* ((ARRAY0 (MAKE-ARRAY (QUOTE (3 2)) :INITIAL-CONTENTS (QUOTE ((0 1) (2 3) (4 5))))) (ARRAY1 (MAKE-ARRAY 6 :INITIAL-ELEMENT 1)) (ARRAY (ADJUST-ARRAY ARRAY1 3 :DISPLACED-TO ARRAY0 :DISPLACED-INDEX-OFFSET 3))) (AND (EQUAL (ARRAY-DIMENSIONS ARRAY) (QUOTE (3))) (EQL (AREF ARRAY 0) 3) (EQL (AREF ARRAY 1) 4) (EQL (AREF ARRAY 2) 5)))
322 Pass: (LET* ((ARRAY0 (MAKE-ARRAY (QUOTE (3 2)) :INITIAL-CONTENTS (QUOTE ((0 1) (2 3) (4 5))))) (ARRAY1 (MAKE-ARRAY 6 :DISPLACED-TO ARRAY0)) (ARRAY (ADJUST-ARRAY ARRAY1 9 :INITIAL-ELEMENT (QUOTE -1)))) (AND (EQUAL (ARRAY-DIMENSIONS ARRAY) (QUOTE (9))) (MULTIPLE-VALUE-BIND (DISPLACED-TO DISPLACED-INDEX-OFFSET) (ARRAY-DISPLACEMENT ARRAY) (AND (NULL DISPLACED-TO) (ZEROP DISPLACED-INDEX-OFFSET))) (EQL (AREF ARRAY 0) 0) (EQL (AREF ARRAY 1) 1) (EQL (AREF ARRAY 2) 2) (EQL (AREF ARRAY 3) 3) (EQL (AREF ARRAY 4) 4) (EQL (AREF ARRAY 5) 5) (EQL (AREF ARRAY 6) -1) (EQL (AREF ARRAY 7) -1) (EQL (AREF ARRAY 8) -1)))
323 Failed: no dispatch function defined for #\A
324 Failed: Illegal function call: ((ALPHA BETA GAMMA DELTA BAZ) (EPSILON ZETA ETA THETA BAZ) (IOTA KAPPA LAMBDA MU BAZ))
325 Failed: unmatched close parenthesis
326 Failed: unmatched close parenthesis
327 Failed: (LET* ((ARRAY0 (MAKE-ARRAY 3 :INITIAL-ELEMENT 0)) (ARRAY1 (MAKE-ARRAY 3 :ADJUSTABLE T :DISPLACED-TO ARRAY0)) (ARRAY2 (MAKE-ARRAY 3 :DISPLACED-TO ARRAY1))) (AND (ADJUSTABLE-ARRAY-P ARRAY1) (EQ ARRAY1 (ADJUST-ARRAY ARRAY1 6 :INITIAL-CONTENTS (QUOTE (A B C D E F)))) (MULTIPLE-VALUE-BIND (DISPLACED-TO DISPLACED-INDEX-OFFSET) (ARRAY-DISPLACEMENT ARRAY1) (AND (NULL DISPLACED-TO) (ZEROP DISPLACED-INDEX-OFFSET))) (EQ (AREF ARRAY1 0) (QUOTE A)) (EQ (AREF ARRAY1 1) (QUOTE B)) (EQ (AREF ARRAY1 2) (QUOTE C)) (EQ (AREF ARRAY1 3) (QUOTE D)) (EQ (AREF ARRAY1 4) (QUOTE E)) (EQ (AREF ARRAY1 5) (QUOTE F)) (EQ (AREF ARRAY2 0) (QUOTE A)) (EQ (AREF ARRAY2 1) (QUOTE B)) (EQ (AREF ARRAY2 2) (QUOTE C))))
328 Failed: (LET* ((STR0 (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcdefghij")) (STR1 (MAKE-ARRAY 7 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO STR0 :DISPLACED-INDEX-OFFSET 3)) (STR2 (MAKE-ARRAY 3 :ELEMENT-TYPE (QUOTE CHARACTER) :DISPLACED-TO STR1 :DISPLACED-INDEX-OFFSET 4))) (AND (STRING= STR0 "abcdefghij") (STRING= STR1 "defghij") (STRING= STR2 "hij") (ADJUSTABLE-ARRAY-P STR1) (EQ STR1 (ADJUST-ARRAY STR1 10 :INITIAL-CONTENTS "QRSTUVWXYZ")) (STRING= STR2 "UVW")))
329 Pass: (LET* ((BV (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #(1 0 1 0 1 0 1 0 1 0) :FILL-POINTER T))) (AND (DOTIMES (I 10 T) (UNLESS (EQL (VECTOR-POP BV) (IF (EVENP I) 0 1)) (RETURN NIL))) (ZEROP (LENGTH BV))))
330 Pass: (LET* ((BV (MAKE-ARRAY 10 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE BIT) :FILL-POINTER 0))) (DOTIMES (I 100) (VECTOR-PUSH-EXTEND (IF (ODDP I) 0 1) BV)) (DOTIMES (I 100 T) (UNLESS (EQL (VECTOR-POP BV) (IF (ODDP I) 1 0)) (RETURN NIL))))
331 Pass: (LET* ((STR (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abcdefghjk" :FILL-POINTER T))) (AND (DOTIMES (I 10 T) (UNLESS (CHAR= (VECTOR-POP STR) (AREF "kjhgfedcba" I)) (RETURN NIL))) (ZEROP (LENGTH STR))))
332 Pass: (LET* ((STR (MAKE-ARRAY 10 :ADJUSTABLE T :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 0))) (DOTIMES (I 100) (VECTOR-PUSH-EXTEND (IF (ODDP I) #\a #\z) STR)) (DOTIMES (I 100 T) (UNLESS (CHAR= (VECTOR-POP STR) (IF (ODDP I) #\z #\a)) (RETURN NIL))))
Pass: 162, Failed: 171

test: sacla-tests/must-character.lisp
0 Pass: (CHAR= #\d #\d)
1 Pass: (NOT (CHAR= #\A #\a))
2 Pass: (NOT (CHAR= #\d #\x))
3 Pass: (NOT (CHAR= #\d #\D))
4 Pass: (NOT (CHAR/= #\d #\d))
5 Pass: (CHAR/= #\d #\x)
6 Pass: (CHAR/= #\d #\D)
7 Pass: (CHAR= #\d #\d #\d #\d)
8 Pass: (NOT (CHAR/= #\d #\d #\d #\d))
9 Pass: (NOT (CHAR= #\d #\d #\x #\d))
10 Pass: (NOT (CHAR/= #\d #\d #\x #\d))
11 Pass: (NOT (CHAR= #\d #\y #\x #\c))
12 Pass: (CHAR/= #\d #\y #\x #\c)
13 Pass: (NOT (CHAR= #\d #\c #\d))
14 Pass: (NOT (CHAR/= #\d #\c #\d))
15 Pass: (CHAR< #\d #\x)
16 Pass: (CHAR<= #\d #\x)
17 Pass: (NOT (CHAR< #\d #\d))
18 Pass: (CHAR<= #\d #\d)
19 Pass: (CHAR< #\a #\e #\y #\z)
20 Pass: (CHAR<= #\a #\e #\y #\z)
21 Pass: (NOT (CHAR< #\a #\e #\e #\y))
22 Pass: (CHAR<= #\a #\e #\e #\y)
23 Pass: (CHAR> #\e #\d)
24 Pass: (CHAR>= #\e #\d)
25 Pass: (CHAR> #\d #\c #\b #\a)
26 Pass: (CHAR>= #\d #\c #\b #\a)
27 Pass: (NOT (CHAR> #\d #\d #\c #\a))
28 Pass: (CHAR>= #\d #\d #\c #\a)
29 Pass: (NOT (CHAR> #\e #\d #\b #\c #\a))
30 Pass: (NOT (CHAR>= #\e #\d #\b #\c #\a))
31 Pass: (CHAR-EQUAL #\A #\a)
32 Pass: (EQUAL (STABLE-SORT (LIST #\b #\A #\B #\a #\c #\C) (FUNCTION CHAR-LESSP)) (QUOTE (#\A #\a #\b #\B #\c #\C)))
33 Pass: (CHAR= #\a)
34 Pass: (CHAR= #\a #\a)
35 Pass: (CHAR= #\a #\a #\a)
36 Pass: (CHAR= #\a #\a #\a #\a)
37 Pass: (CHAR= #\a #\a #\a #\a #\a)
38 Pass: (CHAR= #\a #\a #\a #\a #\a #\a)
39 Pass: (LET ((C #\z)) (AND (EQ C C) (CHAR= C C)))
40 Pass: (NOT (CHAR= #\Z #\z))
41 Pass: (NOT (CHAR= #\z #\z #\z #\a))
42 Pass: (NOT (CHAR= #\a #\z #\z #\z #\a))
43 Pass: (NOT (CHAR= #\z #\i #\z #\z))
44 Pass: (NOT (CHAR= #\z #\z #\Z #\z))
45 Pass: (CHAR/= #\a)
46 Pass: (CHAR/= #\a #\b)
47 Pass: (CHAR/= #\a #\b #\c)
48 Pass: (CHAR/= #\a #\b #\c #\d)
49 Pass: (CHAR/= #\a #\b #\c #\d #\e)
50 Pass: (CHAR/= #\a #\b #\c #\d #\e #\f)
51 Pass: (LET ((C #\z)) (AND (EQ C C) (NOT (CHAR/= C C))))
52 Pass: (CHAR/= #\Z #\z)
53 Pass: (NOT (CHAR/= #\z #\z #\z #\a))
54 Pass: (NOT (CHAR= #\a #\z #\z #\z #\a))
55 Pass: (NOT (CHAR= #\z #\i #\z #\z))
56 Pass: (NOT (CHAR= #\z #\z #\Z #\z))
57 Pass: (NOT (CHAR/= #\a #\a #\b #\c))
58 Pass: (NOT (CHAR/= #\a #\b #\a #\c))
59 Pass: (NOT (CHAR/= #\a #\b #\c #\a))
60 Pass: (CHAR< #\a)
61 Pass: (CHAR< #\a #\z)
62 Pass: (CHAR< #\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z)
63 Pass: (NOT (CHAR< #\z #\y #\x #\w #\v #\u #\t #\s #\r #\q #\p #\o #\n #\m #\l #\k #\j #\i #\h #\g #\f #\e #\d #\c #\b #\a))
64 Pass: (CHAR< #\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z)
65 Pass: (NOT (CHAR< #\Z #\Y #\X #\W #\V #\U #\T #\S #\R #\Q #\P #\O #\N #\M #\L #\K #\J #\I #\H #\G #\F #\E #\D #\C #\B #\A))
66 Pass: (CHAR< #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9)
67 Pass: (NOT (CHAR< #\9 #\8 #\7 #\6 #\5 #\4 #\3 #\2 #\1 #\0))
68 Pass: (OR (CHAR< #\9 #\A) (CHAR< #\Z #\0))
69 Pass: (OR (CHAR< #\9 #\a) (CHAR< #\z #\0))
70 Pass: (NOT (CHAR< #\a #\a #\b #\c))
71 Pass: (NOT (CHAR< #\a #\b #\a #\c))
72 Pass: (NOT (CHAR< #\a #\b #\c #\a))
73 Pass: (NOT (CHAR< #\9 #\0))
74 Pass: (CHAR> #\a)
75 Pass: (NOT (CHAR> #\a #\z))
76 Pass: (CHAR> #\z #\a)
77 Pass: (NOT (CHAR> #\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z))
78 Pass: (CHAR> #\z #\y #\x #\w #\v #\u #\t #\s #\r #\q #\p #\o #\n #\m #\l #\k #\j #\i #\h #\g #\f #\e #\d #\c #\b #\a)
79 Pass: (NOT (CHAR> #\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z))
80 Pass: (CHAR> #\Z #\Y #\X #\W #\V #\U #\T #\S #\R #\Q #\P #\O #\N #\M #\L #\K #\J #\I #\H #\G #\F #\E #\D #\C #\B #\A)
81 Pass: (NOT (CHAR> #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9))
82 Pass: (CHAR> #\9 #\8 #\7 #\6 #\5 #\4 #\3 #\2 #\1 #\0)
83 Pass: (OR (CHAR> #\A #\9) (CHAR> #\0 #\Z))
84 Pass: (OR (CHAR> #\a #\9) (CHAR> #\0 #\z))
85 Pass: (NOT (CHAR> #\a #\a #\b #\c))
86 Pass: (NOT (CHAR> #\a #\b #\a #\c))
87 Pass: (NOT (CHAR> #\a #\b #\c #\a))
88 Pass: (CHAR> #\9 #\0)
89 Pass: (CHAR<= #\a)
90 Pass: (CHAR<= #\a #\z)
91 Pass: (CHAR<= #\a #\a)
92 Pass: (CHAR<= #\Z #\Z)
93 Pass: (CHAR<= #\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z)
94 Pass: (CHAR<= #\a #\a #\b #\b #\c #\c #\d #\d #\e #\e #\f #\f #\g #\g #\h #\h #\i #\i #\j #\j #\k #\k #\l #\l #\m #\m #\n #\n #\o #\o #\p #\p #\q #\q #\r #\r #\s #\s #\t #\t #\u #\u #\v #\v #\w #\w #\x #\x #\y #\y #\z #\z)
95 Pass: (NOT (CHAR<= #\z #\y #\x #\w #\v #\u #\t #\s #\r #\q #\p #\o #\n #\m #\l #\k #\j #\i #\h #\g #\f #\e #\d #\c #\b #\a))
96 Pass: (CHAR<= #\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z)
97 Pass: (CHAR<= #\A #\B #\B #\C #\D #\E #\E #\F #\G #\H #\I #\I #\J #\K #\L #\M #\N #\N #\O #\P #\Q #\R #\S #\T #\T #\U #\V #\W #\X #\Y #\Z)
98 Pass: (NOT (CHAR<= #\Z #\Y #\X #\W #\V #\U #\T #\S #\R #\Q #\P #\O #\N #\M #\L #\K #\J #\I #\H #\G #\F #\E #\D #\C #\B #\A))
99 Pass: (CHAR<= #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9)
100 Pass: (CHAR<= #\0 #\1 #\2 #\2 #\3 #\3 #\3 #\3 #\4 #\5 #\6 #\7 #\8 #\9 #\9)
101 Pass: (NOT (CHAR<= #\9 #\8 #\7 #\6 #\5 #\4 #\3 #\2 #\1 #\0))
102 Pass: (OR (CHAR<= #\9 #\A) (CHAR<= #\Z #\0))
103 Pass: (OR (CHAR<= #\9 #\a) (CHAR<= #\z #\0))
104 Pass: (CHAR<= #\a #\a #\b #\c)
105 Pass: (NOT (CHAR<= #\a #\b #\a #\c))
106 Pass: (NOT (CHAR<= #\a #\b #\c #\a))
107 Pass: (NOT (CHAR<= #\9 #\0))
108 Pass: (CHAR>= #\a)
109 Pass: (NOT (CHAR>= #\a #\z))
110 Pass: (CHAR>= #\z #\a)
111 Pass: (CHAR>= #\a #\a)
112 Pass: (CHAR>= #\Z #\Z)
113 Pass: (NOT (CHAR>= #\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z))
114 Pass: (CHAR>= #\z #\y #\x #\w #\v #\u #\t #\s #\r #\q #\p #\o #\n #\m #\l #\k #\j #\i #\h #\g #\f #\e #\d #\c #\b #\a)
115 Pass: (CHAR>= #\z #\z #\y #\x #\w #\v #\u #\t #\s #\r #\q #\p #\o #\n #\n #\m #\m #\l #\k #\j #\i #\h #\g #\f #\e #\d #\c #\b #\a #\a)
116 Pass: (NOT (CHAR>= #\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z))
117 Pass: (CHAR>= #\Z #\Y #\X #\W #\V #\U #\T #\S #\R #\Q #\P #\O #\N #\M #\L #\K #\J #\I #\H #\G #\F #\E #\D #\C #\B #\A)
118 Pass: (CHAR>= #\Z #\Y #\X #\W #\V #\U #\U #\T #\T #\S #\S #\R #\Q #\P #\O #\N #\M #\L #\K #\J #\I #\H #\H #\G #\G #\F #\F #\E #\D #\C #\B #\A)
119 Pass: (NOT (CHAR>= #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9))
120 Pass: (CHAR>= #\9 #\8 #\7 #\6 #\5 #\4 #\3 #\2 #\1 #\0)
121 Pass: (CHAR>= #\9 #\8 #\8 #\8 #\7 #\6 #\5 #\4 #\3 #\3 #\3 #\2 #\1 #\0)
122 Pass: (OR (CHAR>= #\A #\9) (CHAR>= #\0 #\Z))
123 Pass: (OR (CHAR>= #\a #\9) (CHAR>= #\0 #\z))
124 Pass: (CHAR>= #\c #\b #\a #\a)
125 Pass: (NOT (CHAR>= #\c #\b #\a #\a #\b #\c))
126 Pass: (NOT (CHAR>= #\c #\b #\a #\c))
127 Pass: (NOT (CHAR>= #\c #\b #\c #\a))
128 Pass: (CHAR>= #\9 #\0)
129 Pass: (NOT (CHAR>= #\0 #\9))
130 Pass: (CHAR-EQUAL #\a)
131 Pass: (CHAR-EQUAL #\a #\a)
132 Pass: (CHAR-EQUAL #\a #\a #\a)
133 Pass: (CHAR-EQUAL #\a #\a #\a #\a)
134 Pass: (CHAR-EQUAL #\a #\a #\a #\a #\a)
135 Pass: (CHAR-EQUAL #\a #\a #\a #\a #\a #\a)
136 Pass: (CHAR-EQUAL #\a #\A)
137 Pass: (CHAR-EQUAL #\a #\A #\a)
138 Pass: (CHAR-EQUAL #\a #\a #\A #\a)
139 Pass: (CHAR-EQUAL #\a #\a #\a #\A #\a)
140 Pass: (CHAR-EQUAL #\a #\a #\a #\a #\A #\a)
141 Pass: (LET ((C #\z)) (AND (EQ C C) (CHAR-EQUAL C C)))
142 Pass: (CHAR-EQUAL #\Z #\z)
143 Pass: (NOT (CHAR-EQUAL #\z #\z #\z #\a))
144 Pass: (NOT (CHAR-EQUAL #\a #\z #\z #\z #\a))
145 Pass: (NOT (CHAR-EQUAL #\z #\i #\z #\z))
146 Pass: (CHAR-EQUAL #\z #\z #\Z #\z)
147 Pass: (CHAR-EQUAL #\a #\A #\a #\A #\a #\A #\a #\A #\a #\A)
148 Pass: (CHAR-NOT-EQUAL #\a)
149 Pass: (CHAR-NOT-EQUAL #\a #\b)
150 Pass: (CHAR-NOT-EQUAL #\a #\b #\c)
151 Pass: (CHAR-NOT-EQUAL #\a #\b #\c #\d)
152 Pass: (CHAR-NOT-EQUAL #\a #\b #\c #\d #\e)
153 Pass: (CHAR-NOT-EQUAL #\a #\b #\c #\d #\e #\f)
154 Pass: (LET ((C #\z)) (AND (EQ C C) (NOT (CHAR-NOT-EQUAL C C))))
155 Pass: (NOT (CHAR-NOT-EQUAL #\Z #\z))
156 Pass: (NOT (CHAR-NOT-EQUAL #\z #\z #\z #\a))
157 Pass: (NOT (CHAR= #\a #\z #\z #\z #\a))
158 Pass: (NOT (CHAR= #\z #\i #\z #\z))
159 Pass: (NOT (CHAR= #\z #\z #\Z #\z))
160 Pass: (NOT (CHAR-NOT-EQUAL #\a #\a #\b #\c))
161 Pass: (NOT (CHAR-NOT-EQUAL #\a #\b #\a #\c))
162 Pass: (NOT (CHAR-NOT-EQUAL #\a #\b #\c #\a))
163 Pass: (NOT (CHAR-NOT-EQUAL #\a #\A #\a #\A))
164 Pass: (CHAR-LESSP #\a)
165 Pass: (CHAR-LESSP #\a #\z)
166 Pass: (CHAR-LESSP #\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z)
167 Pass: (NOT (CHAR-LESSP #\z #\y #\x #\w #\v #\u #\t #\s #\r #\q #\p #\o #\n #\m #\l #\k #\j #\i #\h #\g #\f #\e #\d #\c #\b #\a))
168 Pass: (CHAR-LESSP #\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z)
169 Pass: (NOT (CHAR-LESSP #\Z #\Y #\X #\W #\V #\U #\T #\S #\R #\Q #\P #\O #\N #\M #\L #\K #\J #\I #\H #\G #\F #\E #\D #\C #\B #\A))
170 Pass: (CHAR-LESSP #\a #\B #\c #\D #\e #\F #\g #\H #\i #\J #\k #\L #\m #\N #\o #\P #\q #\R #\s #\T #\u #\V #\w #\X #\y #\Z)
171 Pass: (CHAR-LESSP #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9)
172 Pass: (NOT (CHAR-LESSP #\9 #\8 #\7 #\6 #\5 #\4 #\3 #\2 #\1 #\0))
173 Pass: (OR (CHAR-LESSP #\9 #\A) (CHAR-LESSP #\Z #\0))
174 Pass: (OR (CHAR-LESSP #\9 #\a) (CHAR-LESSP #\z #\0))
175 Pass: (NOT (CHAR-LESSP #\a #\a #\b #\c))
176 Pass: (NOT (CHAR-LESSP #\a #\b #\a #\c))
177 Pass: (NOT (CHAR-LESSP #\a #\b #\c #\a))
178 Pass: (NOT (CHAR-LESSP #\9 #\0))
179 Pass: (AND (CHAR-LESSP #\a #\Z) (CHAR-LESSP #\A #\z))
180 Pass: (CHAR-GREATERP #\a)
181 Pass: (NOT (CHAR-GREATERP #\a #\z))
182 Pass: (CHAR-GREATERP #\z #\a)
183 Pass: (NOT (CHAR-GREATERP #\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z))
184 Pass: (CHAR-GREATERP #\z #\y #\x #\w #\v #\u #\t #\s #\r #\q #\p #\o #\n #\m #\l #\k #\j #\i #\h #\g #\f #\e #\d #\c #\b #\a)
185 Pass: (NOT (CHAR-GREATERP #\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z))
186 Pass: (CHAR-GREATERP #\Z #\Y #\X #\W #\V #\U #\T #\S #\R #\Q #\P #\O #\N #\M #\L #\K #\J #\I #\H #\G #\F #\E #\D #\C #\B #\A)
187 Pass: (CHAR-GREATERP #\z #\Y #\x #\W #\v #\U #\t #\S #\r #\Q #\p #\O #\n #\M #\l #\K #\j #\I #\h #\G #\f #\E #\d #\C #\b #\A)
188 Pass: (NOT (CHAR-GREATERP #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9))
189 Pass: (CHAR-GREATERP #\9 #\8 #\7 #\6 #\5 #\4 #\3 #\2 #\1 #\0)
190 Pass: (OR (CHAR-GREATERP #\A #\9) (CHAR-GREATERP #\0 #\Z))
191 Pass: (OR (CHAR-GREATERP #\a #\9) (CHAR-GREATERP #\0 #\z))
192 Pass: (NOT (CHAR-GREATERP #\a #\a #\b #\c))
193 Pass: (NOT (CHAR-GREATERP #\a #\b #\a #\c))
194 Pass: (NOT (CHAR-GREATERP #\a #\b #\c #\a))
195 Pass: (CHAR-GREATERP #\9 #\0)
196 Pass: (AND (CHAR-GREATERP #\z #\A) (CHAR-GREATERP #\Z #\a))
197 Pass: (CHAR-NOT-GREATERP #\a)
198 Pass: (CHAR-NOT-GREATERP #\a #\z)
199 Pass: (CHAR-NOT-GREATERP #\a #\a)
200 Pass: (CHAR-NOT-GREATERP #\Z #\Z)
201 Pass: (CHAR-NOT-GREATERP #\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z)
202 Pass: (CHAR-NOT-GREATERP #\a #\a #\b #\b #\c #\c #\d #\d #\e #\e #\f #\f #\g #\g #\h #\h #\i #\i #\j #\j #\k #\k #\l #\l #\m #\m #\n #\n #\o #\o #\p #\p #\q #\q #\r #\r #\s #\s #\t #\t #\u #\u #\v #\v #\w #\w #\x #\x #\y #\y #\z #\z)
203 Pass: (CHAR-NOT-GREATERP #\a #\A #\b #\B #\c #\C #\d #\D #\e #\E #\f #\F #\g #\G #\h #\H #\i #\I #\j #\J #\k #\K #\l #\L #\m #\M #\n #\N #\o #\O #\p #\P #\q #\Q #\r #\R #\s #\S #\t #\T #\u #\U #\v #\V #\w #\W #\x #\X #\y #\Y #\z #\z)
204 Pass: (NOT (CHAR-NOT-GREATERP #\z #\y #\x #\w #\v #\u #\t #\s #\r #\q #\p #\o #\n #\m #\l #\k #\j #\i #\h #\g #\f #\e #\d #\c #\b #\a))
205 Pass: (CHAR-NOT-GREATERP #\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z)
206 Pass: (CHAR-NOT-GREATERP #\A #\B #\B #\C #\D #\E #\E #\F #\G #\H #\I #\I #\J #\K #\L #\M #\N #\N #\O #\P #\Q #\R #\S #\T #\T #\U #\V #\W #\X #\Y #\Z)
207 Pass: (NOT (CHAR-NOT-GREATERP #\Z #\Y #\X #\W #\V #\U #\T #\S #\R #\Q #\P #\O #\N #\M #\L #\K #\J #\I #\H #\G #\F #\E #\D #\C #\B #\A))
208 Pass: (CHAR-NOT-GREATERP #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9)
209 Pass: (CHAR-NOT-GREATERP #\0 #\1 #\2 #\2 #\3 #\3 #\3 #\3 #\4 #\5 #\6 #\7 #\8 #\9 #\9)
210 Pass: (NOT (CHAR-NOT-GREATERP #\9 #\8 #\7 #\6 #\5 #\4 #\3 #\2 #\1 #\0))
211 Pass: (OR (CHAR-NOT-GREATERP #\9 #\A) (CHAR-NOT-GREATERP #\Z #\0))
212 Pass: (OR (CHAR-NOT-GREATERP #\9 #\a) (CHAR-NOT-GREATERP #\z #\0))
213 Pass: (CHAR-NOT-GREATERP #\a #\a #\b #\c)
214 Pass: (NOT (CHAR-NOT-GREATERP #\a #\b #\a #\c))
215 Pass: (NOT (CHAR-NOT-GREATERP #\a #\b #\c #\a))
216 Pass: (NOT (CHAR-NOT-GREATERP #\9 #\0))
217 Pass: (AND (CHAR-NOT-GREATERP #\A #\z) (CHAR-NOT-GREATERP #\a #\Z))
218 Pass: (CHAR-NOT-LESSP #\a)
219 Pass: (NOT (CHAR-NOT-LESSP #\a #\z))
220 Pass: (CHAR-NOT-LESSP #\z #\a)
221 Pass: (CHAR-NOT-LESSP #\a #\a)
222 Pass: (CHAR-NOT-LESSP #\Z #\Z)
223 Pass: (NOT (CHAR-NOT-LESSP #\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z))
224 Pass: (CHAR-NOT-LESSP #\z #\y #\x #\w #\v #\u #\t #\s #\r #\q #\p #\o #\n #\m #\l #\k #\j #\i #\h #\g #\f #\e #\d #\c #\b #\a)
225 Pass: (CHAR-NOT-LESSP #\z #\z #\y #\x #\w #\v #\u #\t #\s #\r #\q #\p #\o #\n #\n #\m #\m #\l #\k #\j #\i #\h #\g #\f #\e #\d #\c #\b #\a #\a)
226 Pass: (NOT (CHAR-NOT-LESSP #\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z))
227 Pass: (CHAR-NOT-LESSP #\Z #\Y #\X #\W #\V #\U #\T #\S #\R #\Q #\P #\O #\N #\M #\L #\K #\J #\I #\H #\G #\F #\E #\D #\C #\B #\A)
228 Pass: (CHAR-NOT-LESSP #\Z #\Y #\X #\W #\V #\U #\U #\T #\T #\S #\S #\R #\Q #\P #\O #\N #\M #\L #\K #\J #\I #\H #\H #\G #\G #\F #\F #\E #\D #\C #\B #\A)
229 Pass: (CHAR-NOT-LESSP #\z #\Z #\y #\x #\w #\V #\v #\u #\t #\s #\r #\q #\p #\o #\n #\n #\m #\M #\l #\k #\K #\j #\i #\h #\g #\f #\e #\d #\c #\b #\A #\a)
230 Pass: (NOT (CHAR-NOT-LESSP #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9))
231 Pass: (CHAR-NOT-LESSP #\9 #\8 #\7 #\6 #\5 #\4 #\3 #\2 #\1 #\0)
232 Pass: (CHAR-NOT-LESSP #\9 #\8 #\8 #\8 #\7 #\6 #\5 #\4 #\3 #\3 #\3 #\2 #\1 #\0)
233 Pass: (OR (CHAR-NOT-LESSP #\A #\9) (CHAR-NOT-LESSP #\0 #\Z))
234 Pass: (OR (CHAR-NOT-LESSP #\a #\9) (CHAR-NOT-LESSP #\0 #\z))
235 Pass: (CHAR-NOT-LESSP #\c #\b #\a #\a)
236 Pass: (NOT (CHAR-NOT-LESSP #\c #\b #\a #\a #\b #\c))
237 Pass: (NOT (CHAR-NOT-LESSP #\c #\b #\a #\c))
238 Pass: (NOT (CHAR-NOT-LESSP #\c #\b #\c #\a))
239 Pass: (CHAR-NOT-LESSP #\9 #\0)
240 Pass: (NOT (CHAR-NOT-LESSP #\0 #\9))
241 Pass: (AND (CHAR-NOT-LESSP #\z #\A) (CHAR-NOT-LESSP #\Z #\a))
242 Pass: (CHAR= (CHARACTER #\a) #\a)
243 Pass: (CHAR= (CHARACTER #\b) #\b)
244 Pass: (CHAR= (CHARACTER #\ ) #\ )
245 Pass: (CHAR= (CHARACTER "a") #\a)
246 Pass: (CHAR= (CHARACTER "X") #\X)
247 Pass: (CHAR= (CHARACTER "z") #\z)
248 Pass: (CHAR= (CHARACTER (QUOTE A)) #\A)
249 Pass: (CHAR= (CHARACTER (QUOTE a)) #\a)
250 Pass: (ALPHA-CHAR-P #\a)
251 Pass: (EVERY (FUNCTION ALPHA-CHAR-P) (QUOTE (#\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z)))
252 Pass: (EVERY (FUNCTION ALPHA-CHAR-P) (QUOTE (#\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z)))
253 Pass: (NOTANY (FUNCTION ALPHA-CHAR-P) (QUOTE (#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9)))
254 Pass: (NOT (ALPHA-CHAR-P #\
))
255 Pass: (ALPHANUMERICP #\Z)
256 Pass: (ALPHANUMERICP #\9)
257 Pass: (EVERY (FUNCTION ALPHANUMERICP) (QUOTE (#\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z)))
258 Pass: (EVERY (FUNCTION ALPHANUMERICP) (QUOTE (#\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z)))
259 Pass: (EVERY (FUNCTION ALPHANUMERICP) (QUOTE (#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9)))
260 Pass: (NOT (ALPHANUMERICP #\
))
261 Pass: (NOT (ALPHANUMERICP #\#))
262 Pass: (CHAR= (DIGIT-CHAR 0) #\0)
263 Pass: (CHAR= (DIGIT-CHAR 10 11) #\A)
264 Pass: (NULL (DIGIT-CHAR 10 10))
265 Pass: (CHAR= (DIGIT-CHAR 7) #\7)
266 Pass: (NULL (DIGIT-CHAR 12))
267 Pass: (CHAR= (DIGIT-CHAR 12 16) #\C)
268 Pass: (NULL (DIGIT-CHAR 6 2))
269 Pass: (CHAR= (DIGIT-CHAR 1 2) #\1)
270 Pass: (CHAR= (DIGIT-CHAR 35 36) #\Z)
271 Pass: (DO ((RADIX 2 (1+ RADIX))) ((= RADIX 37) T) (UNLESS (DOTIMES (I RADIX T) (UNLESS (CHAR= (DIGIT-CHAR I RADIX) (SVREF #(#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9 #\A #\B #\C #\D #\E #\F #\G #\H #\I #\J #\K #\L #\M #\N #\O #\P #\Q #\R #\S #\T #\U #\V #\W #\X #\Y #\Z) I)) (RETURN NIL))) (RETURN NIL)))
272 Pass: (= (DIGIT-CHAR-P #\0) 0)
273 Pass: (= (DIGIT-CHAR-P #\5) 5)
274 Pass: (NOT (DIGIT-CHAR-P #\5 2))
275 Pass: (NOT (DIGIT-CHAR-P #\A))
276 Pass: (NOT (DIGIT-CHAR-P #\a))
277 Pass: (= (DIGIT-CHAR-P #\A 11) 10)
278 Pass: (= (DIGIT-CHAR-P #\a 11) 10)
279 Pass: (EQUAL (MAPCAR (FUNCTION (LAMBDA (RADIX) (MAP (QUOTE LIST) (FUNCTION (LAMBDA (X) (DIGIT-CHAR-P X RADIX))) "059AaFGZ"))) (QUOTE (2 8 10 16 36))) (QUOTE ((0 NIL NIL NIL NIL NIL NIL NIL) (0 5 NIL NIL NIL NIL NIL NIL) (0 5 9 NIL NIL NIL NIL NIL) (0 5 9 10 10 15 NIL NIL) (0 5 9 10 10 15 16 35))))
280 Pass: (DO ((RADIX 2 (1+ RADIX))) ((= RADIX 37) T) (UNLESS (DOTIMES (I RADIX T) (UNLESS (= (DIGIT-CHAR-P (SCHAR "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" I) RADIX) I) (RETURN NIL))) (RETURN NIL)))
281 Pass: (DO ((RADIX 2 (1+ RADIX))) ((= RADIX 37) T) (UNLESS (DOTIMES (I RADIX T) (UNLESS (= (DIGIT-CHAR-P (SCHAR "0123456789abcdefghijklmnopqrstuvwxyz" I) RADIX) I) (RETURN NIL))) (RETURN NIL)))
282 Pass: (GRAPHIC-CHAR-P #\G)
283 Pass: (GRAPHIC-CHAR-P #\#)
284 Pass: (GRAPHIC-CHAR-P #\ )
285 Pass: (NOT (GRAPHIC-CHAR-P #\
))
286 Pass: (STANDARD-CHAR-P #\a)
287 Pass: (STANDARD-CHAR-P #\z)
288 Pass: (STANDARD-CHAR-P #\
)
289 Pass: (EVERY (FUNCTION STANDARD-CHAR-P) " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_'abcdefghijklmnopqrstuvwxyz{|}~
")
290 Pass: (CHAR= (CHAR-UPCASE #\a) #\A)
291 Pass: (CHAR= (CHAR-UPCASE #\A) #\A)
292 Pass: (CHAR= (CHAR-UPCASE #\-) #\-)
293 Pass: (CHAR= (CHAR-DOWNCASE #\A) #\a)
294 Pass: (CHAR= (CHAR-DOWNCASE #\a) #\a)
295 Pass: (CHAR= (CHAR-DOWNCASE #\-) #\-)
296 Pass: (NOT (UPPER-CASE-P #\a))
297 Pass: (UPPER-CASE-P #\A)
298 Pass: (NOT (UPPER-CASE-P #\-))
299 Pass: (NOT (LOWER-CASE-P #\A))
300 Pass: (LOWER-CASE-P #\a)
301 Pass: (NOT (LOWER-CASE-P #\-))
302 Pass: (BOTH-CASE-P #\a)
303 Pass: (BOTH-CASE-P #\A)
304 Pass: (NOT (BOTH-CASE-P #\-))
305 Pass: (LET ((CHARS " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_'abcdefghijklmnopqrstuvwxyz{|}~
") C) (DOTIMES (I (LENGTH CHARS) T) (SETQ C (SCHAR CHARS I)) (COND ((UPPER-CASE-P C) (UNLESS (AND (BOTH-CASE-P C) (NOT (LOWER-CASE-P C)) (CHAR= (CHAR-UPCASE C) C) (NOT (CHAR= (CHAR-DOWNCASE C) C))) (RETURN NIL))) ((LOWER-CASE-P C) (UNLESS (AND (BOTH-CASE-P C) (CHAR= (CHAR-DOWNCASE C) C) (NOT (CHAR= (CHAR-UPCASE C) C))) (RETURN NIL))) (T (UNLESS (AND (NOT (UPPER-CASE-P C)) (NOT (LOWER-CASE-P C)) (NOT (BOTH-CASE-P C)) (CHAR= (CHAR-UPCASE C) C) (CHAR= (CHAR-DOWNCASE C) C)) (RETURN NIL))))))
306 Pass: (EVERY (COMPLEMENT (FUNCTION MINUSP)) (MAP (QUOTE LIST) (FUNCTION CHAR-CODE) " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_'abcdefghijklmnopqrstuvwxyz{|}~
"))
307 Pass: (EVERY (COMPLEMENT (FUNCTION MINUSP)) (MAP (QUOTE LIST) (FUNCTION CHAR-INT) " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_'abcdefghijklmnopqrstuvwxyz{|}~
"))
308 Pass: (EVERY (FUNCTION CHARACTERP) (MAP (QUOTE LIST) (FUNCTION CODE-CHAR) (MAP (QUOTE LIST) (FUNCTION CHAR-CODE) " !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_'abcdefghijklmnopqrstuvwxyz{|}~
")))
309 Pass: (DOTIMES (I CHAR-CODE-LIMIT T) (UNLESS (OR (NULL (CODE-CHAR I)) (CHARACTERP (CODE-CHAR I))) (RETURN NIL)))
310 Pass: (CHAR= #\  (NAME-CHAR (CHAR-NAME #\ )))
311 Pass: (CHAR= #\  (NAME-CHAR (CHAR-NAME #\ )))
312 Pass: (CHAR= #\
 (NAME-CHAR (CHAR-NAME #\
)))
Pass: 313, Failed: 0

test: sacla-tests/must-condition.lisp
0 Pass: (EQ (SIGNAL "test signal") NIL)
1 Failed: simple-error
2 Pass: (EQ (SIGNAL (QUOTE SIMPLE-WARNING) :FORMAT-CONTROL "simple-warning" :FORMAT-ARGUMENTS NIL) NIL)
3 Pass: (HANDLER-CASE (SIGNAL "test simple-condition") (SIMPLE-CONDITION NIL T) (CONDITION NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
4 Pass: (HANDLER-CASE (SIGNAL (QUOTE SIMPLE-WARNING) :FORMAT-CONTROL "simple warning" :FORMAT-ARGUMENTS NIL) (SIMPLE-WARNING NIL T) (WARNING NIL NIL) (CONDITION NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
5 Pass: (HANDLER-CASE (SIGNAL (QUOTE TYPE-ERROR) :DATUM NIL :EXPECTED-TYPE (QUOTE VECTOR)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
6 Pass: (LET ((*BREAK-ON-SIGNALS* (QUOTE ARITHMETIC-ERROR))) (HANDLER-CASE (SIGNAL (QUOTE TYPE-ERROR) :DATUM NIL :EXPECTED-TYPE (QUOTE VECTOR)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL)))
7 Pass: (HANDLER-CASE (ERROR "simple-error test") (SIMPLE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
8 Pass: (HANDLER-CASE (ERROR (QUOTE TYPE-ERROR) :DATUM NIL :EXPECTED-TYPE (QUOTE VECTOR)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
9 Pass: (HANDLER-CASE (ERROR (QUOTE NO-SUCH-ERROR!!)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
10 Pass: (HANDLER-CASE (ERROR (QUOTE SIMPLE-CONDITION) :FORMAT-CONTROL "simple-condition test") (SIMPLE-CONDITION NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
11 Pass: (HANDLER-CASE (ERROR (QUOTE SIMPLE-WARNING) :FORMAT-CONTROL "simple-warning test") (SIMPLE-WARNING NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
12 Pass: (HANDLER-CASE (CERROR "Continue." "error test") (SIMPLE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
13 Pass: (HANDLER-CASE (CERROR "Continue." (QUOTE TYPE-ERROR) :DATUM NIL :EXPECTED-TYPE (QUOTE VECTOR)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
14 Pass: (HANDLER-BIND ((SIMPLE-ERROR (FUNCTION (LAMBDA (CONDITION) (DECLARE (IGNORE CONDITION)) (INVOKE-RESTART (QUOTE CONTINUE)))))) (EQ (CERROR "Continue." "error test") NIL))
15 Pass: (HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (CONDITION) (DECLARE (IGNORE CONDITION)) (INVOKE-RESTART (QUOTE CONTINUE)))))) (EQ (CERROR "Continue." (QUOTE TYPE-ERROR) :DATUM NIL :EXPECTED-TYPE (QUOTE VECTOR)) NIL))
16 Pass: (LET ((*ERROR-OUTPUT* (MAKE-STRING-OUTPUT-STREAM))) (AND (EQ (WARN "I warn you!") NIL) (GET-OUTPUT-STREAM-STRING *ERROR-OUTPUT*)))
17 Pass: (HANDLER-BIND ((WARNING (FUNCTION (LAMBDA (CONDITION) (DECLARE (IGNORE CONDITION)) (INVOKE-RESTART (QUOTE MUFFLE-WARNING)))))) (EQ (WARN "I warn you!") NIL))
18 Pass: (LET ((*ERROR-OUTPUT* (MAKE-STRING-OUTPUT-STREAM))) (HANDLER-BIND ((WARNING (FUNCTION (LAMBDA (CONDITION) (DECLARE (IGNORE CONDITION)) (INVOKE-RESTART (QUOTE MUFFLE-WARNING)))))) (AND (EQ (WARN "I warn you!") NIL) (STRING= (GET-OUTPUT-STREAM-STRING *ERROR-OUTPUT*) ""))))
19 Pass: (BLOCK TAG (HANDLER-CASE (WARN (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL "boom!" :FORMAT-ARGUMENTS NIL) (TYPE-ERROR NIL T) (SIMPLE-ERROR NIL NIL) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL)))
20 Pass: (BLOCK TAG (HANDLER-CASE (WARN (QUOTE SIMPLE-CONDITION) :FORMAT-CONTROL "boom!" :FORMAT-ARGUMENTS NIL) (TYPE-ERROR NIL T) (SIMPLE-CONDITION NIL NIL) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL)))
21 Pass: (BLOCK TAG (LET ((CONDITION (MAKE-CONDITION (QUOTE SIMPLE-CONDITION) :FORMAT-CONTROL "boom!" :FORMAT-ARGUMENTS NIL))) (HANDLER-CASE (WARN CONDITION) (TYPE-ERROR NIL T) (SIMPLE-CONDITION NIL NIL) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))))
22 Pass: (BLOCK TAG (LET ((CONDITION (MAKE-CONDITION (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL "boom!" :FORMAT-ARGUMENTS NIL))) (HANDLER-CASE (WARN CONDITION) (TYPE-ERROR NIL T) (SIMPLE-ERROR NIL NIL) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))))
23 Pass: (BLOCK TAG (LET ((CONDITION (MAKE-CONDITION (QUOTE SIMPLE-WARNING) :FORMAT-CONTROL "boom!" :FORMAT-ARGUMENTS NIL))) (HANDLER-CASE (WARN CONDITION) (TYPE-ERROR NIL NIL) (SIMPLE-WARNING NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))))
24 Pass: (BLOCK TAG (LET ((CONDITION (MAKE-CONDITION (QUOTE SIMPLE-WARNING) :FORMAT-CONTROL "boom!" :FORMAT-ARGUMENTS NIL))) (HANDLER-CASE (WARN CONDITION :FORMAT-CONTROL "boom!" :FORMAT-ARGUMENTS NIL) (TYPE-ERROR NIL T) (SIMPLE-WARNING NIL NIL) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))))
25 Pass: (NULL (HANDLER-BIND NIL))
26 Pass: (HANDLER-BIND NIL T)
27 Pass: (EQUAL (MULTIPLE-VALUE-LIST (HANDLER-BIND NIL 1 2 3 (VALUES 4 5 6))) (QUOTE (4 5 6)))
28 Pass: (EQ (QUOTE HANDLED) (BLOCK TAG (HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (RETURN-FROM TAG (QUOTE HANDLED)))))) (ERROR (QUOTE TYPE-ERROR) :DATUM NIL :EXPECTED-TYPE (QUOTE VECTOR)))))
29 Pass: (EQ (QUOTE HANDLED) (BLOCK TAG (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (RETURN-FROM TAG (QUOTE HANDLED)))))) (ERROR (QUOTE TYPE-ERROR) :DATUM NIL :EXPECTED-TYPE (QUOTE VECTOR)))))
30 Pass: (EQ (QUOTE HANDLED) (BLOCK TAG (HANDLER-BIND ((CONDITION (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (RETURN-FROM TAG (QUOTE HANDLED)))))) (ERROR (QUOTE TYPE-ERROR) :DATUM NIL :EXPECTED-TYPE (QUOTE VECTOR)))))
31 Pass: (EQ (QUOTE OUTER-HANDLER) (BLOCK TAG (HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (RETURN-FROM TAG (QUOTE OUTER-HANDLER)))))) (HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (C) (ERROR C)))) (TYPE-ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (RETURN-FROM TAG (QUOTE INNER-HANDLER)))))) (ERROR (QUOTE TYPE-ERROR) :DATUM NIL :EXPECTED-TYPE (QUOTE VECTOR))))))
32 Pass: (EQ (QUOTE OUTER-HANDLER) (BLOCK TAG (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (RETURN-FROM TAG (QUOTE OUTER-HANDLER)))))) (HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (C) (ERROR C)))) (TYPE-ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (RETURN-FROM TAG (QUOTE INNER-HANDLER)))))) (ERROR (QUOTE TYPE-ERROR) :DATUM NIL :EXPECTED-TYPE (QUOTE VECTOR))))))
33 Pass: (EQ (QUOTE LEFT-HANDLER) (BLOCK TAG (HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (RETURN-FROM TAG (QUOTE LEFT-HANDLER))))) (TYPE-ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (RETURN-FROM TAG (QUOTE RIGHT-HANDLER)))))) (ERROR (QUOTE TYPE-ERROR) :DATUM NIL :EXPECTED-TYPE (QUOTE VECTOR)))))
34 Pass: (EQ (QUOTE LEFT-HANDLER) (BLOCK TAG (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (RETURN-FROM TAG (QUOTE LEFT-HANDLER))))) (TYPE-ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (RETURN-FROM TAG (QUOTE RIGHT-HANDLER)))))) (ERROR (QUOTE TYPE-ERROR) :DATUM NIL :EXPECTED-TYPE (QUOTE VECTOR)))))
35 Pass: (EQ (QUOTE LEFT-HANDLER) (BLOCK TAG (HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (RETURN-FROM TAG (QUOTE LEFT-HANDLER))))) (ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (RETURN-FROM TAG (QUOTE RIGHT-HANDLER)))))) (ERROR (QUOTE TYPE-ERROR) :DATUM NIL :EXPECTED-TYPE (QUOTE VECTOR)))))
36 Failed: The value NIL is not of the expected type VECTOR
37 Failed: The value NIL is not of the expected type VECTOR
38 Failed: The value NIL is not of the expected type VECTOR
39 Failed: The value NIL is not of the expected type VECTOR
40 Pass: (LET ((*DYNAMIC-VAR* NIL)) (DECLARE (SPECIAL *DYNAMIC-VAR*)) (BLOCK TAG (HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (RETURN-FROM TAG *DYNAMIC-VAR*))))) (LET ((*DYNAMIC-VAR* T)) (DECLARE (SPECIAL *DYNAMIC-VAR*)) (SIGNAL (QUOTE TYPE-ERROR) :DATUM NIL :EXPECTED-TYPE (QUOTE VECTOR))))))
41 Pass: (LET ((DECLINED NIL)) (AND (EQ NIL (HANDLER-BIND ((SIMPLE-CONDITION (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (PUSH (QUOTE SPECIFIC) DECLINED))))) (HANDLER-BIND ((CONDITION (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (PUSH (QUOTE GENERAL) DECLINED))))) (SIGNAL "error")))) (EQUAL DECLINED (QUOTE (SPECIFIC GENERAL)))))
42 Pass: (BLOCK TAG (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (RETURN-FROM TAG (TYPEP C (QUOTE ERROR))))))) (ERROR "error")))
43 Pass: (EQ (QUOTE OK) (BLOCK TAG (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (RETURN-FROM TAG (QUOTE OK)))))) (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (ERROR "error3"))))) (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (ERROR "error2"))))) (ERROR "error"))))))
44 Pass: (EQ (QUOTE OK) (BLOCK TAG (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (RETURN-FROM TAG (QUOTE OK)))))) (ERROR "error2")))))) (ERROR "error1")))))) (ERROR "error0"))))
45 Pass: (HANDLER-CASE T)
46 Pass: (HANDLER-CASE NIL (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) T))
47 Pass: (EQUAL (MULTIPLE-VALUE-LIST (HANDLER-CASE (VALUES 0 1 2 3 4))) (QUOTE (0 1 2 3 4)))
48 Pass: (EQUAL (HANDLER-CASE (VALUES 0 1 2 3 4) (:NO-ERROR (&REST REST) REST)) (QUOTE (0 1 2 3 4)))
49 Pass: (EQUAL (MULTIPLE-VALUE-LIST (HANDLER-CASE (VALUES 0 1 2 3 4) (:NO-ERROR (&REST REST) (VALUES REST 5 6 7 8)))) (QUOTE ((0 1 2 3 4) 5 6 7 8)))
50 Pass: (EQ T (HANDLER-CASE T (TYPE-ERROR NIL (QUOTE TYPE-ERROR)) (ERROR NIL (QUOTE ERROR))))
51 Pass: (EQ (QUOTE SIMPLE-ERROR) (HANDLER-CASE (ERROR "error!") (SIMPLE-ERROR NIL (QUOTE SIMPLE-ERROR)) (ERROR NIL (QUOTE ERROR))))
52 Pass: (EQ (QUOTE ERROR) (HANDLER-CASE (ERROR "error!") (ERROR NIL (QUOTE ERROR)) (SIMPLE-ERROR NIL (QUOTE SIMPLE-ERROR))))
53 Pass: (EQ (QUOTE ERROR) (HANDLER-CASE (ERROR "error!") (ERROR NIL (QUOTE ERROR)) (CONDITION NIL (QUOTE CONDITION)) (SIMPLE-ERROR NIL (QUOTE SIMPLE-ERROR))))
54 Pass: (EQ (QUOTE CONDITION) (HANDLER-CASE (ERROR "error!") (CONDITION NIL (QUOTE CONDITION)) (ERROR NIL (QUOTE ERROR)) (SIMPLE-ERROR NIL (QUOTE SIMPLE-ERROR))))
55 Pass: (EQ (QUOTE SIMPLE-ERROR) (HANDLER-CASE (SIGNAL (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL "error!" :FORMAT-ARGUMENTS NIL) (SIMPLE-ERROR NIL (QUOTE SIMPLE-ERROR)) (ERROR NIL (QUOTE ERROR))))
56 Pass: (EQ (QUOTE SIMPLE-ERROR-LEFT) (HANDLER-CASE (SIGNAL (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL "error!" :FORMAT-ARGUMENTS NIL) (SIMPLE-ERROR NIL (QUOTE SIMPLE-ERROR-LEFT)) (SIMPLE-ERROR NIL (QUOTE SIMPLE-ERROR-RIGHT))))
57 Pass: (EQ (QUOTE NO-ONE-HANDLED) (HANDLER-CASE (PROGN (SIGNAL (QUOTE SIMPLE-WARNING) :FORMAT-CONTROL "warning!" :FORMAT-ARGUMENTS NIL) (QUOTE NO-ONE-HANDLED)) (SIMPLE-ERROR NIL (QUOTE SIMPLE-ERROR)) (ERROR NIL (QUOTE ERROR))))
58 Pass: (EQUAL (HANDLER-CASE (PROGN (SIGNAL (QUOTE SIMPLE-WARNING) :FORMAT-CONTROL "warning!" :FORMAT-ARGUMENTS NIL) (QUOTE NO-ONE-HANDLED)) (:NO-ERROR (&REST REST) (CONS (QUOTE NO-ERROR) REST)) (SIMPLE-ERROR NIL (QUOTE SIMPLE-ERROR)) (ERROR NIL (QUOTE ERROR))) (QUOTE (NO-ERROR NO-ONE-HANDLED)))
59 Pass: (LET ((WHERE (QUOTE OUT))) (EQ (HANDLER-CASE (LET ((WHERE (QUOTE IN))) (DECLARE (IGNORABLE WHERE)) (ERROR "error!")) (ERROR NIL WHERE)) (QUOTE OUT)))
60 Pass: (LET ((WHERE (QUOTE OUT))) (DECLARE (SPECIAL WHERE)) (EQ (HANDLER-CASE (LET ((WHERE (QUOTE IN))) (DECLARE (SPECIAL WHERE)) (ERROR "~S" WHERE)) (ERROR NIL WHERE)) (QUOTE OUT)))
61 Pass: (TYPEP (HANDLER-CASE (ERROR "error!") (ERROR (C) C)) (QUOTE SIMPLE-ERROR))
62 Pass: (TYPEP (HANDLER-CASE (ERROR "error!") (CONDITION (C) C)) (QUOTE SIMPLE-ERROR))
63 Pass: (TYPEP (HANDLER-CASE (SIGNAL "condition") (CONDITION (C) C)) (QUOTE SIMPLE-CONDITION))
64 Pass: (TYPEP (HANDLER-CASE (WARN "warning") (CONDITION (C) C)) (QUOTE SIMPLE-WARNING))
65 Pass: (NULL (RESTART-BIND NIL))
66 Pass: (RESTART-BIND NIL T)
67 Pass: (= (RESTART-BIND NIL 0 1 2) 2)
68 Pass: (EQUAL (MULTIPLE-VALUE-LIST (RESTART-BIND NIL 0 1 2 (VALUES 3 4 5))) (QUOTE (3 4 5)))
69 Pass: (BLOCK TAG (RESTART-BIND ((CONTINUE (FUNCTION (LAMBDA (&REST REST) (DECLARE (IGNORE REST)) (RETURN-FROM TAG T))))) (HANDLER-CASE (SIGNAL "testing simple-signal") (SIMPLE-CONDITION NIL (INVOKE-RESTART (QUOTE CONTINUE))))))
70 Pass: (BLOCK TAG (HANDLER-BIND ((SIMPLE-CONDITION (FUNCTION (LAMBDA (CONDITION) (DECLARE (IGNORE CONDITION)) (INVOKE-RESTART (QUOTE CONTINUE)))))) (RESTART-BIND ((CONTINUE (FUNCTION (LAMBDA (&REST REST) (DECLARE (IGNORE REST)) (RETURN-FROM TAG T))))) (SIGNAL "testing simple-condition"))))
71 Pass: (BLOCK TAG (RESTART-BIND ((CONTINUE (FUNCTION (LAMBDA (&REST REST) (DECLARE (IGNORE REST)) (RETURN-FROM TAG NIL))))) (HANDLER-BIND ((SIMPLE-CONDITION (FUNCTION (LAMBDA (CONDITION) (DECLARE (IGNORE CONDITION)) (INVOKE-RESTART (QUOTE CONTINUE)))))) (RESTART-BIND ((CONTINUE (FUNCTION (LAMBDA (&REST REST) (DECLARE (IGNORE REST)) (RETURN-FROM TAG T))))) (SIGNAL "testing simple-condition")))))
72 Pass: (BLOCK TAG (RESTART-BIND ((CONTINUE (FUNCTION (LAMBDA (&REST REST) (DECLARE (IGNORE REST)) (RETURN-FROM TAG T)))) (CONTINUE (FUNCTION (LAMBDA (&REST REST) (DECLARE (IGNORE REST)) (RETURN-FROM TAG NIL))))) (HANDLER-CASE (SIGNAL "testing simple-signal") (SIMPLE-CONDITION NIL (INVOKE-RESTART (QUOTE CONTINUE))))))
73 Pass: (BLOCK TAG (RESTART-BIND ((CONTINUE (FUNCTION (LAMBDA (&REST REST) (DECLARE (IGNORE REST)) (RETURN-FROM TAG T))) :REPORT-FUNCTION (FUNCTION (LAMBDA (STREAM) (FORMAT STREAM "Continue"))))) (HANDLER-CASE (SIGNAL "testing simple-signal") (SIMPLE-CONDITION NIL (INVOKE-RESTART (QUOTE CONTINUE))))))
74 Pass: (BLOCK TAG (RESTART-BIND ((CONTINUE (FUNCTION (LAMBDA (X) (RETURN-FROM TAG X))) :REPORT-FUNCTION (FUNCTION (LAMBDA (STREAM) (FORMAT STREAM "Continue"))) :INTERACTIVE-FUNCTION (FUNCTION (LAMBDA NIL (LIST T))))) (HANDLER-CASE (SIGNAL "testing simple-signal") (SIMPLE-CONDITION NIL (INVOKE-RESTART-INTERACTIVELY (QUOTE CONTINUE))))))
75 Pass: (EQ (QUOTE OK) (BLOCK TAG (RESTART-BIND ((CONTINUE (FUNCTION (LAMBDA (X) (RETURN-FROM TAG X))))) (HANDLER-CASE (SIGNAL "testing simple-signal") (SIMPLE-CONDITION NIL (INVOKE-RESTART (QUOTE CONTINUE) (QUOTE OK)))))))
76 Pass: (BLOCK TAG (RESTART-BIND ((CONTINUE (FUNCTION (LAMBDA (X) (RETURN-FROM TAG X))) :REPORT-FUNCTION (FUNCTION (LAMBDA (STREAM) (FORMAT STREAM "Continue"))) :INTERACTIVE-FUNCTION (FUNCTION (LAMBDA NIL (LIST T))) :TEST-FUNCTION (CONSTANTLY T))) (HANDLER-CASE (SIGNAL "testing simple-signal") (SIMPLE-CONDITION NIL (INVOKE-RESTART-INTERACTIVELY (QUOTE CONTINUE))))))
77 Pass: (BLOCK TAG (RESTART-BIND ((CONTINUE (FUNCTION (LAMBDA (X) (RETURN-FROM TAG X))) :REPORT-FUNCTION (FUNCTION (LAMBDA (STREAM) (FORMAT STREAM "Continue"))) :INTERACTIVE-FUNCTION (FUNCTION (LAMBDA NIL (LIST T))) :TEST-FUNCTION (FUNCTION (LAMBDA (C) (OR (NULL C) (TYPEP C (QUOTE SIMPLE-CONDITION))))))) (HANDLER-CASE (SIGNAL "testing simple-signal") (SIMPLE-CONDITION NIL (INVOKE-RESTART-INTERACTIVELY (QUOTE CONTINUE))))))
78 Pass: (BLOCK TAG (RESTART-BIND ((TB-CONTINUE (FUNCTION (LAMBDA (X) (RETURN-FROM TAG X))) :INTERACTIVE-FUNCTION (FUNCTION (LAMBDA NIL (LIST T))) :TEST-FUNCTION (CONSTANTLY NIL) :REPORT-FUNCTION (FUNCTION (LAMBDA (STREAM) (FORMAT STREAM "Continue"))))) (NOT (FIND-RESTART (QUOTE TB-CONTINUE)))))
79 Pass: (BLOCK TAG (RESTART-BIND ((TB-CONTINUE (FUNCTION (LAMBDA (X) (RETURN-FROM TAG X))) :INTERACTIVE-FUNCTION (FUNCTION (LAMBDA NIL (LIST T))) :TEST-FUNCTION (CONSTANTLY T) :REPORT-FUNCTION (FUNCTION (LAMBDA (STREAM) (FORMAT STREAM "cont."))))) (HANDLER-CASE (SIGNAL "testing simple-signal") (SIMPLE-CONDITION NIL (INVOKE-RESTART-INTERACTIVELY (QUOTE TB-CONTINUE))))))
80 Pass: (NULL (LET ((*DYNAMIC-VAR* NIL)) (DECLARE (SPECIAL *DYNAMIC-VAR*)) (BLOCK TAG (RESTART-BIND ((CONTINUE (FUNCTION (LAMBDA (X) (DECLARE (IGNORE X)) (RETURN-FROM TAG *DYNAMIC-VAR*))) :INTERACTIVE-FUNCTION (FUNCTION (LAMBDA NIL (LIST T))) :TEST-FUNCTION (CONSTANTLY T) :REPORT-FUNCTION (FUNCTION (LAMBDA (STREAM) (FORMAT STREAM "cont."))))) (HANDLER-CASE (LET ((*DYNAMIC-VAR* T)) (DECLARE (SPECIAL *DYNAMIC-VAR*)) (SIGNAL "testing simple-signal")) (SIMPLE-CONDITION NIL (INVOKE-RESTART-INTERACTIVELY (QUOTE CONTINUE))))))))
81 Pass: (LET ((*DYNAMIC-VAR* NIL)) (DECLARE (SPECIAL *DYNAMIC-VAR*)) (BLOCK TAG (RESTART-BIND ((CONTINUE (FUNCTION (LAMBDA (X) (DECLARE (IGNORE X)) (RETURN-FROM TAG *DYNAMIC-VAR*))) :INTERACTIVE-FUNCTION (FUNCTION (LAMBDA NIL (LIST T))) :TEST-FUNCTION (CONSTANTLY T) :REPORT-FUNCTION (FUNCTION (LAMBDA (STREAM) (FORMAT STREAM "cont."))))) (HANDLER-BIND ((SIMPLE-CONDITION (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (INVOKE-RESTART-INTERACTIVELY (QUOTE CONTINUE)))))) (LET ((*DYNAMIC-VAR* T)) (DECLARE (SPECIAL *DYNAMIC-VAR*)) (SIGNAL "testing simple-signal"))))))
82 Pass: (BLOCK TAG (RESTART-BIND ((NIL (FUNCTION (LAMBDA (&REST REST) (DECLARE (IGNORE REST)) (RETURN-FROM TAG T))))) (HANDLER-CASE (SIGNAL "testing simple-signal") (SIMPLE-CONDITION NIL (INVOKE-RESTART (QUOTE NIL))))))
83 Pass: (RESTART-CASE T)
84 Pass: (RESTART-CASE T (CONTINUE (&REST REST) (DECLARE (IGNORE REST)) NIL))
85 Pass: (EQUAL (MULTIPLE-VALUE-LIST (RESTART-CASE (VALUES 0 1 2 3 4))) (QUOTE (0 1 2 3 4)))
86 Pass: (EQ (QUOTE CONTINUED) (RESTART-CASE (CONTINUE) (CONTINUE (&REST REST) (DECLARE (IGNORE REST)) (QUOTE CONTINUED))))
87 Pass: (EQ NIL (RESTART-CASE (CONTINUE) (CONTINUE (&REST REST) (DECLARE (IGNORE REST)))))
88 Pass: (EQ (QUOTE CONTINUE-LEFT) (RESTART-CASE (CONTINUE) (CONTINUE (&REST REST) (DECLARE (IGNORE REST)) (QUOTE CONTINUE-LEFT)) (CONTINUE (&REST REST) (DECLARE (IGNORE REST)) (QUOTE CONTINUE-RIGHT))))
89 Pass: (NULL (RESTART-CASE (INVOKE-RESTART (QUOTE CONTINUE)) (CONTINUE (&REST REST) :INTERACTIVE (LAMBDA NIL (LIST 0 1 2 3)) REST)))
90 Pass: (EQUAL (RESTART-CASE (INVOKE-RESTART-INTERACTIVELY (QUOTE CONTINUE)) (CONTINUE (&REST REST) :INTERACTIVE (LAMBDA NIL (LIST 0 1 2 3)) REST)) (QUOTE (0 1 2 3)))
91 Pass: (EQUAL (RESTART-CASE (INVOKE-RESTART-INTERACTIVELY (QUOTE CONTINUE)) (CONTINUE (&REST REST) :INTERACTIVE (LAMBDA NIL (LIST 0 1 2 3)) :REPORT "continue" REST)) (QUOTE (0 1 2 3)))
92 Pass: (EQUAL (RESTART-CASE (INVOKE-RESTART-INTERACTIVELY (QUOTE CONTINUE)) (CONTINUE (&REST REST) :INTERACTIVE (LAMBDA NIL (LIST 0 1 2 3)) :REPORT "continue" :TEST (LAMBDA (C) (DECLARE (IGNORE C)) T) REST)) (QUOTE (0 1 2 3)))
93 Pass: (= (RESTART-CASE (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (INVOKE-RESTART (QUOTE MY-RESTART) 7))))) (ERROR "Foo.")) (MY-RESTART (&OPTIONAL V) V)) 7)
94 Pass: (EQ (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (INVOKE-RESTART (QUOTE MY-RESTART) (QUOTE RESTARTED)))))) (RESTART-CASE (ERROR "Boo.") (MY-RESTART (&OPTIONAL V) V))) (QUOTE RESTARTED))
95 Pass: (EQ (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (INVOKE-RESTART (FIND-RESTART (QUOTE MY-RESTART) C) (QUOTE RESTARTED)))))) (RESTART-CASE (ERROR "Boo.") (MY-RESTART (&OPTIONAL V) V))) (QUOTE RESTARTED))
96 Pass: (> (LENGTH (BLOCK TAG (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (RETURN-FROM TAG (COMPUTE-RESTARTS C)))))) (RESTART-CASE (ERROR "Boo.") (MY-RESTART (&OPTIONAL V) V) (MY-RESTART (&OPTIONAL V) V))))) 1)
97 Pass: (EQ (QUOTE OK) (RESTART-CASE (INVOKE-RESTART (QUOTE NIL)) (NIL (&REST REST) (DECLARE (IGNORE REST)) (QUOTE OK))))
98 Pass: (LISTP (MAPCAR (FUNCTION RESTART-NAME) (COMPUTE-RESTARTS)))
99 Pass: (LISTP (MAPCAR (FUNCTION RESTART-NAME) (COMPUTE-RESTARTS (MAKE-CONDITION (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL "error" :FORMAT-ARGUMENTS NIL))))
100 Pass: (RESTART-CASE (LET ((LIST (COMPUTE-RESTARTS))) (AND (MEMBER (QUOTE MY-RESTART) LIST :TEST (FUNCTION STRING=) :KEY (FUNCTION RESTART-NAME)) (MEMBER (QUOTE YOUR-RESTART) LIST :TEST (FUNCTION STRING=) :KEY (FUNCTION RESTART-NAME)))) (MY-RESTART NIL) (YOUR-RESTART NIL))
101 Pass: (RESTART-CASE (LET ((LIST (COMPUTE-RESTARTS))) (MEMBER (QUOTE MY-RESTART) (CDR (MEMBER (QUOTE MY-RESTART) LIST :TEST (FUNCTION STRING=) :KEY (FUNCTION RESTART-NAME))) :TEST (FUNCTION STRING=) :KEY (FUNCTION RESTART-NAME))) (MY-RESTART NIL) (MY-RESTART NIL))
102 Pass: (OR (FIND-RESTART (QUOTE CONTINUE)) T)
103 Pass: (RESTART-CASE (FIND-RESTART (QUOTE MY-RESTART)) (MY-RESTART NIL))
104 Pass: (RESTART-CASE (FIND-RESTART (FIND-RESTART (QUOTE MY-RESTART))) (MY-RESTART NIL))
105 Pass: (LET ((CONDITION (MAKE-CONDITION (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL "error" :FORMAT-ARGUMENTS NIL))) (BLOCK TAG (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (RETURN-FROM TAG (AND (EQ C CONDITION) (FIND-RESTART (QUOTE MY-RESTART) C))))))) (RESTART-CASE (ERROR CONDITION) (MY-RESTART NIL)))))
106 Pass: (STRING= "MY-RESTART" (BLOCK TAG (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (RETURN-FROM TAG (RESTART-NAME (FIND-RESTART (QUOTE MY-RESTART) C))))))) (RESTART-CASE (ERROR "error!") (MY-RESTART NIL)))))
107 Pass: (NULL (BLOCK TAG (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (RETURN-FROM TAG (RESTART-NAME (FIND-RESTART (QUOTE NIL) C))))))) (RESTART-CASE (ERROR "error!") (NIL NIL)))))
108 Pass: (NULL (WITH-CONDITION-RESTARTS (MAKE-CONDITION (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL "error" :FORMAT-ARGUMENTS NIL) NIL))
109 Pass: (WITH-CONDITION-RESTARTS (MAKE-CONDITION (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL "error" :FORMAT-ARGUMENTS NIL) NIL T)
110 Pass: (EQUAL (MULTIPLE-VALUE-LIST (WITH-CONDITION-RESTARTS (MAKE-CONDITION (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL "error" :FORMAT-ARGUMENTS NIL) NIL 0 1 2 (VALUES 3 4 5))) (QUOTE (3 4 5)))
111 Pass: (LET ((CONDITION (MAKE-CONDITION (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL "error" :FORMAT-ARGUMENTS NIL)) (OTHER (MAKE-CONDITION (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL "error" :FORMAT-ARGUMENTS NIL))) (BLOCK TAG (HANDLER-BIND ((ERROR (FUNCTION (LAMBDA (C) (RETURN-FROM TAG (AND (FIND-RESTART (QUOTE MY-RESTART) C) (NULL (WITH-CONDITION-RESTARTS OTHER (COMPUTE-RESTARTS) (FIND-RESTART (QUOTE MY-RESTART) C))))))))) (RESTART-CASE (PROGN 3 2 1 (QUOTE GO) (ERROR CONDITION)) (MY-RESTART NIL)))))
112 Pass: (NULL (WITH-SIMPLE-RESTART (CONTINUE "continue")))
113 Pass: (WITH-SIMPLE-RESTART (CONTINUE "continue") T)
114 Pass: (EQUAL (MULTIPLE-VALUE-LIST (WITH-SIMPLE-RESTART (CONTINUE "continue") 0 1 (VALUES 2 3 4))) (QUOTE (2 3 4)))
115 Pass: (EQUAL (MULTIPLE-VALUE-LIST (WITH-SIMPLE-RESTART (CONTINUE "continue") (CONTINUE))) (QUOTE (NIL T)))
116 Pass: (EQUAL (MULTIPLE-VALUE-LIST (WITH-SIMPLE-RESTART (CONTINUE "continue") (HANDLER-CASE (ERROR "boo") (ERROR (C) (DECLARE (IGNORE C)) (INVOKE-RESTART (QUOTE CONTINUE)))))) (QUOTE (NIL T)))
117 Pass: (EQ (QUOTE OK) (RESTART-CASE (ABORT) (ABORT NIL (QUOTE OK))))
118 Pass: (LET ((CONDITION (MAKE-CONDITION (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL "error" :FORMAT-ARGUMENTS NIL))) (OR (FIND-RESTART (QUOTE ABORT) CONDITION) (EQ (QUOTE HANDLED) (HANDLER-CASE (ABORT CONDITION) (CONTROL-ERROR NIL (QUOTE HANDLED)) (CONDITION NIL NIL)))))
119 Pass: (EQ (QUOTE OK) (RESTART-CASE (MUFFLE-WARNING) (MUFFLE-WARNING NIL (QUOTE OK))))
120 Pass: (LET ((CONDITION (MAKE-CONDITION (QUOTE SIMPLE-WARNING) :FORMAT-CONTROL "warning" :FORMAT-ARGUMENTS NIL))) (OR (FIND-RESTART (QUOTE MUFFLE-WARNING) CONDITION) (EQ (QUOTE HANDLED) (HANDLER-CASE (MUFFLE-WARNING CONDITION) (CONTROL-ERROR NIL (QUOTE HANDLED)) (CONDITION NIL NIL)))))
121 Pass: (EQ (QUOTE OK) (RESTART-CASE (CONTINUE) (CONTINUE NIL (QUOTE OK))))
122 Pass: (LET ((CONDITION (MAKE-CONDITION (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL "error" :FORMAT-ARGUMENTS NIL))) (OR (FIND-RESTART (QUOTE CONTINUE) CONDITION) (NULL (CONTINUE CONDITION))))
123 Pass: (EQ (QUOTE OK) (RESTART-CASE (STORE-VALUE (QUOTE OK)) (STORE-VALUE (VALUE) VALUE)))
124 Pass: (LET ((CONDITION (MAKE-CONDITION (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL "error" :FORMAT-ARGUMENTS NIL))) (OR (FIND-RESTART (QUOTE STORE-VALUE) CONDITION) (NULL (STORE-VALUE T CONDITION))))
125 Pass: (EQ (QUOTE OK) (RESTART-CASE (USE-VALUE (QUOTE OK)) (USE-VALUE (VALUE) VALUE)))
126 Pass: (LET ((CONDITION (MAKE-CONDITION (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL "error" :FORMAT-ARGUMENTS NIL))) (OR (FIND-RESTART (QUOTE USE-VALUE) CONDITION) (NULL (USE-VALUE T CONDITION))))
127 Pass: (EQ (ASSERT T) NIL)
128 Pass: (HANDLER-CASE (ASSERT NIL) (ERROR NIL T) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
129 Pass: (LET ((COUNT 0)) (AND (EQ (ASSERT (INCF COUNT)) NIL) (= COUNT 1)))
130 Pass: (HANDLER-CASE (LET ((VAR NIL)) (ASSERT VAR (VAR) "VAR should be true.")) (SIMPLE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
131 Pass: (LET ((STR (COPY-SEQ "ABC")) (COUNT 0)) (AND (EQ (ASSERT (CHAR= (AREF STR 0) #\A) ((AREF (PROGN (INCF COUNT) STR) 0))) NIL) (ZEROP COUNT)))
132 Pass: (LET ((STR (COPY-SEQ "ABC")) (COUNT 0)) (AND (EQ (ASSERT (AND (CHAR= (AREF STR 0) #\A) (CHAR= (AREF STR 1) #\B)) ((AREF (PROGN (INCF COUNT) STR) 0) (AREF (PROGN (INCF COUNT) STR) 1))) NIL) (ZEROP COUNT)))
133 Pass: (HANDLER-CASE (LET ((VAR NIL)) (ASSERT VAR (VAR) (QUOTE TYPE-ERROR) :EXPECTED-TYPE (QUOTE ARRAY))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
134 Pass: (NULL (LET ((VAR NIL)) (CHECK-TYPE VAR NULL)))
135 Pass: (NULL (LET ((VAR (QUOTE (A B C)))) (CHECK-TYPE VAR CONS)))
136 Pass: (HANDLER-CASE (LET ((VAR (QUOTE (A B C)))) (CHECK-TYPE VAR VECTOR)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
137 Pass: (EQ (QUOTE HANDLED) (BLOCK TAG (HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (RETURN-FROM TAG (QUOTE HANDLED))))) (ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (RETURN-FROM TAG NIL))))) (LET ((VAR (QUOTE (A B C)))) (CHECK-TYPE VAR VECTOR) VAR))))
138 Pass: (STRING= (BLOCK TAG (HANDLER-BIND ((TYPE-ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (INVOKE-RESTART (QUOTE STORE-VALUE) "eat this")))) (ERROR (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (RETURN-FROM TAG NIL))))) (LET ((VAR (QUOTE (A B C)))) (CHECK-TYPE VAR VECTOR) VAR))) "eat this")
139 Pass: (NULL (IGNORE-ERRORS))
140 Pass: (IGNORE-ERRORS T)
141 Pass: (LET ((RESULT (MULTIPLE-VALUE-LIST (IGNORE-ERRORS (ERROR "error"))))) (AND (NULL (FIRST RESULT)) (TYPEP (SECOND RESULT) (QUOTE SIMPLE-ERROR))))
142 Pass: (EQUAL (MULTIPLE-VALUE-LIST (IGNORE-ERRORS (QUOTE A) (QUOTE B) (QUOTE C) (VALUES (QUOTE D) (QUOTE E)))) (QUOTE (D E)))
143 Pass: (LET ((RESULT (MULTIPLE-VALUE-LIST (IGNORE-ERRORS (SIGNAL (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL "error" :FORMAT-ARGUMENTS NIL))))) (AND (NULL (FIRST RESULT)) (TYPEP (SECOND RESULT) (QUOTE SIMPLE-ERROR))))
144 Pass: (EQ (IGNORE-ERRORS (SIGNAL "only signal") (QUOTE OK)) (QUOTE OK))
145 Pass: (EQ (BLOCK TAG (HANDLER-BIND ((CONDITION (FUNCTION (LAMBDA (C) (DECLARE (IGNORE C)) (RETURN-FROM TAG (QUOTE HANDLED)))))) (IGNORE-ERRORS (ERROR (QUOTE SIMPLE-CONDITION) :FORMAT-CONTROL "only condition" :FORMAT-ARGUMENTS NIL)))) (QUOTE HANDLED))
146 Pass: (LET ((RESULT (MULTIPLE-VALUE-LIST (IGNORE-ERRORS (WARN (QUOTE SIMPLE-ERROR) :FORMAT-CONTROL "an error, not a warning" :FORMAT-ARGUMENTS NIL))))) (AND (NULL (FIRST RESULT)) (TYPEP (SECOND RESULT) (QUOTE TYPE-ERROR))))
Pass: 142, Failed: 5

test: sacla-tests/must-cons.lisp
0 Pass: (CONSP (CONS (QUOTE A) (QUOTE B)))
1 Pass: (CONSP (QUOTE (1 . 2)))
2 Pass: (CONSP (LIST NIL))
3 Pass: (NOT (CONSP (QUOTE A)))
4 Pass: (NOT (CONSP NIL))
5 Pass: (NOT (CONSP 1))
6 Pass: (NOT (CONSP #\a))
7 Pass: (LET ((A (CONS 1 2))) (AND (EQL (CAR A) 1) (EQL (CDR A) 2)))
8 Pass: (EQUAL (CONS 1 NIL) (QUOTE (1)))
9 Pass: (EQUAL (CONS NIL NIL) (QUOTE (NIL)))
10 Pass: (EQUAL (CONS (QUOTE A) (CONS (QUOTE B) (CONS (QUOTE C) (QUOTE NIL)))) (QUOTE (A B C)))
11 Pass: (ATOM (QUOTE A))
12 Pass: (ATOM NIL)
13 Pass: (ATOM 1)
14 Pass: (ATOM #\a)
15 Pass: (NOT (ATOM (CONS 1 2)))
16 Pass: (NOT (ATOM (QUOTE (A . B))))
17 Pass: (NOT (ATOM (LIST NIL)))
18 Pass: (LISTP NIL)
19 Pass: (LISTP (QUOTE (A B C)))
20 Pass: (LISTP (QUOTE (A . B)))
21 Pass: (LISTP (CONS (QUOTE A) (QUOTE B)))
22 Pass: (LISTP (QUOTE #1=(1 2 . #1#)))
23 Pass: (NOT (LISTP 1))
24 Pass: (NOT (LISTP (QUOTE T)))
25 Pass: (NULL (QUOTE NIL))
26 Pass: (NULL (QUOTE NIL))
27 Pass: (NULL NIL)
28 Pass: (NOT (NULL T))
29 Pass: (NULL (CDR (QUOTE (A))))
30 Pass: (NOT (NULL (CDR (QUOTE (1 . 2)))))
31 Pass: (NOT (NULL (QUOTE A)))
32 Pass: (ENDP (QUOTE NIL))
33 Pass: (NOT (ENDP (QUOTE (1))))
34 Pass: (NOT (ENDP (QUOTE (1 2))))
35 Pass: (NOT (ENDP (QUOTE (1 2 3))))
36 Pass: (NOT (ENDP (CONS 1 2)))
37 Pass: (ENDP (CDDR (QUOTE (1 2))))
38 Pass: (LET ((A (CONS 1 2))) (AND (EQ (RPLACA A 0) A) (EQUAL A (QUOTE (0 . 2)))))
39 Pass: (LET ((A (LIST 1 2 3))) (AND (EQ (RPLACA A 0) A) (EQUAL A (QUOTE (0 2 3)))))
40 Pass: (LET ((A (CONS 1 2))) (AND (EQ (RPLACD A 0) A) (EQUAL A (QUOTE (1 . 0)))))
41 Pass: (LET ((A (LIST 1 2 3))) (AND (EQ (RPLACD A 0) A) (EQUAL A (QUOTE (1 . 0)))))
42 Pass: (EQ (CAR (QUOTE (A . B))) (QUOTE A))
43 Pass: (NULL (CAR NIL))
44 Pass: (LET ((A (CONS 1 2))) (EQ (CAR (LIST A)) A))
45 Pass: (EQ (CAR (QUOTE #1=(A . #1#))) (QUOTE A))
46 Pass: (EQ (CDR (QUOTE (A . B))) (QUOTE B))
47 Pass: (EQ (REST (QUOTE (A . B))) (QUOTE B))
48 Pass: (NULL (CDR NIL))
49 Pass: (NULL (REST NIL))
50 Pass: (LET ((A (CONS 1 2))) (EQ (CDR (CONS 1 A)) A))
51 Pass: (LET ((A (CONS 1 2))) (EQ (REST (CONS 1 A)) A))
52 Pass: (LET ((X (QUOTE #1=(A . #1#)))) (EQ (CDR X) X))
53 Pass: (LET ((X (QUOTE #1=(A . #1#)))) (EQ (REST X) X))
54 Pass: (EQ (CAAR (QUOTE ((A) B C))) (QUOTE A))
55 Pass: (EQ (CADR (QUOTE (A B C))) (QUOTE B))
56 Pass: (EQ (CDAR (QUOTE ((A . AA) B C))) (QUOTE AA))
57 Pass: (EQ (CDDR (QUOTE (A B . C))) (QUOTE C))
58 Pass: (EQ (CAAAR (QUOTE (((A)) B C))) (QUOTE A))
59 Pass: (EQ (CAADR (QUOTE (A (B) C))) (QUOTE B))
60 Pass: (EQ (CADAR (QUOTE ((A AA) B C))) (QUOTE AA))
61 Pass: (EQ (CADDR (QUOTE (A B C))) (QUOTE C))
62 Pass: (EQ (CDAAR (QUOTE (((A . AA)) B C))) (QUOTE AA))
63 Pass: (EQ (CDADR (QUOTE (A (B . BB) C))) (QUOTE BB))
64 Pass: (EQ (CDDAR (QUOTE ((A AA . AAA) B C))) (QUOTE AAA))
65 Pass: (EQ (CDDDR (QUOTE (A B C . D))) (QUOTE D))
66 Pass: (EQ (CAAAAR (QUOTE ((((A))) B C))) (QUOTE A))
67 Pass: (EQ (CAAADR (QUOTE (A ((B)) C))) (QUOTE B))
68 Pass: (EQ (CAADAR (QUOTE ((A (AA)) B C))) (QUOTE AA))
69 Pass: (EQ (CAADDR (QUOTE (A B (C)))) (QUOTE C))
70 Pass: (EQ (CADAAR (QUOTE (((A AA)) B C))) (QUOTE AA))
71 Pass: (EQ (CADADR (QUOTE (A (B BB) C))) (QUOTE BB))
72 Pass: (EQ (CADDAR (QUOTE ((A AA AAA) B C))) (QUOTE AAA))
73 Pass: (EQ (CADDDR (QUOTE (A B C D))) (QUOTE D))
74 Pass: (EQ (CDAAAR (QUOTE ((((A . AA))) B C))) (QUOTE AA))
75 Pass: (EQ (CDAADR (QUOTE (A ((B . BB)) C))) (QUOTE BB))
76 Pass: (EQ (CDADAR (QUOTE ((A (AA . AAA)) B C))) (QUOTE AAA))
77 Pass: (EQ (CDADDR (QUOTE (A B (C . CC)))) (QUOTE CC))
78 Pass: (EQ (CDDAAR (QUOTE (((A AA . AAA)) B C))) (QUOTE AAA))
79 Pass: (EQ (CDDADR (QUOTE (A (B BB . BBB) C))) (QUOTE BBB))
80 Pass: (EQ (CDDDAR (QUOTE ((A AA AAA . AAAA) B C))) (QUOTE AAAA))
81 Pass: (EQ (CDDDDR (QUOTE (A B C D . E))) (QUOTE E))
82 Pass: (LET ((X (CONS 1 2))) (AND (EQL (SETF (CAR X) 0) 0) (EQUAL X (QUOTE (0 . 2)))))
83 Pass: (LET ((X (CONS 1 2))) (AND (EQL (SETF (CDR X) 0) 0) (EQUAL X (QUOTE (1 . 0)))))
84 Pass: (LET ((X (COPY-TREE (QUOTE ((A) B C))))) (AND (EQL (SETF (CAAR X) 0) 0) (EQUAL X (QUOTE ((0) B C)))))
85 Pass: (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (AND (EQL (SETF (CADR X) 0) 0) (EQUAL X (QUOTE (A 0 C)))))
86 Pass: (LET ((X (COPY-TREE (QUOTE ((A . AA) B C))))) (AND (EQL (SETF (CDAR X) 0) 0) (EQUAL X (QUOTE ((A . 0) B C)))))
87 Pass: (LET ((X (COPY-TREE (QUOTE (A B . C))))) (AND (EQL (SETF (CDDR X) 0) 0) (EQUAL X (QUOTE (A B . 0)))))
88 Pass: (LET ((X (COPY-TREE (QUOTE (((A)) B C))))) (AND (EQL (SETF (CAAAR X) 0) 0) (EQUAL X (QUOTE (((0)) B C)))))
89 Pass: (LET ((X (COPY-TREE (QUOTE (A (B) C))))) (AND (EQL (SETF (CAADR X) 0) 0) (EQUAL X (QUOTE (A (0) C)))))
90 Pass: (LET ((X (COPY-TREE (QUOTE ((A AA) B C))))) (AND (EQL (SETF (CADAR X) 0) 0) (EQUAL X (QUOTE ((A 0) B C)))))
91 Pass: (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (AND (EQL (SETF (CADDR X) 0) 0) (EQUAL X (QUOTE (A B 0)))))
92 Pass: (LET ((X (COPY-TREE (QUOTE (((A . AA)) B C))))) (AND (EQL (SETF (CDAAR X) 0) 0) (EQUAL X (QUOTE (((A . 0)) B C)))))
93 Pass: (LET ((X (COPY-TREE (QUOTE (A (B . BB) C))))) (AND (EQL (SETF (CDADR X) 0) 0) (EQUAL X (QUOTE (A (B . 0) C)))))
94 Pass: (LET ((X (COPY-TREE (QUOTE ((A AA . AAA) B C))))) (AND (EQL (SETF (CDDAR X) 0) 0) (EQUAL X (QUOTE ((A AA . 0) B C)))))
95 Pass: (LET ((X (COPY-TREE (QUOTE (A B C . D))))) (AND (EQL (SETF (CDDDR X) 0) 0) (EQUAL X (QUOTE (A B C . 0)))))
96 Pass: (LET ((X (COPY-TREE (QUOTE ((((A))) B C))))) (AND (EQL (SETF (CAAAAR X) 0) 0) (EQUAL X (QUOTE ((((0))) B C)))))
97 Pass: (LET ((X (COPY-TREE (QUOTE (A ((B)) C))))) (AND (EQL (SETF (CAAADR X) 0) 0) (EQUAL X (QUOTE (A ((0)) C)))))
98 Pass: (LET ((X (COPY-TREE (QUOTE ((A (AA)) B C))))) (AND (EQL (SETF (CAADAR X) 0) 0) (EQUAL X (QUOTE ((A (0)) B C)))))
99 Pass: (LET ((X (COPY-TREE (QUOTE (A B (C)))))) (AND (EQL (SETF (CAADDR X) 0) 0) (EQUAL X (QUOTE (A B (0))))))
100 Pass: (LET ((X (COPY-TREE (QUOTE (((A AA)) B C))))) (AND (EQL (SETF (CADAAR X) 0) 0) (EQUAL X (QUOTE (((A 0)) B C)))))
101 Pass: (LET ((X (COPY-TREE (QUOTE (A (B BB) C))))) (AND (EQL (SETF (CADADR X) 0) 0) (EQUAL X (QUOTE (A (B 0) C)))))
102 Pass: (LET ((X (COPY-TREE (QUOTE ((A AA AAA) B C))))) (AND (EQL (SETF (CADDAR X) 0) 0) (EQUAL X (QUOTE ((A AA 0) B C)))))
103 Pass: (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))) (AND (EQL (SETF (CADDDR X) 0) 0) (EQUAL X (QUOTE (A B C 0)))))
104 Pass: (LET ((X (COPY-TREE (QUOTE ((((A . AA))) B C))))) (AND (EQL (SETF (CDAAAR X) 0) 0) (EQUAL X (QUOTE ((((A . 0))) B C)))))
105 Pass: (LET ((X (COPY-TREE (QUOTE (A ((B . BB)) C))))) (AND (EQL (SETF (CDAADR X) 0) 0) (EQUAL X (QUOTE (A ((B . 0)) C)))))
106 Pass: (LET ((X (COPY-TREE (QUOTE ((A (AA . AAA)) B C))))) (AND (EQL (SETF (CDADAR X) 0) 0) (EQUAL X (QUOTE ((A (AA . 0)) B C)))))
107 Pass: (LET ((X (COPY-TREE (QUOTE (A B (C . CC)))))) (AND (EQL (SETF (CDADDR X) 0) 0) (EQUAL X (QUOTE (A B (C . 0))))))
108 Pass: (LET ((X (COPY-TREE (QUOTE (((A AA . AAA)) B C))))) (AND (EQL (SETF (CDDAAR X) 0) 0) (EQUAL X (QUOTE (((A AA . 0)) B C)))))
109 Pass: (LET ((X (COPY-TREE (QUOTE (A (B BB . BBB) C))))) (AND (EQL (SETF (CDDADR X) 0) 0) (EQUAL X (QUOTE (A (B BB . 0) C)))))
110 Pass: (LET ((X (COPY-TREE (QUOTE ((A AA AAA . AAAA) B C))))) (AND (EQL (SETF (CDDDAR X) 0) 0) (EQUAL X (QUOTE ((A AA AAA . 0) B C)))))
111 Pass: (LET ((X (COPY-TREE (QUOTE (A B C D . E))))) (AND (EQL (SETF (CDDDDR X) 0) 0) (EQUAL X (QUOTE (A B C D . 0)))))
112 Pass: (EQ (COPY-TREE (QUOTE A)) (QUOTE A))
113 Pass: (EQ (COPY-TREE NIL) NIL)
114 Pass: (LET* ((A (LIST (QUOTE A))) (B (LIST (QUOTE B))) (C (LIST (QUOTE C))) (X3 (CONS C NIL)) (X2 (CONS B X3)) (X (CONS A X2)) (Y (COPY-TREE X))) (AND (NOT (EQ X Y)) (NOT (EQ (CAR X) (CAR Y))) (NOT (EQ (CDR X) (CDR Y))) (NOT (EQ (CADR X) (CADR Y))) (NOT (EQ (CDDR X) (CDDR Y))) (NOT (EQ (CADDR X) (CADDR Y))) (EQ (CDDDR X) (CDDDR Y)) (EQUAL X Y) (EQ (CAR X) A) (EQ (CAR A) (QUOTE A)) (EQ (CDR A) NIL) (EQ (CDR X) X2) (EQ (CAR X2) B) (EQ (CAR B) (QUOTE B)) (EQ (CDR B) NIL) (EQ (CDR X2) X3) (EQ (CAR X3) C) (EQ (CAR C) (QUOTE C)) (EQ (CDR C) NIL) (EQ (CDR X3) NIL)))
115 Pass: (LET* ((X (LIST (LIST (QUOTE A) 1) (LIST (QUOTE B) 2) (LIST (QUOTE C) 3))) (Y (COPY-TREE X))) (AND (NOT (EQ (CAR X) (CAR Y))) (NOT (EQ (CADR X) (CADR Y))) (NOT (EQ (CADDR X) (CADDR Y)))))
116 Pass: (LET* ((X (LIST (LIST (LIST 1)))) (Y (COPY-TREE X))) (AND (NOT (EQ X Y)) (NOT (EQ (CAR X) (CAR Y))) (NOT (EQ (CAAR X) (CAAR Y)))))
117 Pass: (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))) (AND (EQUAL (SUBLIS (QUOTE ((A . 1) (B . 2) (C . 3))) X) (QUOTE (1 2 3 D))) (EQUAL X (QUOTE (A B C D)))))
118 Pass: (LET* ((N (CONS (QUOTE N) NIL)) (M (CONS (QUOTE M) N)) (L (CONS (QUOTE L) M)) (X (SUBLIS (QUOTE ((A . 1) (B . 2) (C . 3))) L))) (AND (EQ X L) (EQ (CAR L) (QUOTE L)) (EQ (CDR L) M) (EQ (CAR M) (QUOTE M)) (EQ (CDR M) N) (EQ (CAR N) (QUOTE N)) (EQ (CDR N) NIL)))
119 Pass: (EQ (SUBLIS (QUOTE NIL) (QUOTE NIL)) (QUOTE NIL))
120 Pass: (EQUAL (SUBLIS (QUOTE NIL) (QUOTE (1 2 3))) (QUOTE (1 2 3)))
121 Pass: (EQ (SUBLIS (QUOTE ((A . 1) (B . 2))) (QUOTE NIL)) NIL)
122 Pass: (EQUAL (SUBLIS (QUOTE ((A B C) (B C D) (C D E))) (QUOTE (A B C))) (QUOTE ((B C) (C D) (D E))))
123 Pass: (EQUAL (SUBLIS (QUOTE ((A . 1) (B . 2) (C . 3))) (QUOTE (((A)) (B) C))) (QUOTE (((1)) (2) 3)))
124 Pass: (EQUAL (SUBLIS (QUOTE (((A) . 1) ((B) . 2) ((C) . 3))) (QUOTE ((((A))) ((B)) (C)))) (QUOTE ((((A))) ((B)) (C))))
125 Pass: (EQUAL (SUBLIS (QUOTE (((A) . 1) ((B) . 2) ((C) . 3))) (QUOTE ((((A))) ((B)) (C))) :TEST (FUNCTION EQUAL)) (QUOTE (((1)) (2) 3)))
126 Pass: (EQUAL (SUBLIS (QUOTE (((A) . 1) ((B) . 2) ((C) . 3))) (QUOTE ((((A))) ((B)) (C))) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))) (QUOTE (((1)) (2) 3)))
127 Pass: (EQUAL (SUBLIS (QUOTE ((A . 1) (B . 2) (C . 3))) (QUOTE ((((A))) ((B)) (C))) :KEY (FUNCTION CAR)) (QUOTE (((1)) (2) 3)))
128 Pass: (EQUAL (SUBLIS (QUOTE (((A) . 1) ((B) . 2) ((C) . 3))) (QUOTE ((((A))) ((B)) (C))) :KEY (FUNCTION CAR) :TEST (FUNCTION EQUAL)) (QUOTE ((1) 2 . 3)))
129 Pass: (EQUAL (NSUBLIS (QUOTE ((A . 1) (B . 2) (C . 3))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) (QUOTE (1 2 3 D)))
130 Pass: (LET* ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D))) (Y (NSUBLIS (QUOTE ((A . 1) (B . 2) (C . 3))) X))) (AND (EQ X Y) (EQUAL X (QUOTE (1 2 3 D)))))
131 Pass: (LET ((X (LIST (QUOTE L) (QUOTE M) (QUOTE N)))) (AND (EQ (NSUBLIS (QUOTE ((A . 1) (B . 2) (C . 3))) X) X) (EQUAL X (QUOTE (L M N)))))
132 Pass: (LET* ((N (CONS (QUOTE N) NIL)) (M (CONS (QUOTE M) N)) (L (CONS (QUOTE L) M)) (X (NSUBLIS (QUOTE ((A . 1) (B . 2) (C . 3))) L))) (AND (EQ X L) (EQ (CAR L) (QUOTE L)) (EQ (CDR L) M) (EQ (CAR M) (QUOTE M)) (EQ (CDR M) N) (EQ (CAR N) (QUOTE N)) (EQ (CDR N) NIL)))
133 Pass: (EQ (NSUBLIS (QUOTE NIL) (QUOTE NIL)) (QUOTE NIL))
134 Pass: (EQUAL (NSUBLIS (QUOTE NIL) (QUOTE (1 2 3))) (QUOTE (1 2 3)))
135 Pass: (EQ (NSUBLIS (QUOTE ((A . 1) (B . 2))) (QUOTE NIL)) NIL)
136 Pass: (EQUAL (NSUBLIS (QUOTE ((A B C) (B C D) (C D E))) (LIST (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE ((B C) (C D) (D E))))
137 Pass: (EQUAL (NSUBLIS (QUOTE ((A . 1) (B . 2) (C . 3))) (COPY-TREE (QUOTE (((A)) (B) C)))) (QUOTE (((1)) (2) 3)))
138 Pass: (EQUAL (NSUBLIS (QUOTE (((A) . 1) ((B) . 2) ((C) . 3))) (COPY-TREE (QUOTE ((((A))) ((B)) (C))))) (QUOTE ((((A))) ((B)) (C))))
139 Pass: (EQUAL (NSUBLIS (QUOTE (((A) . 1) ((B) . 2) ((C) . 3))) (COPY-TREE (QUOTE ((((A))) ((B)) (C)))) :TEST (FUNCTION EQUAL)) (QUOTE (((1)) (2) 3)))
140 Pass: (EQUAL (NSUBLIS (QUOTE (((A) . 1) ((B) . 2) ((C) . 3))) (COPY-TREE (QUOTE ((((A))) ((B)) (C)))) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))) (QUOTE (((1)) (2) 3)))
141 Pass: (EQUAL (NSUBLIS (QUOTE ((A . 1) (B . 2) (C . 3))) (COPY-TREE (QUOTE ((((A))) ((B)) (C)))) :KEY (FUNCTION CAR)) (QUOTE (((1)) (2) 3)))
142 Pass: (EQUAL (NSUBLIS (QUOTE (((A) . 1) ((B) . 2) ((C) . 3))) (COPY-TREE (QUOTE ((((A))) ((B)) (C)))) :KEY (QUOTE CAR) :TEST (FUNCTION EQUAL)) (QUOTE ((1) 2 . 3)))
143 Pass: (LET ((TREE (QUOTE (OLD (OLD) ((OLD)))))) (EQUAL (SUBST (QUOTE NEW) (QUOTE OLD) TREE) (QUOTE (NEW (NEW) ((NEW))))))
144 Pass: (EQ (SUBST (QUOTE NEW) (QUOTE OLD) (QUOTE OLD)) (QUOTE NEW))
145 Pass: (EQ (SUBST (QUOTE NEW) (QUOTE OLD) (QUOTE NOT-OLD)) (QUOTE NOT-OLD))
146 Pass: (EQUAL (SUBST (QUOTE NEW) (QUOTE (B)) (QUOTE (A ((B)))) :TEST (FUNCTION EQUAL)) (QUOTE (A (NEW))))
147 Pass: (EQUAL (SUBST (QUOTE NEW) (QUOTE (B)) (QUOTE (A ((B)))) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))) (QUOTE (A (NEW))))
148 Pass: (EQUAL (SUBST (QUOTE X) 3 (QUOTE (1 (1 2) (1 2 3) (1 2 3 4))) :KEY (FUNCTION (LAMBDA (Y) (AND (LISTP Y) (THIRD Y))))) (QUOTE (1 (1 2) X X)))
149 Pass: (EQUAL (SUBST (QUOTE X) "D" (QUOTE ("a" ("a" "b") ("a" "b" "c") ("a" "b" "c" "d"))) :TEST (FUNCTION EQUALP) :KEY (FUNCTION (LAMBDA (Y) (AND (LISTP Y) (FOURTH Y))))) (QUOTE ("a" ("a" "b") ("a" "b" "c") X)))
150 Pass: (EQUAL (SUBST-IF (QUOTE NEW) (FUNCTION (LAMBDA (X) (EQ X (QUOTE OLD)))) (QUOTE (OLD OLD))) (QUOTE (NEW NEW)))
151 Pass: (EQ (SUBST-IF (QUOTE NEW) (FUNCTION (LAMBDA (X) (EQ X (QUOTE OLD)))) (QUOTE OLD)) (QUOTE NEW))
152 Pass: (EQUAL (SUBST-IF (QUOTE X) (FUNCTION (LAMBDA (X) (EQL X 3))) (QUOTE (1 (1 2) (1 2 3) (1 2 3 4))) :KEY (FUNCTION (LAMBDA (Y) (AND (LISTP Y) (THIRD Y))))) (QUOTE (1 (1 2) X X)))
153 Pass: (LET ((TREE (QUOTE (OLD (OLD) ((OLD)))))) (EQUAL (SUBST-IF (QUOTE NEW) (FUNCTION (LAMBDA (X) (EQ X (QUOTE OLD)))) TREE) (QUOTE (NEW (NEW) ((NEW))))))
154 Pass: (EQ (SUBST-IF (QUOTE NEW) (FUNCTION (LAMBDA (X) (EQ X (QUOTE OLD)))) (QUOTE OLD)) (QUOTE NEW))
155 Pass: (EQ (SUBST-IF (QUOTE NEW) (FUNCTION (LAMBDA (X) (EQ X (QUOTE OLD)))) (QUOTE NOT-OLD)) (QUOTE NOT-OLD))
156 Pass: (EQUAL (SUBST-IF (QUOTE NEW) (FUNCTION (LAMBDA (X) (EQUAL X (QUOTE (B))))) (QUOTE (A ((B))))) (QUOTE (A (NEW))))
157 Pass: (EQUAL (SUBST-IF (QUOTE X) (FUNCTION (LAMBDA (X) (EQL X 3))) (QUOTE (1 (1 2) (1 2 3) (1 2 3 4))) :KEY (FUNCTION (LAMBDA (Y) (AND (LISTP Y) (THIRD Y))))) (QUOTE (1 (1 2) X X)))
158 Pass: (EQUAL (SUBST-IF (QUOTE X) (FUNCTION (LAMBDA (X) (EQUALP X "D"))) (QUOTE ("a" ("a" "b") ("a" "b" "c") ("a" "b" "c" "d"))) :KEY (FUNCTION (LAMBDA (Y) (AND (LISTP Y) (FOURTH Y))))) (QUOTE ("a" ("a" "b") ("a" "b" "c") X)))
159 Pass: (EQUAL (SUBST-IF-NOT (QUOTE NEW) (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE OLD))))) (QUOTE (OLD OLD))) (QUOTE (NEW NEW)))
160 Pass: (EQ (SUBST-IF-NOT (QUOTE NEW) (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE OLD))))) (QUOTE OLD)) (QUOTE NEW))
161 Pass: (EQUAL (SUBST-IF-NOT (QUOTE X) (FUNCTION (LAMBDA (X) (NOT (EQL X 3)))) (QUOTE (1 (1 2) (1 2 3) (1 2 3 4))) :KEY (FUNCTION (LAMBDA (Y) (AND (LISTP Y) (THIRD Y))))) (QUOTE (1 (1 2) X X)))
162 Pass: (LET ((TREE (QUOTE (OLD (OLD) ((OLD)))))) (EQUAL (SUBST-IF-NOT (QUOTE NEW) (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE OLD))))) TREE) (QUOTE (NEW (NEW) ((NEW))))))
163 Pass: (EQ (SUBST-IF-NOT (QUOTE NEW) (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE OLD))))) (QUOTE OLD)) (QUOTE NEW))
164 Pass: (EQ (SUBST-IF-NOT (QUOTE NEW) (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE OLD))))) (QUOTE NOT-OLD)) (QUOTE NOT-OLD))
165 Pass: (EQUAL (SUBST-IF-NOT (QUOTE NEW) (FUNCTION (LAMBDA (X) (NOT (EQUAL X (QUOTE (B)))))) (QUOTE (A ((B))))) (QUOTE (A (NEW))))
166 Pass: (EQUAL (SUBST-IF-NOT (QUOTE X) (FUNCTION (LAMBDA (X) (NOT (EQL X 3)))) (QUOTE (1 (1 2) (1 2 3) (1 2 3 4))) :KEY (FUNCTION (LAMBDA (Y) (AND (LISTP Y) (THIRD Y))))) (QUOTE (1 (1 2) X X)))
167 Pass: (EQUAL (SUBST-IF-NOT (QUOTE X) (FUNCTION (LAMBDA (X) (NOT (EQUALP X "D")))) (QUOTE ("a" ("a" "b") ("a" "b" "c") ("a" "b" "c" "d"))) :KEY (FUNCTION (LAMBDA (Y) (AND (LISTP Y) (FOURTH Y))))) (QUOTE ("a" ("a" "b") ("a" "b" "c") X)))
168 Pass: (LET ((TREE (QUOTE (OLD (OLD) ((OLD)))))) (EQUAL (NSUBST (QUOTE NEW) (QUOTE OLD) (COPY-TREE TREE)) (QUOTE (NEW (NEW) ((NEW))))))
169 Pass: (LET* ((TREE (COPY-TREE (QUOTE (OLD (OLD) ((OLD)))))) (NEW-TREE (NSUBST (QUOTE NEW) (QUOTE OLD) TREE))) (AND (EQ TREE NEW-TREE) (EQUAL TREE (QUOTE (NEW (NEW) ((NEW)))))))
170 Pass: (EQ (NSUBST (QUOTE NEW) (QUOTE OLD) (QUOTE OLD)) (QUOTE NEW))
171 Pass: (EQ (NSUBST (QUOTE NEW) (QUOTE OLD) (QUOTE NOT-OLD)) (QUOTE NOT-OLD))
172 Pass: (EQUAL (NSUBST (QUOTE NEW) (QUOTE (B)) (COPY-TREE (QUOTE (A ((B))))) :TEST (FUNCTION EQUAL)) (QUOTE (A (NEW))))
173 Pass: (EQUAL (NSUBST (QUOTE NEW) (QUOTE (B)) (COPY-TREE (QUOTE (A ((B))))) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))) (QUOTE (A (NEW))))
174 Pass: (EQUAL (NSUBST (QUOTE X) 3 (COPY-TREE (QUOTE (1 (1 2) (1 2 3) (1 2 3 4)))) :KEY (FUNCTION (LAMBDA (Y) (AND (LISTP Y) (THIRD Y))))) (QUOTE (1 (1 2) X X)))
175 Pass: (EQUAL (NSUBST (QUOTE X) "D" (COPY-TREE (QUOTE ("a" ("a" "b") ("a" "b" "c") ("a" "b" "c" "d")))) :TEST (FUNCTION EQUALP) :KEY (FUNCTION (LAMBDA (Y) (AND (LISTP Y) (FOURTH Y))))) (QUOTE ("a" ("a" "b") ("a" "b" "c") X)))
176 Pass: (EQUAL (NSUBST-IF (QUOTE NEW) (FUNCTION (LAMBDA (X) (EQ X (QUOTE OLD)))) (LIST (QUOTE OLD) (QUOTE OLD))) (QUOTE (NEW NEW)))
177 Pass: (EQ (NSUBST-IF (QUOTE NEW) (FUNCTION (LAMBDA (X) (EQ X (QUOTE OLD)))) (QUOTE OLD)) (QUOTE NEW))
178 Pass: (LET* ((X (COPY-TREE (QUOTE (OLD (OLD) ((OLD)) (OLD) OLD)))) (Y (NSUBST-IF (QUOTE NEW) (FUNCTION (LAMBDA (X) (EQ X (QUOTE OLD)))) X))) (AND (EQ X Y) (EQUAL X (QUOTE (NEW (NEW) ((NEW)) (NEW) NEW)))))
179 Pass: (EQUAL (NSUBST-IF (QUOTE X) (FUNCTION (LAMBDA (X) (EQL X 3))) (COPY-TREE (QUOTE (1 (1 2) (1 2 3) (1 2 3 4)))) :KEY (FUNCTION (LAMBDA (Y) (AND (LISTP Y) (THIRD Y))))) (QUOTE (1 (1 2) X X)))
180 Pass: (LET ((TREE (QUOTE (OLD (OLD) ((OLD)))))) (EQUAL (NSUBST-IF (QUOTE NEW) (FUNCTION (LAMBDA (X) (EQ X (QUOTE OLD)))) (COPY-TREE TREE)) (QUOTE (NEW (NEW) ((NEW))))))
181 Pass: (EQ (NSUBST-IF (QUOTE NEW) (FUNCTION (LAMBDA (X) (EQ X (QUOTE OLD)))) (QUOTE OLD)) (QUOTE NEW))
182 Pass: (EQ (NSUBST-IF (QUOTE NEW) (FUNCTION (LAMBDA (X) (EQ X (QUOTE OLD)))) (QUOTE NOT-OLD)) (QUOTE NOT-OLD))
183 Pass: (EQUAL (NSUBST-IF (QUOTE NEW) (FUNCTION (LAMBDA (X) (EQUAL X (QUOTE (B))))) (COPY-TREE (QUOTE (A ((B)))))) (QUOTE (A (NEW))))
184 Pass: (EQUAL (NSUBST-IF (QUOTE X) (FUNCTION (LAMBDA (X) (EQL X 3))) (COPY-TREE (QUOTE (1 (1 2) (1 2 3) (1 2 3 4)))) :KEY (FUNCTION (LAMBDA (Y) (AND (LISTP Y) (THIRD Y))))) (QUOTE (1 (1 2) X X)))
185 Pass: (EQUAL (NSUBST-IF (QUOTE X) (FUNCTION (LAMBDA (X) (EQUALP X "D"))) (COPY-TREE (QUOTE ("a" ("a" "b") ("a" "b" "c") ("a" "b" "c" "d")))) :KEY (FUNCTION (LAMBDA (Y) (AND (LISTP Y) (FOURTH Y))))) (QUOTE ("a" ("a" "b") ("a" "b" "c") X)))
186 Pass: (EQUAL (NSUBST-IF-NOT (QUOTE NEW) (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE OLD))))) (LIST (QUOTE OLD) (QUOTE OLD))) (QUOTE (NEW NEW)))
187 Pass: (EQ (NSUBST-IF-NOT (QUOTE NEW) (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE OLD))))) (QUOTE OLD)) (QUOTE NEW))
188 Pass: (LET* ((X (COPY-TREE (QUOTE (OLD (OLD) ((OLD)) (OLD) OLD)))) (Y (NSUBST-IF-NOT (QUOTE NEW) (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE OLD))))) X))) (AND (EQ X Y) (EQUAL X (QUOTE (NEW (NEW) ((NEW)) (NEW) NEW)))))
189 Pass: (EQUAL (NSUBST-IF-NOT (QUOTE X) (FUNCTION (LAMBDA (X) (NOT (EQL X 3)))) (COPY-TREE (QUOTE (1 (1 2) (1 2 3) (1 2 3 4)))) :KEY (FUNCTION (LAMBDA (Y) (AND (LISTP Y) (THIRD Y))))) (QUOTE (1 (1 2) X X)))
190 Pass: (LET ((TREE (QUOTE (OLD (OLD) ((OLD)))))) (EQUAL (NSUBST-IF-NOT (QUOTE NEW) (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE OLD))))) (COPY-TREE TREE)) (QUOTE (NEW (NEW) ((NEW))))))
191 Pass: (EQ (NSUBST-IF-NOT (QUOTE NEW) (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE OLD))))) (QUOTE OLD)) (QUOTE NEW))
192 Pass: (EQ (NSUBST-IF-NOT (QUOTE NEW) (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE OLD))))) (QUOTE NOT-OLD)) (QUOTE NOT-OLD))
193 Pass: (EQUAL (NSUBST-IF-NOT (QUOTE NEW) (FUNCTION (LAMBDA (X) (NOT (EQUAL X (QUOTE (B)))))) (COPY-TREE (QUOTE (A ((B)))))) (QUOTE (A (NEW))))
194 Pass: (EQUAL (NSUBST-IF-NOT (QUOTE X) (FUNCTION (LAMBDA (X) (NOT (EQL X 3)))) (COPY-TREE (QUOTE (1 (1 2) (1 2 3) (1 2 3 4)))) :KEY (FUNCTION (LAMBDA (Y) (AND (LISTP Y) (THIRD Y))))) (QUOTE (1 (1 2) X X)))
195 Pass: (EQUAL (NSUBST-IF-NOT (QUOTE X) (FUNCTION (LAMBDA (X) (NOT (EQUALP X "D")))) (COPY-TREE (QUOTE ("a" ("a" "b") ("a" "b" "c") ("a" "b" "c" "d")))) :KEY (FUNCTION (LAMBDA (Y) (AND (LISTP Y) (FOURTH Y))))) (QUOTE ("a" ("a" "b") ("a" "b" "c") X)))
196 Pass: (TREE-EQUAL (QUOTE A) (QUOTE A))
197 Pass: (NOT (TREE-EQUAL (QUOTE A) (QUOTE B)))
198 Pass: (TREE-EQUAL (QUOTE (A (B (C)))) (QUOTE (A (B (C)))))
199 Pass: (TREE-EQUAL (QUOTE (A (B (C)))) (QUOTE (A (B (C)))) :TEST (FUNCTION EQ))
200 Pass: (TREE-EQUAL (QUOTE (A (B (C)))) (QUOTE (A (B (C)))) :TEST-NOT (COMPLEMENT (FUNCTION EQ)))
201 Pass: (NOT (TREE-EQUAL (QUOTE ("a" ("b" ("c")))) (QUOTE ("a" ("b" ("c"))))))
202 Pass: (TREE-EQUAL (QUOTE ("a" ("b" ("c")))) (QUOTE ("a" ("b" ("c")))) :TEST (FUNCTION EQUAL))
203 Pass: (TREE-EQUAL (QUOTE ("a" ("b" ("c")))) (QUOTE ("a" ("b" ("c")))) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL)))
204 Pass: (NOT (TREE-EQUAL (QUOTE (A B)) (QUOTE (A (B)))))
205 Pass: (EQ (COPY-LIST (QUOTE NIL)) (QUOTE NIL))
206 Pass: (EQUAL (COPY-LIST (QUOTE (A B C))) (QUOTE (A B C)))
207 Pass: (EQUAL (COPY-LIST (QUOTE (A . B))) (QUOTE (A . B)))
208 Pass: (LET* ((X (QUOTE (A B C))) (Y (COPY-LIST X))) (AND (EQUAL X Y) (NOT (EQ X Y))))
209 Pass: (LET* ((A (LIST (QUOTE A))) (B (LIST (QUOTE B))) (C (LIST (QUOTE C))) (X (LIST A B C)) (Y (COPY-LIST X))) (AND (EQUAL X Y) (NOT (EQ X Y)) (EQ (CAR X) (CAR Y)) (EQ (CADR X) (CADR Y)) (EQ (CADDR X) (CADDR Y)) (EQ (CAAR X) (QUOTE A)) (EQ (CAADR X) (QUOTE B)) (EQ (CAADDR X) (QUOTE C))))
210 Pass: (NULL (LIST))
211 Pass: (EQUAL (LIST 1) (QUOTE (1)))
212 Pass: (EQUAL (LIST 1 2 3) (QUOTE (1 2 3)))
213 Pass: (EQUAL (LIST* 1 2 (QUOTE (3))) (QUOTE (1 2 3)))
214 Pass: (EQUAL (LIST* 1 2 (QUOTE X)) (QUOTE (1 2 . X)))
215 Pass: (EQUAL (LIST* 1 2 (QUOTE (3 4))) (QUOTE (1 2 3 4)))
216 Pass: (EQ (LIST* (QUOTE X)) (QUOTE X))
217 Pass: (EQL (LIST-LENGTH (QUOTE NIL)) 0)
218 Pass: (EQL (LIST-LENGTH (QUOTE (1))) 1)
219 Pass: (EQL (LIST-LENGTH (QUOTE (1 2))) 2)
220 Pass: (NULL (LIST-LENGTH (QUOTE #1=(1 2 3 4 . #1#))))
221 Pass: (EQUAL (MAKE-LIST 5) (QUOTE (NIL NIL NIL NIL NIL)))
222 Pass: (EQUAL (MAKE-LIST 3 :INITIAL-ELEMENT (QUOTE RAH)) (QUOTE (RAH RAH RAH)))
223 Pass: (EQUAL (MAKE-LIST 2 :INITIAL-ELEMENT (QUOTE (1 2 3))) (QUOTE ((1 2 3) (1 2 3))))
224 Pass: (NULL (MAKE-LIST 0))
225 Pass: (NULL (MAKE-LIST 0 :INITIAL-ELEMENT (QUOTE NEW-ELEMENT)))
226 Pass: (LET ((PLACE NIL)) (AND (EQUAL (PUSH 0 PLACE) (QUOTE (0))) (EQUAL PLACE (QUOTE (0)))))
227 Pass: (LET ((PLACE (LIST 1 2 3))) (AND (EQUAL (PUSH 0 PLACE) (QUOTE (0 1 2 3))) (EQUAL PLACE (QUOTE (0 1 2 3)))))
228 Pass: (LET ((A (LIST (LIST 1 2 3) 9))) (AND (EQUAL (PUSH 0 (CAR A)) (QUOTE (0 1 2 3))) (EQUAL A (QUOTE ((0 1 2 3) 9)))))
229 Pass: (LET ((X (COPY-TREE (QUOTE (A (B C) D))))) (AND (EQUAL (PUSH (QUOTE AA) (CADR X)) (QUOTE (AA B C))) (EQUAL X (QUOTE (A (AA B C) D)))))
230 Pass: (LET ((PLACE (LIST 1 2 3))) (AND (EQL (POP PLACE) 1) (EQUAL PLACE (QUOTE (2 3)))))
231 Pass: (LET ((PLACE (QUOTE NIL))) (AND (EQL (POP PLACE) NIL) (EQUAL PLACE (QUOTE NIL))))
232 Pass: (LET ((A (LIST (LIST 1 2 3) 9))) (AND (EQL (POP (CAR A)) 1) (EQUAL A (QUOTE ((2 3) 9)))))
233 Pass: (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (AND (EQ (POP (CDR X)) (QUOTE B)) (EQUAL X (QUOTE (A C)))))
234 Pass: (EQ (FIRST (QUOTE (A . B))) (QUOTE A))
235 Pass: (NULL (FIRST NIL))
236 Pass: (LET ((A (CONS 1 2))) (EQ (FIRST (LIST A)) A))
237 Pass: (EQ (FIRST (QUOTE #1=(A . #1#))) (QUOTE A))
238 Pass: (EQL (FIRST (QUOTE (1 2 3))) (QUOTE 1))
239 Pass: (EQL (SECOND (QUOTE (1 2 3))) (QUOTE 2))
240 Pass: (EQL (THIRD (QUOTE (1 2 3))) (QUOTE 3))
241 Pass: (EQL (FOURTH (QUOTE (1 2 3 4))) (QUOTE 4))
242 Pass: (EQL (FIFTH (QUOTE (1 2 3 4 5))) (QUOTE 5))
243 Pass: (EQL (SIXTH (QUOTE (1 2 3 4 5 6))) (QUOTE 6))
244 Pass: (EQL (SEVENTH (QUOTE (1 2 3 4 5 6 7))) (QUOTE 7))
245 Pass: (EQL (EIGHTH (QUOTE (1 2 3 4 5 6 7 8))) (QUOTE 8))
246 Pass: (EQL (NINTH (QUOTE (1 2 3 4 5 6 7 8 9))) (QUOTE 9))
247 Pass: (EQL (TENTH (QUOTE (1 2 3 4 5 6 7 8 9 10))) (QUOTE 10))
248 Pass: (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (AND (EQL (SETF (FIRST X) 0) 0) (EQUAL X (QUOTE (0 B C)))))
249 Pass: (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (AND (EQL (SETF (SECOND X) 0) 0) (EQUAL X (QUOTE (A 0 C)))))
250 Pass: (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (AND (EQL (SETF (THIRD X) 0) 0) (EQUAL X (QUOTE (A B 0)))))
251 Pass: (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))) (AND (EQL (SETF (FOURTH X) 0) 0) (EQUAL X (QUOTE (A B C 0)))))
252 Pass: (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E)))) (AND (EQL (SETF (FIFTH X) 0) 0) (EQUAL X (QUOTE (A B C D 0)))))
253 Pass: (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) (QUOTE F)))) (AND (EQL (SETF (SIXTH X) 0) 0) (EQUAL X (QUOTE (A B C D E 0)))))
254 Pass: (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) (QUOTE F) (QUOTE G)))) (AND (EQL (SETF (SEVENTH X) 0) 0) (EQUAL X (QUOTE (A B C D E F 0)))))
255 Pass: (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) (QUOTE F) (QUOTE G) (QUOTE H)))) (AND (EQL (SETF (EIGHTH X) 0) 0) (EQUAL X (QUOTE (A B C D E F G 0)))))
256 Pass: (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) (QUOTE F) (QUOTE G) (QUOTE H) (QUOTE I)))) (AND (EQL (SETF (NINTH X) 0) 0) (EQUAL X (QUOTE (A B C D E F G H 0)))))
257 Pass: (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E) (QUOTE F) (QUOTE G) (QUOTE H) (QUOTE I) (QUOTE J)))) (AND (EQL (SETF (TENTH X) 0) 0) (EQUAL X (QUOTE (A B C D E F G H I 0)))))
258 Pass: (LET ((X (QUOTE (A B C)))) (EQ (NTHCDR 0 X) X))
259 Pass: (LET ((X (QUOTE (A B C)))) (EQ (NTHCDR 1 X) (CDR X)))
260 Pass: (LET ((X (QUOTE (A B C)))) (EQ (NTHCDR 2 X) (CDDR X)))
261 Pass: (LET ((X (QUOTE (A B C)))) (EQ (NTHCDR 2 X) (CDDR X)))
262 Pass: (LET ((X (QUOTE (A B C)))) (EQ (NTHCDR 3 X) (CDDDR X)))
263 Pass: (EQUAL (NTHCDR 0 (QUOTE (0 1 2))) (QUOTE (0 1 2)))
264 Pass: (EQUAL (NTHCDR 1 (QUOTE (0 1 2))) (QUOTE (1 2)))
265 Pass: (EQUAL (NTHCDR 2 (QUOTE (0 1 2))) (QUOTE (2)))
266 Pass: (EQUAL (NTHCDR 3 (QUOTE (0 1 2))) (QUOTE NIL))
267 Pass: (EQL (NTHCDR 1 (QUOTE (0 . 1))) 1)
268 Pass: (EQL (NTH 0 (QUOTE (A B C))) (QUOTE A))
269 Pass: (EQL (NTH 1 (QUOTE (A B C))) (QUOTE B))
270 Pass: (EQL (NTH 2 (QUOTE (A B C))) (QUOTE C))
271 Pass: (EQL (NTH 3 (QUOTE (A B C))) (QUOTE NIL))
272 Pass: (EQL (NTH 4 (QUOTE (A B C))) (QUOTE NIL))
273 Pass: (EQL (NTH 5 (QUOTE (A B C))) (QUOTE NIL))
274 Pass: (EQL (NTH 6 (QUOTE (A B C))) (QUOTE NIL))
275 Pass: (EQ (NTH 0 (QUOTE (A . B))) (QUOTE A))
276 Pass: (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (AND (EQ (SETF (NTH 0 X) (QUOTE Z)) (QUOTE Z)) (EQUAL X (QUOTE (Z B C)))))
277 Pass: (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (AND (EQ (SETF (NTH 1 X) (QUOTE Z)) (QUOTE Z)) (EQUAL X (QUOTE (A Z C)))))
278 Pass: (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (AND (EQ (SETF (NTH 2 X) (QUOTE Z)) (QUOTE Z)) (EQUAL X (QUOTE (A B Z)))))
279 Pass: (LET ((0-TO-3 (LIST 0 1 2 3))) (AND (EQUAL (SETF (NTH 2 0-TO-3) "two") "two") (EQUAL 0-TO-3 (QUOTE (0 1 "two" 3)))))
280 Pass: (EQ (NCONC) (QUOTE NIL))
281 Pass: (EQUAL (NCONC NIL (LIST (QUOTE A) (QUOTE B) (QUOTE C)) (LIST (QUOTE D) (QUOTE E) (QUOTE F))) (QUOTE (A B C D E F)))
282 Pass: (EQUAL (NCONC NIL NIL (LIST (QUOTE A) (QUOTE B) (QUOTE C)) (LIST (QUOTE D) (QUOTE E) (QUOTE F))) (QUOTE (A B C D E F)))
283 Pass: (EQUAL (NCONC NIL NIL NIL (LIST (QUOTE A) (QUOTE B) (QUOTE C)) (LIST (QUOTE D) (QUOTE E) (QUOTE F))) (QUOTE (A B C D E F)))
284 Pass: (LET* ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (EQ (NCONC X) X))
285 Pass: (LET* ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C))) (Y (LIST (QUOTE D) (QUOTE E) (QUOTE F))) (LIST (NCONC X Y))) (AND (EQ LIST X) (EQ (NTHCDR 3 LIST) Y) (EQUAL LIST (QUOTE (A B C D E F)))))
286 Pass: (LET* ((X (LIST (QUOTE A))) (Y (LIST (QUOTE B))) (Z (LIST (QUOTE C))) (LIST (NCONC X Y Z))) (AND (EQ X LIST) (EQ (FIRST LIST) (QUOTE A)) (EQ Y (CDR LIST)) (EQ (SECOND LIST) (QUOTE B)) (EQ Z (CDDR LIST)) (EQ (THIRD LIST) (QUOTE C))))
287 Pass: (EQUAL (APPEND (QUOTE (A B)) (QUOTE NIL) (QUOTE (C D)) (QUOTE (E F))) (QUOTE (A B C D E F)))
288 Pass: (NULL (APPEND))
289 Pass: (NULL (APPEND (QUOTE NIL)))
290 Pass: (NULL (APPEND (QUOTE NIL) (QUOTE NIL)))
291 Pass: (EQ (APPEND (QUOTE A)) (QUOTE A))
292 Pass: (EQ (APPEND (QUOTE NIL) (QUOTE A)) (QUOTE A))
293 Pass: (EQ (APPEND (QUOTE NIL) (QUOTE NIL) (QUOTE A)) (QUOTE A))
294 Pass: (EQUAL (APPEND (QUOTE (A B)) (QUOTE C)) (QUOTE (A B . C)))
295 Pass: (LET* ((X (QUOTE (A B C))) (Y (QUOTE (D E F))) (Z (APPEND X Y))) (AND (EQUAL Z (QUOTE (A B C D E F))) (EQ (NTHCDR 3 Z) Y) (NOT (EQ X Z))))
296 Pass: (EQUAL (REVAPPEND (QUOTE (A B C)) (QUOTE (D E F))) (QUOTE (C B A D E F)))
297 Pass: (LET* ((X (QUOTE (A B C))) (Y (QUOTE (D E F))) (Z (REVAPPEND X Y))) (AND (EQUAL Z (QUOTE (C B A D E F))) (NOT (EQ X Z)) (EQ (NTHCDR 3 Z) Y)))
298 Pass: (LET ((X (QUOTE (A B C)))) (EQ (REVAPPEND (QUOTE NIL) X) X))
299 Pass: (NULL (REVAPPEND (QUOTE NIL) (QUOTE NIL)))
300 Pass: (EQ (REVAPPEND (QUOTE NIL) (QUOTE A)) (QUOTE A))
301 Pass: (EQUAL (REVAPPEND (QUOTE (A)) (QUOTE B)) (QUOTE (A . B)))
302 Pass: (EQUAL (REVAPPEND (QUOTE (A)) (QUOTE NIL)) (QUOTE (A)))
303 Pass: (EQUAL (REVAPPEND (QUOTE (1 2 3)) (QUOTE NIL)) (QUOTE (3 2 1)))
304 Pass: (EQUAL (NRECONC (LIST (QUOTE A) (QUOTE B) (QUOTE C)) (QUOTE (D E F))) (QUOTE (C B A D E F)))
305 Pass: (LET* ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C))) (Y (QUOTE (D E F))) (Z (NRECONC X Y))) (AND (EQUAL Z (QUOTE (C B A D E F))) (EQ (NTHCDR 3 Z) Y)))
306 Pass: (LET ((X (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (EQ (NRECONC (QUOTE NIL) X) X))
307 Pass: (NULL (NRECONC (QUOTE NIL) (QUOTE NIL)))
308 Pass: (EQ (NRECONC (QUOTE NIL) (QUOTE A)) (QUOTE A))
309 Pass: (EQUAL (NRECONC (LIST (QUOTE A)) (QUOTE B)) (QUOTE (A . B)))
310 Pass: (EQUAL (NRECONC (LIST (QUOTE A)) (QUOTE NIL)) (QUOTE (A)))
311 Pass: (EQUAL (NRECONC (LIST 1 2 3) (QUOTE NIL)) (QUOTE (3 2 1)))
312 Pass: (NULL (BUTLAST NIL))
313 Pass: (NULL (BUTLAST NIL 1))
314 Pass: (NULL (BUTLAST NIL 2))
315 Pass: (NULL (BUTLAST NIL 3))
316 Pass: (EQUAL (BUTLAST (QUOTE (1 2 3 4 5))) (QUOTE (1 2 3 4)))
317 Pass: (EQUAL (BUTLAST (QUOTE (1 2 3 4 5)) 1) (QUOTE (1 2 3 4)))
318 Pass: (EQUAL (BUTLAST (QUOTE (1 2 3 4 5)) 2) (QUOTE (1 2 3)))
319 Pass: (EQUAL (BUTLAST (QUOTE (1 2 3 4 5)) 3) (QUOTE (1 2)))
320 Pass: (EQUAL (BUTLAST (QUOTE (1 2 3 4 5)) 4) (QUOTE (1)))
321 Pass: (EQUAL (BUTLAST (QUOTE (1 2 3 4 5)) 5) (QUOTE NIL))
322 Pass: (EQUAL (BUTLAST (QUOTE (1 2 3 4 5)) 6) (QUOTE NIL))
323 Pass: (EQUAL (BUTLAST (QUOTE (1 2 3 4 5)) 7) (QUOTE NIL))
324 Pass: (EQUAL (BUTLAST (QUOTE (1 2 3 4 5 . 6))) (QUOTE (1 2 3 4)))
325 Pass: (EQUAL (BUTLAST (QUOTE (1 2 3 4 5 . 6)) 1) (QUOTE (1 2 3 4)))
326 Pass: (EQUAL (BUTLAST (QUOTE (1 2 3 4 5 . 6)) 2) (QUOTE (1 2 3)))
327 Pass: (EQUAL (BUTLAST (QUOTE (1 2 3 4 5 . 6)) 3) (QUOTE (1 2)))
328 Pass: (EQUAL (BUTLAST (QUOTE (1 2 3 4 5 . 6)) 4) (QUOTE (1)))
329 Pass: (EQUAL (BUTLAST (QUOTE (1 2 3 4 5 . 6)) 5) (QUOTE NIL))
330 Pass: (EQUAL (BUTLAST (QUOTE (1 2 3 4 5 . 6)) 6) (QUOTE NIL))
331 Pass: (EQUAL (BUTLAST (QUOTE (1 2 3 4 5 . 6)) 7) (QUOTE NIL))
332 Pass: (LET ((A (QUOTE (1 2 3 4 5)))) (EQUAL (BUTLAST A 3) (QUOTE (1 2))) (EQUAL A (QUOTE (1 2 3 4 5))))
333 Pass: (NULL (NBUTLAST NIL))
334 Pass: (NULL (NBUTLAST NIL 1))
335 Pass: (NULL (NBUTLAST NIL 2))
336 Pass: (NULL (NBUTLAST NIL 3))
337 Pass: (EQUAL (NBUTLAST (LIST 1 2 3 4 5)) (QUOTE (1 2 3 4)))
338 Pass: (EQUAL (NBUTLAST (LIST 1 2 3 4 5) 1) (QUOTE (1 2 3 4)))
339 Pass: (EQUAL (NBUTLAST (LIST 1 2 3 4 5) 2) (QUOTE (1 2 3)))
340 Pass: (EQUAL (NBUTLAST (LIST 1 2 3 4 5) 3) (QUOTE (1 2)))
341 Pass: (EQUAL (NBUTLAST (LIST 1 2 3 4 5) 4) (QUOTE (1)))
342 Pass: (EQUAL (NBUTLAST (LIST 1 2 3 4 5) 5) (QUOTE NIL))
343 Pass: (EQUAL (NBUTLAST (LIST 1 2 3 4 5) 6) (QUOTE NIL))
344 Pass: (EQUAL (NBUTLAST (LIST 1 2 3 4 5) 7) (QUOTE NIL))
345 Pass: (EQUAL (NBUTLAST (LIST* 1 2 3 4 5 6)) (QUOTE (1 2 3 4)))
346 Pass: (EQUAL (NBUTLAST (LIST* 1 2 3 4 5 6) 1) (QUOTE (1 2 3 4)))
347 Pass: (EQUAL (NBUTLAST (LIST* 1 2 3 4 5 6) 2) (QUOTE (1 2 3)))
348 Pass: (EQUAL (NBUTLAST (LIST* 1 2 3 4 5 6) 3) (QUOTE (1 2)))
349 Pass: (EQUAL (NBUTLAST (LIST* 1 2 3 4 5 6) 4) (QUOTE (1)))
350 Pass: (EQUAL (NBUTLAST (LIST* 1 2 3 4 5 6) 5) (QUOTE NIL))
351 Pass: (EQUAL (NBUTLAST (LIST* 1 2 3 4 5 6) 6) (QUOTE NIL))
352 Pass: (EQUAL (NBUTLAST (LIST* 1 2 3 4 5 6) 7) (QUOTE NIL))
353 Pass: (LET* ((A (QUOTE (1 2 3 4 5))) (B (NBUTLAST A 3))) (AND (EQ A B) (EQUAL A (QUOTE (1 2)))))
354 Pass: (LET ((X (QUOTE (0 1 2 3 4 5 6 7 8 9)))) (EQ (LAST X) (NTHCDR 9 X)))
355 Pass: (NULL (LAST NIL))
356 Pass: (LET ((X (QUOTE (0 1 . 2)))) (EQ (LAST X) (CDR X)))
357 Pass: (EQL (LAST (QUOTE (1 . 2)) 0) 2)
358 Pass: (LET ((X (QUOTE (0 1 2 3 4)))) (EQ (LAST X 0) NIL))
359 Pass: (LET ((X (QUOTE (0 1 2 3 4)))) (EQ (LAST X) (NTHCDR 4 X)))
360 Pass: (LET ((X (QUOTE (0 1 2 3 4)))) (EQ (LAST X 1) (NTHCDR 4 X)))
361 Pass: (LET ((X (QUOTE (0 1 2 3 4)))) (EQ (LAST X 2) (CDDDR X)))
362 Pass: (LET ((X (QUOTE (0 1 2 3 4)))) (EQ (LAST X 3) (CDDR X)))
363 Pass: (LET ((X (QUOTE (0 1 2 3 4)))) (EQ (LAST X 4) (CDR X)))
364 Pass: (LET ((X (QUOTE (0 1 2 3 4)))) (EQ (LAST X 5) X))
365 Pass: (LET ((X (QUOTE (0 1 2 3 4)))) (EQ (LAST X 6) X))
366 Pass: (LET ((X (QUOTE (0 1 2 3 4)))) (EQ (LAST X 7) X))
367 Pass: (LET ((X (QUOTE (0 1 2 3 4)))) (EQ (LAST X 8) X))
368 Pass: (TAILP (QUOTE NIL) (QUOTE NIL))
369 Pass: (TAILP (QUOTE NIL) (QUOTE (1)))
370 Pass: (TAILP (QUOTE NIL) (QUOTE (1 2 3 4 5 6 7 8 9)))
371 Pass: (LET ((X (QUOTE (1 2 3)))) (AND (TAILP X X) (TAILP (CDR X) X) (TAILP (CDDR X) X) (TAILP (CDDDR X) X)))
372 Pass: (LET ((X (QUOTE (1 . 2)))) (AND (TAILP X X) (TAILP (CDR X) X)))
373 Pass: (NOT (TAILP NIL (QUOTE (1 . 2))))
374 Pass: (NOT (TAILP (QUOTE X) (QUOTE (1 2 3 4 5 6))))
375 Pass: (NOT (TAILP (LIST 1 2 3) (QUOTE (1 2 3))))
376 Pass: (LET ((X (QUOTE (1 2 3 4 5 . 6)))) (TAILP (LAST X) X))
377 Pass: (LET ((X (QUOTE (1 2 3 4 5 . 6)))) (TAILP (LAST X) X))
378 Pass: (NULL (LDIFF (QUOTE NIL) (QUOTE NIL)))
379 Pass: (EQUAL (LDIFF (QUOTE (1 . 2)) 2) (QUOTE (1)))
380 Pass: (EQUAL (LDIFF (QUOTE (1 2 3 4 5 6 7 8 9)) (QUOTE NIL)) (QUOTE (1 2 3 4 5 6 7 8 9)))
381 Pass: (LET ((X (QUOTE (1 2 3)))) (AND (NULL (LDIFF X X)) (EQUAL (LDIFF X (CDR X)) (QUOTE (1))) (EQUAL (LDIFF X (CDDR X)) (QUOTE (1 2))) (EQUAL (LDIFF X (CDDDR X)) (QUOTE (1 2 3)))))
382 Pass: (LET* ((X (QUOTE (1 2 3))) (Y (QUOTE (A B C))) (Z (LDIFF X Y))) (AND (NOT (EQ X Z)) (EQUAL Z (QUOTE (1 2 3)))))
383 Pass: (EQUAL (MEMBER (QUOTE A) (QUOTE (A B C D))) (QUOTE (A B C D)))
384 Pass: (EQUAL (MEMBER (QUOTE B) (QUOTE (A B C D))) (QUOTE (B C D)))
385 Pass: (EQUAL (MEMBER (QUOTE C) (QUOTE (A B C D))) (QUOTE (C D)))
386 Pass: (EQUAL (MEMBER (QUOTE D) (QUOTE (A B C D))) (QUOTE (D)))
387 Pass: (EQUAL (MEMBER (QUOTE E) (QUOTE (A B C D))) (QUOTE NIL))
388 Pass: (EQUAL (MEMBER (QUOTE F) (QUOTE (A B C D))) (QUOTE NIL))
389 Pass: (LET ((X (QUOTE (A B C D)))) (EQ (MEMBER (QUOTE A) X) X) (EQ (MEMBER (QUOTE B) X) (CDR X)) (EQ (MEMBER (QUOTE C) X) (CDDR X)) (EQ (MEMBER (QUOTE D) X) (CDDDR X)) (EQ (MEMBER (QUOTE E) X) NIL))
390 Pass: (EQUAL (MEMBER (QUOTE A) (QUOTE (A B C D)) :TEST (FUNCTION EQ)) (QUOTE (A B C D)))
391 Pass: (EQUAL (MEMBER (QUOTE B) (QUOTE (A B C D)) :TEST (FUNCTION EQ)) (QUOTE (B C D)))
392 Pass: (EQUAL (MEMBER (QUOTE C) (QUOTE (A B C D)) :TEST (FUNCTION EQ)) (QUOTE (C D)))
393 Pass: (EQUAL (MEMBER (QUOTE D) (QUOTE (A B C D)) :TEST (FUNCTION EQ)) (QUOTE (D)))
394 Pass: (EQUAL (MEMBER (QUOTE E) (QUOTE (A B C D)) :TEST (FUNCTION EQ)) (QUOTE NIL))
395 Pass: (EQUAL (MEMBER (QUOTE F) (QUOTE (A B C D)) :TEST (FUNCTION EQ)) (QUOTE NIL))
396 Pass: (NULL (MEMBER (QUOTE A) (QUOTE NIL)))
397 Pass: (LET* ((X (QUOTE ((1 . A) (2 . B) (3 . C) (4 . D) (5 . E)))) (Y (MEMBER (QUOTE D) X :KEY (FUNCTION CDR) :TEST (FUNCTION EQ)))) (AND (EQUAL Y (QUOTE ((4 . D) (5 . E)))) (EQ Y (NTHCDR 3 X))))
398 Pass: (LET* ((X (QUOTE ((1 . A) (2 . B) (3 . C) (4 . D) (5 . E)))) (Y (MEMBER (QUOTE D) X :KEY (FUNCTION CDR)))) (AND (EQUAL Y (QUOTE ((4 . D) (5 . E)))) (EQ Y (NTHCDR 3 X))))
399 Pass: (LET* ((X (QUOTE ((1 . A) (2 . B) (3 . C) (4 . D) (5 . E)))) (Y (MEMBER (QUOTE D) X :KEY (FUNCTION CDR) :TEST-NOT (COMPLEMENT (FUNCTION EQ))))) (AND (EQUAL Y (QUOTE ((4 . D) (5 . E)))) (EQ Y (NTHCDR 3 X))))
400 Pass: (LET* ((X (QUOTE ((1 . A) (2 . B) (3 . C) (4 . D) (5 . E)))) (Y (MEMBER (QUOTE D) X :TEST-NOT (COMPLEMENT (FUNCTION EQ))))) (EQ Y NIL))
401 Pass: (EQUAL (MEMBER 2 (QUOTE ((1 . 2) (3 . 4))) :TEST-NOT (FUNCTION =) :KEY (FUNCTION CDR)) (QUOTE ((3 . 4))))
402 Pass: (EQUAL (MEMBER-IF (FUNCTION (LAMBDA (X) (EQL X (QUOTE A)))) (QUOTE (A B C D))) (QUOTE (A B C D)))
403 Pass: (EQUAL (MEMBER-IF (FUNCTION (LAMBDA (X) (EQL X (QUOTE B)))) (QUOTE (A B C D))) (QUOTE (B C D)))
404 Pass: (EQUAL (MEMBER-IF (FUNCTION (LAMBDA (X) (EQL X (QUOTE C)))) (QUOTE (A B C D))) (QUOTE (C D)))
405 Pass: (EQUAL (MEMBER-IF (FUNCTION (LAMBDA (X) (EQL X (QUOTE D)))) (QUOTE (A B C D))) (QUOTE (D)))
406 Pass: (EQUAL (MEMBER-IF (FUNCTION (LAMBDA (X) (EQL X (QUOTE E)))) (QUOTE (A B C D))) (QUOTE NIL))
407 Pass: (EQUAL (MEMBER-IF (FUNCTION (LAMBDA (X) (EQL X (QUOTE F)))) (QUOTE (A B C D))) (QUOTE NIL))
408 Pass: (NULL (MEMBER-IF (FUNCTION (LAMBDA (X) (EQL X (QUOTE A)))) (QUOTE NIL)))
409 Pass: (LET* ((X (QUOTE ((1 . A) (2 . B) (3 . C) (4 . D) (5 . E)))) (Y (MEMBER-IF (FUNCTION (LAMBDA (P) (EQ P (QUOTE D)))) X :KEY (FUNCTION CDR)))) (AND (EQUAL Y (QUOTE ((4 . D) (5 . E)))) (EQ Y (NTHCDR 3 X))))
410 Pass: (EQUAL (MEMBER-IF (FUNCTION CDR) (QUOTE ((1) (2 . 2) (3 3 . 3)))) (QUOTE ((2 . 2) (3 3 . 3))))
411 Pass: (NULL (MEMBER-IF (FUNCTION ZEROP) (QUOTE (7 8 9))))
412 Pass: (EQUAL (MEMBER-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQL X (QUOTE A))))) (QUOTE (A B C D))) (QUOTE (A B C D)))
413 Pass: (EQUAL (MEMBER-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQL X (QUOTE B))))) (QUOTE (A B C D))) (QUOTE (B C D)))
414 Pass: (EQUAL (MEMBER-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQL X (QUOTE C))))) (QUOTE (A B C D))) (QUOTE (C D)))
415 Pass: (EQUAL (MEMBER-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQL X (QUOTE D))))) (QUOTE (A B C D))) (QUOTE (D)))
416 Pass: (EQUAL (MEMBER-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQL X (QUOTE E))))) (QUOTE (A B C D))) (QUOTE NIL))
417 Pass: (EQUAL (MEMBER-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQL X (QUOTE F))))) (QUOTE (A B C D))) (QUOTE NIL))
418 Pass: (NULL (MEMBER-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQL X (QUOTE A))))) (QUOTE NIL)))
419 Pass: (LET* ((X (QUOTE ((1 . A) (2 . B) (3 . C) (4 . D) (5 . E)))) (Y (MEMBER-IF-NOT (FUNCTION (LAMBDA (P) (NOT (EQ P (QUOTE D))))) X :KEY (FUNCTION CDR)))) (AND (EQUAL Y (QUOTE ((4 . D) (5 . E)))) (EQ Y (NTHCDR 3 X))))
420 Pass: (LET ((X (QUOTE ((1 2) (2 3) (3 4) (4 5)))) (Y NIL)) (AND (EQ (MAPC (FUNCTION (LAMBDA (A) (PUSH (CAR A) Y))) X) X) (EQUAL Y (QUOTE (4 3 2 1)))))
421 Pass: (LET ((DUMMY NIL) (LIST-1 (QUOTE (1 2 3 4)))) (AND (EQ (MAPC (FUNCTION (LAMBDA (&REST X) (SETQ DUMMY (APPEND DUMMY X)))) LIST-1 (QUOTE (A B C D E)) (QUOTE (X Y Z))) LIST-1) (EQUAL DUMMY (QUOTE (1 A X 2 B Y 3 C Z)))))
422 Pass: (LET* ((X (QUOTE (0 1 2 3))) (Y NIL) (Z (MAPC (FUNCTION (LAMBDA (A B C) (PUSH (LIST A B C) Y))) X (QUOTE (1 2 3 4)) (QUOTE (2 3 4 5))))) (AND (EQ Z X) (EQUAL Y (QUOTE ((3 4 5) (2 3 4) (1 2 3) (0 1 2))))))
423 Pass: (LET* ((X (QUOTE (0 1 2 3))) (Y NIL) (Z (MAPC (FUNCTION (LAMBDA (A B C) (PUSH (LIST A B C) Y))) NIL X (QUOTE (1 2 3 4)) (QUOTE (2 3 4 5))))) (AND (NULL Z) (NULL Y)))
424 Pass: (LET ((SUM 0)) (MAPC (FUNCTION (LAMBDA (&REST REST) (SETQ SUM (+ SUM (APPLY (FUNCTION +) REST))))) (QUOTE (0 1 2)) (QUOTE (1 2 0)) (QUOTE (2 0 1))) (EQL SUM 9))
425 Pass: (LET ((RESULT (QUOTE INITIAL-VALUE)) (LIST-1 NIL)) (AND (EQ (MAPC (FUNCTION (LAMBDA (A B) (SETQ RESULT (CONS (CONS A B) RESULT)))) LIST-1) LIST-1) (EQ RESULT (QUOTE INITIAL-VALUE))))
426 Pass: (LET ((RESULT (QUOTE INITIAL-VALUE)) (LIST-1 NIL)) (AND (EQ (MAPC (FUNCTION (LAMBDA (A B) (SETQ RESULT (CONS (CONS A B) RESULT)))) LIST-1 (QUOTE (1 2 3))) LIST-1) (EQ RESULT (QUOTE INITIAL-VALUE))))
427 Pass: (LET ((RESULT (QUOTE INITIAL-VALUE)) (LIST-1 (QUOTE (1 2 3)))) (AND (EQ (MAPC (FUNCTION (LAMBDA (A B) (SETQ RESULT (CONS (CONS A B) RESULT)))) LIST-1 (QUOTE NIL)) LIST-1) (EQ RESULT (QUOTE INITIAL-VALUE))))
428 Pass: (EQUAL (MAPCAR (FUNCTION CAR) (QUOTE ((1 2) (2 3) (3 4) (4 5)))) (QUOTE (1 2 3 4)))
429 Pass: (NULL (MAPCAR (FUNCTION IDENTITY) (QUOTE NIL)))
430 Pass: (EQUAL (MAPCAR (FUNCTION LIST) (QUOTE (0 1 2 3)) (QUOTE (A B C D)) (QUOTE (W X Y Z))) (QUOTE ((0 A W) (1 B X) (2 C Y) (3 D Z))))
431 Pass: (NULL (MAPCAR (FUNCTION LIST) (QUOTE NIL) (QUOTE (0 1 2 3)) (QUOTE (1 2 3 4)) (QUOTE (2 3 4 5))))
432 Pass: (NULL (MAPCAR (FUNCTION LIST) (QUOTE (0 1 2 3)) (QUOTE NIL) (QUOTE (1 2 3 4)) (QUOTE (2 3 4 5))))
433 Pass: (NULL (MAPCAR (FUNCTION LIST) (QUOTE (0 1 2 3)) (QUOTE (1 2 3 4)) (QUOTE NIL) (QUOTE (2 3 4 5))))
434 Pass: (NULL (MAPCAR (FUNCTION LIST) (QUOTE (0 1 2 3)) (QUOTE (1 2 3 4)) (QUOTE (2 3 4 5)) (QUOTE NIL)))
435 Pass: (EQUAL (MAPCAR (FUNCTION LIST) (QUOTE (0)) (QUOTE (A B)) (QUOTE (X Y Z))) (QUOTE ((0 A X))))
436 Pass: (EQUAL (MAPCAR (FUNCTION LIST) (QUOTE (A B)) (QUOTE (0)) (QUOTE (X Y Z))) (QUOTE ((A 0 X))))
437 Pass: (EQUAL (MAPCAR (FUNCTION LIST) (QUOTE (A B)) (QUOTE (X Y Z)) (QUOTE (0))) (QUOTE ((A X 0))))
438 Pass: (EQUAL (MAPCAR (FUNCTION CONS) (QUOTE (A B C)) (QUOTE (1 2 3))) (QUOTE ((A . 1) (B . 2) (C . 3))))
439 Pass: (EQUAL (MAPCAN (FUNCTION CDR) (COPY-TREE (QUOTE ((1 2) (2 3) (3 4) (4 5))))) (QUOTE (2 3 4 5)))
440 Pass: (EQUAL (MAPCAN (FUNCTION APPEND) (QUOTE ((1 2 3) (4 5 6) (7 8 9))) (QUOTE ((A) (B C) (D E F))) (LIST (LIST (QUOTE X) (QUOTE Y) (QUOTE Z)) (LIST (QUOTE Y) (QUOTE Z)) (LIST (QUOTE Z)))) (QUOTE (1 2 3 A X Y Z 4 5 6 B C Y Z 7 8 9 D E F Z)))
441 Pass: (NULL (MAPCAN (FUNCTION APPEND) (QUOTE ((1 2 3) (4 5 6) (7 8 9))) (QUOTE ((A) (B C))) (QUOTE NIL)))
442 Pass: (NULL (MAPCAN (FUNCTION APPEND) (QUOTE ((1 2 3) (4 5 6) (7 8 9))) (QUOTE NIL) (QUOTE ((A) (B C)))))
443 Pass: (NULL (MAPCAN (FUNCTION APPEND) (QUOTE NIL) (QUOTE ((1 2 3) (4 5 6) (7 8 9))) (QUOTE ((A) (B C)))))
444 Pass: (EQUAL (MAPCAN (FUNCTION LIST) (LIST 1 2 3 4 5) (LIST 2 3 4 5 6) (LIST 3 4 5 6 7) (LIST 4 5 6 7 8)) (QUOTE (1 2 3 4 2 3 4 5 3 4 5 6 4 5 6 7 5 6 7 8)))
445 Pass: (EQUAL (MAPCAN (FUNCTION (LAMBDA (X Y) (IF (NULL X) NIL (LIST X Y)))) (QUOTE (NIL NIL NIL D E)) (QUOTE (1 2 3 4 5 6))) (QUOTE (D 4 E 5)))
446 Pass: (EQUAL (MAPCAN (FUNCTION (LAMBDA (X) (AND (NUMBERP X) (LIST X)))) (QUOTE (A 1 B C 3 4 D 5))) (QUOTE (1 3 4 5)))
447 Pass: (EQUAL (MAPLIST (FUNCTION IDENTITY) (QUOTE (A B C D))) (QUOTE ((A B C D) (B C D) (C D) (D))))
448 Pass: (EQUAL (MAPLIST (FUNCTION CAR) (QUOTE ((1 2) (2 3) (3 4) (4 5)))) (QUOTE ((1 2) (2 3) (3 4) (4 5))))
449 Pass: (EQUAL (MAPLIST (FUNCTION LIST) (QUOTE (A B C)) (QUOTE (B C D)) (QUOTE (C D E))) (QUOTE (((A B C) (B C D) (C D E)) ((B C) (C D) (D E)) ((C) (D) (E)))))
450 Pass: (EQUAL (MAPLIST (FUNCTION APPEND) (QUOTE (A B C)) (QUOTE (B C D)) (QUOTE (C D E))) (QUOTE ((A B C B C D C D E) (B C C D D E) (C D E))))
451 Pass: (EQUAL (MAPLIST (FUNCTION APPEND) (QUOTE (A B C)) (QUOTE (B C)) (QUOTE (C))) (QUOTE ((A B C B C C))))
452 Pass: (NULL (MAPLIST (FUNCTION APPEND) (QUOTE NIL) (QUOTE (A B C)) (QUOTE (B C)) (QUOTE (C))))
453 Pass: (NULL (MAPLIST (FUNCTION APPEND) (QUOTE (A B C)) (QUOTE NIL) (QUOTE (B C)) (QUOTE (C))))
454 Pass: (NULL (MAPLIST (FUNCTION APPEND) (QUOTE (A B C)) (QUOTE (B C)) (QUOTE (C)) (QUOTE NIL)))
455 Pass: (LET ((X (QUOTE ((1 2) (2 3) (3 4) (4 5)))) (Y NIL)) (AND (EQ (MAPL (FUNCTION (LAMBDA (A) (PUSH (CAR A) Y))) X) X) (EQUAL Y (QUOTE ((4 5) (3 4) (2 3) (1 2))))))
456 Pass: (LET ((X NIL)) (AND (NULL (MAPL (FUNCTION (LAMBDA (&REST REST) (PUSH REST X))) (QUOTE NIL) (QUOTE (0)) (QUOTE (0 1)))) (NULL X)))
457 Pass: (LET ((X NIL)) (AND (EQUAL (MAPL (FUNCTION (LAMBDA (&REST REST) (PUSH REST X))) (QUOTE (0)) (QUOTE NIL) (QUOTE (0 1))) (QUOTE (0))) (NULL X)))
458 Pass: (LET ((X NIL)) (AND (EQUAL (MAPL (FUNCTION (LAMBDA (&REST REST) (PUSH REST X))) (QUOTE (0)) (QUOTE (0 1)) (QUOTE NIL)) (QUOTE (0))) (NULL X)))
459 Pass: (EQUAL (MAPCON (FUNCTION CAR) (COPY-TREE (QUOTE ((1 2) (2 3) (3 4) (4 5))))) (QUOTE (1 2 2 3 3 4 4 5)))
460 Pass: (EQUAL (MAPCON (FUNCTION LIST) (QUOTE (0 1 2 3)) (QUOTE (1 2 3 4)) (QUOTE (2 3 4 5)) (QUOTE (3 4 5 6))) (QUOTE ((0 1 2 3) (1 2 3 4) (2 3 4 5) (3 4 5 6) (1 2 3) (2 3 4) (3 4 5) (4 5 6) (2 3) (3 4) (4 5) (5 6) (3) (4) (5) (6))))
461 Pass: (NULL (MAPCON (FUNCTION LIST) (QUOTE NIL) (QUOTE (0 1 2 3)) (QUOTE (1 2 3 4)) (QUOTE (2 3 4 5)) (QUOTE (3 4 5 6))))
462 Pass: (NULL (MAPCON (FUNCTION LIST) (QUOTE (0 1 2 3)) (QUOTE NIL) (QUOTE (1 2 3 4)) (QUOTE (2 3 4 5)) (QUOTE (3 4 5 6))))
463 Pass: (NULL (MAPCON (FUNCTION LIST) (QUOTE (0 1 2 3)) (QUOTE (1 2 3 4)) (QUOTE NIL) (QUOTE (2 3 4 5)) (QUOTE (3 4 5 6))))
464 Pass: (NULL (MAPCON (FUNCTION LIST) (QUOTE (0 1 2 3)) (QUOTE (1 2 3 4)) (QUOTE (2 3 4 5)) (QUOTE NIL) (QUOTE (3 4 5 6))))
465 Pass: (NULL (MAPCON (FUNCTION LIST) (QUOTE (0 1 2 3)) (QUOTE (1 2 3 4)) (QUOTE (2 3 4 5)) (QUOTE (3 4 5 6)) (QUOTE NIL)))
466 Pass: (LET* ((X (QUOTE ((APPLE . 1) (ORANGE . 2) (GRAPES . 3)))) (Y (ACONS (QUOTE PLUM) 9 X))) (AND (EQUAL Y (QUOTE ((PLUM . 9) (APPLE . 1) (ORANGE . 2) (GRAPES . 3)))) (EQ X (CDR Y))))
467 Pass: (EQUAL (ACONS (QUOTE A) (QUOTE 0) NIL) (QUOTE ((A . 0))))
468 Pass: (EQUAL (ACONS (QUOTE APPLE) 1 (ACONS (QUOTE ORANGE) 2 (ACONS (QUOTE GRAPES) (QUOTE 3) NIL))) (QUOTE ((APPLE . 1) (ORANGE . 2) (GRAPES . 3))))
469 Pass: (EQUAL (ACONS NIL NIL NIL) (QUOTE ((NIL))))
470 Pass: (LET ((ALIST (QUOTE ((X . 100) (Y . 200) (Z . 50))))) (EQ (ASSOC (QUOTE Y) ALIST) (CADR ALIST)))
471 Pass: (NULL (ASSOC (QUOTE NO-SUCH-KEY) (QUOTE ((X . 100) (Y . 200) (Z . 50)))))
472 Pass: (LET ((ALIST (QUOTE ((X . 100) (Y . 200) (Z . 50))))) (EQ (ASSOC (QUOTE Y) ALIST :TEST (FUNCTION EQ)) (CADR ALIST)))
473 Pass: (NULL (ASSOC (QUOTE KEY) (QUOTE NIL)))
474 Pass: (NULL (ASSOC (QUOTE NIL) (QUOTE (NIL))))
475 Pass: (NULL (ASSOC (QUOTE NIL) (QUOTE (NIL NIL))))
476 Pass: (LET ((ALIST (QUOTE (NIL NIL NIL (X . 100) (Y . 200) (Z . 50))))) (EQ (ASSOC (QUOTE Y) ALIST) (CAR (CDDDDR ALIST))))
477 Pass: (LET ((ALIST (QUOTE ((1 . A) NIL (2 . B) (NIL))))) (EQ (ASSOC (QUOTE NIL) ALIST) (CADDDR ALIST)))
478 Pass: (LET ((ALIST (QUOTE ((X . 100) (Y . 200) (X . 100) (Z . 50))))) (EQ (ASSOC (QUOTE Y) ALIST) (CADR ALIST)))
479 Pass: (LET ((ALIST (QUOTE ((A . 1) (B . 2) (C . 3) (D . 4))))) (EQ (ASSOC (QUOTE A) ALIST :TEST-NOT (COMPLEMENT (FUNCTION EQ))) (CAR ALIST)))
480 Pass: (LET ((ALIST (QUOTE ((A . 1) (B . 2) (C . 3) (D . 4))))) (NULL (ASSOC (QUOTE Z) ALIST :TEST-NOT (COMPLEMENT (FUNCTION EQ)))))
481 Pass: (LET ((ALIST (QUOTE (((A AA AAA)) ((B BB BBB)) ((C CC CCC)) ((D DD DDD)))))) (EQ (ASSOC (QUOTE AA) ALIST :KEY (FUNCTION CADR) :TEST (FUNCTION EQ)) (CAR ALIST)))
482 Pass: (LET ((ALIST (QUOTE (((A AA AAA)) ((B BB BBB)) ((C CC CCC)) ((D DD DDD)))))) (EQ (ASSOC (QUOTE BB) ALIST :KEY (FUNCTION CADR) :TEST (FUNCTION EQ)) (CADR ALIST)))
483 Pass: (LET ((ALIST (QUOTE (((A AA AAA)) ((B BB BBB)) ((C CC CCC)) ((D DD DDD)))))) (EQ (ASSOC (QUOTE CC) ALIST :KEY (FUNCTION CADR) :TEST (FUNCTION EQ)) (CADDR ALIST)))
484 Pass: (LET ((ALIST (QUOTE (((A AA AAA)) ((B BB BBB)) ((C CC CCC)) ((D DD DDD)))))) (EQ (ASSOC (QUOTE DD) ALIST :KEY (FUNCTION CADR) :TEST (FUNCTION EQ)) (CADDDR ALIST)))
485 Pass: (LET ((ALIST (QUOTE (((A AA AAA)) ((B BB BBB)) ((C CC CCC)) ((D DD DDD)))))) (NULL (ASSOC (QUOTE EE) ALIST :KEY (FUNCTION CADR) :TEST (FUNCTION EQ))))
486 Pass: (LET ((ALIST (QUOTE (((A AA AAA)) NIL ((B BB BBB)) ((C CC CCC)) ((D DD DDD)))))) (EQ (ASSOC (QUOTE DD) ALIST :KEY (FUNCTION CADR) :TEST (FUNCTION EQ)) (CAR (CDDDDR ALIST))))
487 Pass: (LET ((ALIST (QUOTE (((A AA AAA)) ((B BB BBB)) NIL ((C CC CCC)) ((D DD DDD)))))) (EQ (ASSOC (QUOTE DD) ALIST :KEY (FUNCTION CADR) :TEST (FUNCTION EQ)) (CAR (CDDDDR ALIST))))
488 Pass: (LET ((ALIST (QUOTE (((A AA AAA)) NIL ((B BB BBB)) ((C CC CCC)) ((D DD DDD)))))) (EQ (ASSOC (QUOTE DD) ALIST :KEY (FUNCTION CADR) :TEST (FUNCTION EQ)) (CAR (CDDDDR ALIST))))
489 Pass: (LET ((ALIST (QUOTE (((A AA AAA)) ((B BB BBB)) ((C CC CCC)) ((D DD DDD)) NIL)))) (EQ (ASSOC (QUOTE DD) ALIST :KEY (FUNCTION CADR) :TEST (FUNCTION EQ)) (CADDDR ALIST)))
490 Pass: (LET ((ALIST (QUOTE ((X . 100) (Y . 200) (Z . 50))))) (EQ (ASSOC-IF (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE Y)))) ALIST) (CADR ALIST)))
491 Pass: (NULL (ASSOC-IF (FUNCTION CONSP) (QUOTE ((X . 100) (Y . 200) (Z . 50)))))
492 Pass: (NULL (ASSOC-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE KEY)))) (QUOTE NIL)))
493 Pass: (NULL (ASSOC-IF (FUNCTION IDENTITY) (QUOTE (NIL))))
494 Pass: (NULL (ASSOC-IF (FUNCTION IDENTITY) (QUOTE (NIL NIL))))
495 Pass: (LET ((ALIST (QUOTE (NIL NIL NIL (X . 100) (Y . 200) (Z . 50))))) (EQ (ASSOC-IF (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE Y)))) ALIST) (CAR (CDDDDR ALIST))))
496 Pass: (LET ((ALIST (QUOTE ((1 . A) NIL (2 . B) (NIL))))) (EQ (ASSOC-IF (FUNCTION (LAMBDA (ARG) (NULL ARG))) ALIST) (CADDDR ALIST)))
497 Pass: (LET ((ALIST (QUOTE (((A AA AAA)) ((B BB BBB)) ((C CC CCC)) ((D DD DDD)))))) (EQ (ASSOC-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE AA)))) ALIST :KEY (FUNCTION CADR)) (CAR ALIST)))
498 Pass: (LET ((ALIST (QUOTE (((A AA AAA)) ((B BB BBB)) ((C CC CCC)) ((D DD DDD)))))) (EQ (ASSOC-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE BB)))) ALIST :KEY (FUNCTION CADR)) (CADR ALIST)))
499 Pass: (LET ((ALIST (QUOTE (((A AA AAA)) ((B BB BBB)) ((C CC CCC)) ((D DD DDD)))))) (NULL (ASSOC-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE EE)))) ALIST :KEY (FUNCTION CADR))))
500 Pass: (LET ((ALIST (QUOTE ((X . 100) (Y . 200) (Z . 50))))) (EQ (ASSOC-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE Y))))) ALIST) (CADR ALIST)))
501 Pass: (NULL (ASSOC-IF-NOT (COMPLEMENT (FUNCTION CONSP)) (QUOTE ((X . 100) (Y . 200) (Z . 50)))))
502 Pass: (NULL (ASSOC-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE KEY))))) (QUOTE NIL)))
503 Pass: (NULL (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE (NIL))))
504 Pass: (NULL (ASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE (NIL NIL))))
505 Pass: (LET ((ALIST (QUOTE (NIL NIL NIL (X . 100) (Y . 200) (Z . 50))))) (EQ (ASSOC-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE Y))))) ALIST) (CAR (CDDDDR ALIST))))
506 Pass: (LET ((ALIST (QUOTE ((1 . A) NIL (2 . B) (NIL))))) (EQ (ASSOC-IF-NOT (FUNCTION IDENTITY) ALIST) (CADDDR ALIST)))
507 Pass: (LET ((ALIST (QUOTE (((A AA AAA)) ((B BB BBB)) ((C CC CCC)) ((D DD DDD)))))) (EQ (ASSOC-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE AA))))) ALIST :KEY (FUNCTION CADR)) (CAR ALIST)))
508 Pass: (LET ((ALIST (QUOTE (((A AA AAA)) ((B BB BBB)) ((C CC CCC)) ((D DD DDD)))))) (EQ (ASSOC-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE BB))))) ALIST :KEY (FUNCTION CADR)) (CADR ALIST)))
509 Pass: (LET ((ALIST (QUOTE (((A AA AAA)) ((B BB BBB)) ((C CC CCC)) ((D DD DDD)))))) (NULL (ASSOC-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE EE))))) ALIST :KEY (FUNCTION CADR))))
510 Pass: (EQUAL (COPY-ALIST (QUOTE ((A . 10) (B . 100) (C . 1000)))) (QUOTE ((A . 10) (B . 100) (C . 1000))))
511 Pass: (LET* ((ALIST (QUOTE ((A . 10) (B . 100) (C . 1000)))) (COPY (COPY-ALIST ALIST))) (AND (NOT (EQ ALIST COPY)) (NOT (EQ (CDR ALIST) (CDR COPY))) (NOT (EQ (CDDR ALIST) (CDDR COPY))) (NOT (EQ (CAR ALIST) (CAR COPY))) (NOT (EQ (CADR ALIST) (CADR COPY))) (NOT (EQ (CADDR ALIST) (CADDR COPY)))))
512 Pass: (LET* ((ALIST (QUOTE ((A 10 X) (B 100 Y) (C 1000 Z)))) (COPY (COPY-ALIST ALIST))) (AND (NOT (EQ ALIST COPY)) (NOT (EQ (CDR ALIST) (CDR COPY))) (NOT (EQ (CDDR ALIST) (CDDR COPY))) (NOT (EQ (CAR ALIST) (CAR COPY))) (NOT (EQ (CADR ALIST) (CADR COPY))) (NOT (EQ (CADDR ALIST) (CADDR COPY))) (EQ (CDAR ALIST) (CDAR COPY)) (EQ (CDADR ALIST) (CDADR COPY)) (EQ (CDADDR ALIST) (CDADDR COPY))))
513 Pass: (LET* ((ALIST (PAIRLIS (QUOTE (X Y Z)) (QUOTE (XX YY ZZ)) (QUOTE ((A . AA) (B . BB)))))) (AND (EQUAL (ASSOC (QUOTE X) ALIST) (QUOTE (X . XX))) (EQUAL (ASSOC (QUOTE Y) ALIST) (QUOTE (Y . YY))) (EQUAL (ASSOC (QUOTE Z) ALIST) (QUOTE (Z . ZZ))) (EQUAL (ASSOC (QUOTE A) ALIST) (QUOTE (A . AA))) (EQUAL (ASSOC (QUOTE B) ALIST) (QUOTE (B . BB))) (NULL (ASSOC (QUOTE KEY) ALIST))))
514 Pass: (LET* ((ALIST (PAIRLIS (QUOTE (X Y Z)) (QUOTE (XX YY ZZ))))) (AND (EQUAL (ASSOC (QUOTE X) ALIST) (QUOTE (X . XX))) (EQUAL (ASSOC (QUOTE Y) ALIST) (QUOTE (Y . YY))) (EQUAL (ASSOC (QUOTE Z) ALIST) (QUOTE (Z . ZZ))) (NULL (ASSOC (QUOTE KEY) ALIST))))
515 Pass: (LET ((ALIST (QUOTE ((X . 100) (Y . 200) (Z . 50))))) (EQ (RASSOC (QUOTE 200) ALIST) (CADR ALIST)))
516 Pass: (NULL (RASSOC (QUOTE NO-SUCH-DATUM) (QUOTE ((X . 100) (Y . 200) (Z . 50)))))
517 Pass: (LET ((ALIST (QUOTE ((X . 100) (Y . 200) (Z . 50))))) (EQ (RASSOC (QUOTE 200) ALIST :TEST (FUNCTION =)) (CADR ALIST)))
518 Pass: (NULL (RASSOC (QUOTE KEY) (QUOTE NIL)))
519 Pass: (NULL (RASSOC (QUOTE NIL) (QUOTE (NIL))))
520 Pass: (NULL (RASSOC (QUOTE NIL) (QUOTE (NIL NIL))))
521 Pass: (LET ((ALIST (QUOTE (NIL NIL NIL (X . 100) (Y . 200) (Z . 50))))) (EQ (RASSOC (QUOTE 200) ALIST) (CAR (CDDDDR ALIST))))
522 Pass: (LET ((ALIST (QUOTE ((1 . A) NIL (2 . B) (NIL))))) (EQ (RASSOC (QUOTE NIL) ALIST) (CADDDR ALIST)))
523 Pass: (LET ((ALIST (QUOTE ((X . 100) (Y . 200) (X . 100) (Z . 50))))) (EQ (RASSOC (QUOTE 200) ALIST) (CADR ALIST)))
524 Pass: (LET ((ALIST (QUOTE ((A . 1) (B . 2) (C . 3) (D . 4))))) (EQ (RASSOC (QUOTE 1) ALIST :TEST-NOT (COMPLEMENT (FUNCTION =))) (CAR ALIST)))
525 Pass: (LET ((ALIST (QUOTE ((A . 1) (B . 2) (C . 3) (D . 4))))) (NULL (RASSOC (QUOTE 9) ALIST :TEST-NOT (COMPLEMENT (FUNCTION =)))))
526 Pass: (LET ((ALIST (QUOTE ((A AA AAA) (B BB BBB) (C CC CCC) (D DD DDD))))) (EQ (RASSOC (QUOTE AA) ALIST :KEY (FUNCTION CAR) :TEST (FUNCTION EQ)) (CAR ALIST)))
527 Pass: (LET ((ALIST (QUOTE ((A AA AAA) (B BB BBB) (C CC CCC) (D DD DDD))))) (EQ (RASSOC (QUOTE DDD) ALIST :KEY (FUNCTION CADR) :TEST (FUNCTION EQ)) (CADDDR ALIST)))
528 Pass: (LET ((ALIST (QUOTE ((A AA AAA) (B BB BBB) (C CC CCC) (D DD DDD))))) (NULL (RASSOC (QUOTE EEE) ALIST :KEY (FUNCTION CADR) :TEST (FUNCTION EQ))))
529 Pass: (LET ((ALIST (QUOTE ((A AA AAA) NIL (B BB BBB) (C CC CCC) (D DD DDD))))) (EQ (RASSOC (QUOTE DDD) ALIST :KEY (FUNCTION CADR) :TEST (FUNCTION EQ)) (CAR (CDDDDR ALIST))))
530 Pass: (LET ((ALIST (QUOTE ((A AA AAA) (B BB BBB) NIL (C CC CCC) (D DD DDD))))) (EQ (RASSOC (QUOTE DDD) ALIST :KEY (FUNCTION CADR) :TEST (FUNCTION EQ)) (CAR (CDDDDR ALIST))))
531 Pass: (LET ((ALIST (QUOTE ((A AA AAA) (B BB BBB) (C CC CCC) (D DD DDD) NIL)))) (EQ (RASSOC (QUOTE DDD) ALIST :KEY (FUNCTION CADR) :TEST (FUNCTION EQ)) (CAR (CDDDR ALIST))))
532 Pass: (LET ((ALIST (QUOTE ((X . 100) (Y . 200) (Z . 50))))) (EQ (RASSOC-IF (FUNCTION (LAMBDA (ARG) (= ARG 200))) ALIST) (CADR ALIST)))
533 Pass: (NULL (RASSOC-IF (FUNCTION CONSP) (QUOTE ((X . 100) (Y . 200) (Z . 50)))))
534 Pass: (NULL (RASSOC-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE KEY)))) (QUOTE NIL)))
535 Pass: (NULL (RASSOC-IF (FUNCTION IDENTITY) (QUOTE (NIL))))
536 Pass: (NULL (RASSOC-IF (FUNCTION IDENTITY) (QUOTE (NIL NIL))))
537 Pass: (LET ((ALIST (QUOTE (NIL NIL NIL (X . 100) (Y . 200) (Z . 50))))) (EQ (RASSOC-IF (FUNCTION (LAMBDA (ARG) (= ARG 200))) ALIST) (CAR (CDDDDR ALIST))))
538 Pass: (LET ((ALIST (QUOTE ((1 . A) NIL (2 . B) (NIL))))) (EQ (RASSOC-IF (FUNCTION (LAMBDA (ARG) (NULL ARG))) ALIST) (CADDDR ALIST)))
539 Pass: (LET ((ALIST (QUOTE ((A AA AAA) (B BB BBB) (C CC CCC) (D DD DDD))))) (EQ (RASSOC-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE AAA)))) ALIST :KEY (FUNCTION CADR)) (CAR ALIST)))
540 Pass: (LET ((ALIST (QUOTE ((A AA AAA) (B BB BBB) (C CC CCC) (D DD DDD))))) (EQ (RASSOC-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE BBB)))) ALIST :KEY (FUNCTION CADR)) (CADR ALIST)))
541 Pass: (LET ((ALIST (QUOTE ((A AA AAA) (B BB BBB) (C CC CCC) (D DD DDD))))) (NULL (RASSOC-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE EEE)))) ALIST :KEY (FUNCTION CADR))))
542 Pass: (LET ((ALIST (QUOTE ((X . 100) (Y . 200) (Z . 50))))) (EQ (RASSOC-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (= ARG 200)))) ALIST) (CADR ALIST)))
543 Pass: (NULL (RASSOC-IF-NOT (COMPLEMENT (FUNCTION CONSP)) (QUOTE ((X . 100) (Y . 200) (Z . 50)))))
544 Pass: (NULL (RASSOC-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE KEY))))) (QUOTE NIL)))
545 Pass: (NULL (RASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE (NIL))))
546 Pass: (NULL (RASSOC-IF-NOT (FUNCTION IDENTITY) (QUOTE (NIL NIL))))
547 Pass: (LET ((ALIST (QUOTE (NIL NIL NIL (X . 100) (Y . 200) (Z . 50))))) (EQ (RASSOC-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (= ARG 200)))) ALIST) (CAR (CDDDDR ALIST))))
548 Pass: (LET ((ALIST (QUOTE ((1 . A) NIL (2 . B) (NIL))))) (EQ (ASSOC-IF-NOT (FUNCTION IDENTITY) ALIST) (CADDDR ALIST)))
549 Pass: (LET ((ALIST (QUOTE ((A AA AAA) (B BB BBB) (C CC CCC) (D DD DDD))))) (EQ (RASSOC-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE AAA))))) ALIST :KEY (FUNCTION CADR)) (CAR ALIST)))
550 Pass: (LET ((ALIST (QUOTE ((A AA AAA) (B BB BBB) (C CC CCC) (D DD DDD))))) (EQ (RASSOC-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE BBB))))) ALIST :KEY (FUNCTION CADR)) (CADR ALIST)))
551 Pass: (LET ((ALIST (QUOTE (((A AA AAA) . 0) ((B BB BBB) . 1) ((C CC CCC) . 2))))) (EQ (RASSOC-IF-NOT (FUNCTION (LAMBDA (X) (NOT (= X (QUOTE 2))))) ALIST :KEY (FUNCTION 1+)) (CADR ALIST)))
552 Pass: (LET ((PLIST (QUOTE (PROP1 1 PROP2 2 PROP3 3 PROP4 4)))) (MULTIPLE-VALUE-BIND (INDICATOR VALUE TAIL) (GET-PROPERTIES PLIST (QUOTE (PROP3 PROP4 PROPX PROPY))) (AND (EQ INDICATOR (QUOTE PROP3)) (EQL VALUE 3) (EQ TAIL (NTHCDR 4 PLIST)))))
553 Pass: (MULTIPLE-VALUE-BIND (INDICATOR VALUE TAIL) (GET-PROPERTIES (QUOTE (PROP1 1 PROP2 2 PROP3 3 PROP4 4)) (QUOTE (PROPX PROPY PROPZ))) (AND (EQ INDICATOR NIL) (EQ VALUE NIL) (EQ TAIL NIL)))
554 Pass: (LET ((PLIST (QUOTE (PROP1 1 PROP2 2 PROP3 3 PROP4 4)))) (MULTIPLE-VALUE-BIND (INDICATOR VALUE TAIL) (GET-PROPERTIES PLIST (QUOTE (PROP1))) (AND (EQ INDICATOR (QUOTE PROP1)) (EQL VALUE 1) (EQ TAIL PLIST))))
555 Pass: (LET ((PLIST (QUOTE (PROP1 1 NIL NIL PROP2 2 PROP3 3 PROP4 4)))) (MULTIPLE-VALUE-BIND (INDICATOR VALUE TAIL) (GET-PROPERTIES PLIST (QUOTE (NIL))) (AND (EQ INDICATOR NIL) (EQL VALUE NIL) (EQ TAIL (CDDR PLIST)))))
556 Pass: (LET ((PLIST (QUOTE (PROP1 1 PROP2 2 PROP3 3 PROP4 4)))) (MULTIPLE-VALUE-BIND (INDICATOR VALUE TAIL) (GET-PROPERTIES PLIST (QUOTE (PROP3 PROP4 PROPX PROPY PROP1))) (AND (EQ INDICATOR (QUOTE PROP1)) (EQL VALUE 1) (EQ TAIL PLIST))))
557 Pass: (LET ((PLIST (QUOTE (PROP1 1 PROP2 2 PROP3 3 PROP4 4)))) (EQL (GETF PLIST (QUOTE PROP1)) 1))
558 Pass: (LET ((PLIST (QUOTE (PROP1 1 PROP2 2 PROP3 3 PROP4 4)))) (EQL (GETF PLIST (QUOTE PROP2)) 2))
559 Pass: (LET ((PLIST (QUOTE (PROP1 1 PROP2 2 PROP3 3 PROP4 4)))) (EQL (GETF PLIST (QUOTE PROP3)) 3))
560 Pass: (LET ((PLIST (QUOTE (PROP1 1 PROP2 2 PROP3 3 PROP4 4)))) (EQL (GETF PLIST (QUOTE PROP4)) 4))
561 Pass: (LET ((PLIST (QUOTE (PROP1 1 PROP2 2 PROP3 3 PROP4 4 PROP1 5 PROP2 6 PROP3 7 PROP4 8)))) (EQL (GETF PLIST (QUOTE PROP1)) 1))
562 Pass: (LET ((PLIST (QUOTE (PROP1 1 PROP2 2 PROP3 3 PROP4 4 PROP1 5 PROP2 6 PROP3 7 PROP4 8)))) (EQL (GETF PLIST (QUOTE PROP2)) 2))
563 Pass: (LET ((PLIST (QUOTE (PROP1 1 PROP2 2 PROP3 3 PROP4 4 PROP1 5 PROP2 6 PROP3 7 PROP4 8)))) (EQL (GETF PLIST (QUOTE PROP3)) 3))
564 Pass: (LET ((PLIST (QUOTE (PROP1 1 PROP2 2 PROP3 3 PROP4 4 PROP1 5 PROP2 6 PROP3 7 PROP4 8)))) (EQL (GETF PLIST (QUOTE PROP4)) 4))
565 Pass: (LET ((PLIST (QUOTE (PROP1 1 PROP2 2 PROP3 3 PROP4 4 PROP1 5 PROP2 6 PROP3 7 PROP4 8)))) (NULL (GETF PLIST (QUOTE PROPX))))
566 Pass: (LET ((PLIST (QUOTE (PROP1 1 PROP2 2 PROP3 3 PROP4 4)))) (EQ (GETF PLIST (QUOTE WEIRD-PROPERTY) (QUOTE NOT-FOUND)) (QUOTE NOT-FOUND)))
567 Pass: (LET ((PLIST (COPY-LIST (QUOTE (PROP1 1 PROP2 2 PROP3 3 PROP4 4))))) (AND (EQL (SETF (GETF PLIST (QUOTE PROP1)) 9) 9) (EQL (GETF PLIST (QUOTE PROP1)) 9)))
568 Pass: (LET ((PLIST NIL)) (AND (EQL (SETF (GETF PLIST (QUOTE PROP1)) 9) 9) (EQL (GETF PLIST (QUOTE PROP1)) 9)))
569 Pass: (LET ((PLIST (QUOTE NIL))) (INCF (GETF PLIST (QUOTE COUNT) 0)) (EQL (GETF PLIST (QUOTE COUNT)) 1))
570 Pass: (LET ((X (LIST NIL))) (AND (EQL (SETF (GETF (CAR X) (QUOTE PROP1)) 9) 9) (EQL (GETF (CAR X) (QUOTE PROP1)) 9)))
571 Pass: (LET ((PLIST (LIST (QUOTE P1) 1 (QUOTE P2) 2 (QUOTE P3) 3 (QUOTE P4) 4))) (AND (REMF PLIST (QUOTE P2)) (EQ (GETF PLIST (QUOTE P2) (QUOTE NOT-FOUND)) (QUOTE NOT-FOUND))))
572 Pass: (LET ((PLIST (LIST (QUOTE P1) 1 (QUOTE P2) 2 (QUOTE P3) 3 (QUOTE P4) 4))) (AND (REMF PLIST (QUOTE P3)) (EQ (GETF PLIST (QUOTE P3) (QUOTE NOT-FOUND)) (QUOTE NOT-FOUND))))
573 Pass: (LET ((PLIST (LIST (QUOTE P1) 1 (QUOTE P2) 2 (QUOTE P3) 3 (QUOTE P4) 4))) (AND (REMF PLIST (QUOTE P4)) (EQ (GETF PLIST (QUOTE P4) (QUOTE NOT-FOUND)) (QUOTE NOT-FOUND))))
574 Pass: (LET ((PLIST (LIST (QUOTE P1) 1 (QUOTE P2) 2 (QUOTE P3) 3 (QUOTE P4) 4))) (AND (NULL (REMF PLIST (QUOTE PX))) (EQUAL PLIST (QUOTE (P1 1 P2 2 P3 3 P4 4)))))
575 Pass: (LET ((PLIST (LIST (QUOTE P1) 1 (QUOTE P2) 2 (QUOTE P3) 3 (QUOTE P4) 4))) (AND (REMF PLIST (QUOTE P4)) (REMF PLIST (QUOTE P2)) (REMF PLIST (QUOTE P3)) (REMF PLIST (QUOTE P1)) (NULL (REMF PLIST (QUOTE PX))) (NULL (REMF PLIST (QUOTE P1))) (NULL (REMF PLIST (QUOTE P2))) (NULL (REMF PLIST (QUOTE P3))) (NULL (REMF PLIST (QUOTE P4))) (NULL PLIST)))
576 Pass: (LET ((PLIST (LIST (QUOTE P1) 1 (QUOTE P2) 2 (QUOTE P3) 3 (QUOTE P4) 4 (QUOTE P1) 5 (QUOTE P2) 6 (QUOTE P3) 7 (QUOTE P4) 8))) (AND (REMF PLIST (QUOTE P4)) (REMF PLIST (QUOTE P2)) (REMF PLIST (QUOTE P3)) (REMF PLIST (QUOTE P1)) (NULL (REMF PLIST (QUOTE PX))) (EQL (GETF PLIST (QUOTE P1)) 5) (EQL (GETF PLIST (QUOTE P2)) 6) (EQL (GETF PLIST (QUOTE P3)) 7) (EQL (GETF PLIST (QUOTE P4)) 8)))
577 Pass: (LET ((PLIST (LIST (QUOTE P1) 100 (QUOTE P1) 1 (QUOTE P2) 2 (QUOTE P3) 3 (QUOTE P4) 4))) (AND (EQL (GETF PLIST (QUOTE P1)) 100) (REMF PLIST (QUOTE P1)) (EQL (GETF PLIST (QUOTE P1)) 1) (REMF PLIST (QUOTE P1)) (NULL (GETF PLIST (QUOTE P1)))))
578 Pass: (LET ((PLIST (LIST (QUOTE P1) 1 (QUOTE P2) 2 (QUOTE P3) 3 (QUOTE P4) 4))) (AND (REMF PLIST (QUOTE P4)) (NULL (GETF PLIST (QUOTE P4)))))
579 Pass: (LET ((LIST1 (LIST 1 1 2 3 4 (QUOTE A) (QUOTE B) (QUOTE C) "A" "B" "C" "d")) (LIST2 (LIST 1 4 5 (QUOTE B) (QUOTE C) (QUOTE D) "a" "B" "c" "D"))) (NULL (SET-EXCLUSIVE-OR (INTERSECTION LIST1 LIST2) (QUOTE (C B 4 1 1)))) (NULL (SET-EXCLUSIVE-OR (INTERSECTION LIST1 LIST2 :TEST (QUOTE EQUAL)) (QUOTE ("B" C B 4 1 1)) :TEST (QUOTE EQUAL))) (NULL (SET-EXCLUSIVE-OR (INTERSECTION LIST1 LIST2 :TEST (FUNCTION EQUALP)) (QUOTE ("d" "C" "B" "A" C B 4 1 1)) :TEST (FUNCTION EQUALP))))
580 Pass: (NULL (INTERSECTION (QUOTE (0 1 2)) (QUOTE NIL)))
581 Pass: (NULL (INTERSECTION (QUOTE NIL) (QUOTE NIL)))
582 Pass: (NULL (INTERSECTION (QUOTE NIL) (QUOTE (0 1 2))))
583 Pass: (EQUAL (INTERSECTION (QUOTE (0)) (QUOTE (0))) (QUOTE (0)))
584 Pass: (EQUAL (INTERSECTION (QUOTE (0 1 2 3)) (QUOTE (2))) (QUOTE (2)))
585 Pass: (MEMBER 0 (INTERSECTION (QUOTE (0 0 0 0 0)) (QUOTE (0 1 2 3 4 5))))
586 Pass: (NULL (SET-EXCLUSIVE-OR (INTERSECTION (QUOTE (0 1 2 3 4)) (QUOTE (4 3 2 1 0))) (QUOTE (4 3 2 1 0))))
587 Pass: (NULL (SET-EXCLUSIVE-OR (INTERSECTION (QUOTE (0 1 2 3 4)) (QUOTE (0 1 2 3 4))) (QUOTE (0 1 2 3 4))))
588 Pass: (NULL (SET-EXCLUSIVE-OR (INTERSECTION (QUOTE (0 1 2 3 4)) (QUOTE (4 3 2 1 0))) (QUOTE (0 1 2 3 4))))
589 Pass: (LET ((LIST1 (LIST "A" "B" "C" "d" "e" "F" "G" "h")) (LIST2 (LIST "a" "B" "c" "D" "E" "F" "g" "h"))) (NULL (SET-EXCLUSIVE-OR (INTERSECTION LIST1 LIST2 :TEST (FUNCTION CHAR=) :KEY (FUNCTION (LAMBDA (X) (CHAR X 0)))) (QUOTE ("B" "F" "h")) :TEST (FUNCTION CHAR=) :KEY (FUNCTION (LAMBDA (X) (CHAR X 0))))))
590 Pass: (LET ((LIST1 (LIST "A" "B" "C" "d" "e" "F" "G" "h")) (LIST2 (LIST "a" "B" "c" "D" "E" "F" "g" "h"))) (NULL (SET-EXCLUSIVE-OR (INTERSECTION LIST1 LIST2 :TEST (FUNCTION CHAR-EQUAL) :KEY (FUNCTION (LAMBDA (X) (CHAR X 0)))) (QUOTE ("A" "B" "C" "d" "e" "F" "G" "h")) :TEST (FUNCTION CHAR-EQUAL) :KEY (FUNCTION (LAMBDA (X) (CHAR X 0))))))
591 Pass: (LET ((LIST1 (LIST "A" "B" "C" "d")) (LIST2 (LIST "D" "E" "F" "g" "h"))) (NULL (SET-EXCLUSIVE-OR (INTERSECTION LIST1 LIST2 :TEST (FUNCTION CHAR-EQUAL) :KEY (FUNCTION (LAMBDA (X) (CHAR X 0)))) (QUOTE ("d")) :TEST (FUNCTION CHAR-EQUAL) :KEY (FUNCTION (LAMBDA (X) (CHAR X 0))))))
592 Pass: (LET ((LIST1 (LIST 1 1 2 3 4 (QUOTE A) (QUOTE B) (QUOTE C) "A" "B" "C" "d")) (LIST2 (LIST 1 4 5 (QUOTE B) (QUOTE C) (QUOTE D) "a" "B" "c" "D"))) (NULL (SET-EXCLUSIVE-OR (NINTERSECTION (COPY-LIST LIST1) LIST2) (QUOTE (C B 4 1 1)))) (NULL (SET-EXCLUSIVE-OR (NINTERSECTION (COPY-LIST LIST1) LIST2 :TEST (QUOTE EQUAL)) (QUOTE ("B" C B 4 1 1)) :TEST (QUOTE EQUAL))) (NULL (SET-EXCLUSIVE-OR (NINTERSECTION (COPY-LIST LIST1) LIST2 :TEST (FUNCTION EQUALP)) (QUOTE ("d" "C" "B" "A" C B 4 1 1)) :TEST (FUNCTION EQUALP))))
593 Pass: (NULL (NINTERSECTION (LIST 0 1 2) (QUOTE NIL)))
594 Pass: (NULL (NINTERSECTION (QUOTE NIL) (QUOTE NIL)))
595 Pass: (NULL (NINTERSECTION (QUOTE NIL) (QUOTE (0 1 2))))
596 Pass: (EQUAL (NINTERSECTION (LIST 0) (QUOTE (0))) (QUOTE (0)))
597 Pass: (EQUAL (NINTERSECTION (LIST 0 1 2 3) (QUOTE (2))) (QUOTE (2)))
598 Pass: (MEMBER 0 (NINTERSECTION (LIST 0 0 0 0 0) (QUOTE (0 1 2 3 4 5))))
599 Pass: (NULL (SET-EXCLUSIVE-OR (NINTERSECTION (LIST 0 1 2 3 4) (QUOTE (4 3 2 1 0))) (QUOTE (4 3 2 1 0))))
600 Pass: (NULL (SET-EXCLUSIVE-OR (NINTERSECTION (LIST 0 1 2 3 4) (QUOTE (0 1 2 3 4))) (QUOTE (0 1 2 3 4))))
601 Pass: (NULL (SET-EXCLUSIVE-OR (NINTERSECTION (LIST 0 1 2 3 4) (QUOTE (4 3 2 1 0))) (QUOTE (0 1 2 3 4))))
602 Pass: (LET ((LIST1 (LIST "A" "B" "C" "d" "e" "F" "G" "h")) (LIST2 (LIST "a" "B" "c" "D" "E" "F" "g" "h"))) (NULL (SET-EXCLUSIVE-OR (NINTERSECTION LIST1 LIST2 :TEST (FUNCTION CHAR=) :KEY (FUNCTION (LAMBDA (X) (CHAR X 0)))) (QUOTE ("B" "F" "h")) :TEST (FUNCTION CHAR=) :KEY (FUNCTION (LAMBDA (X) (CHAR X 0))))))
603 Pass: (LET ((LIST1 (LIST "A" "B" "C" "d" "e" "F" "G" "h")) (LIST2 (LIST "a" "B" "c" "D" "E" "F" "g" "h"))) (NULL (SET-EXCLUSIVE-OR (NINTERSECTION LIST1 LIST2 :TEST (FUNCTION CHAR-EQUAL) :KEY (FUNCTION (LAMBDA (X) (CHAR X 0)))) (QUOTE ("A" "B" "C" "d" "e" "F" "G" "h")) :TEST (FUNCTION CHAR-EQUAL) :KEY (FUNCTION (LAMBDA (X) (CHAR X 0))))))
604 Pass: (LET ((LIST1 (LIST "A" "B" "C" "d")) (LIST2 (LIST "D" "E" "F" "g" "h"))) (NULL (SET-EXCLUSIVE-OR (NINTERSECTION LIST1 LIST2 :TEST (FUNCTION CHAR-EQUAL) :KEY (FUNCTION (LAMBDA (X) (CHAR X 0)))) (QUOTE ("d")) :TEST (FUNCTION CHAR-EQUAL) :KEY (FUNCTION (LAMBDA (X) (CHAR X 0))))))
605 Pass: (LET ((SET (QUOTE (A B C)))) (EQ (ADJOIN (QUOTE A) SET) SET))
606 Pass: (LET* ((SET (QUOTE (A B C))) (NEW-SET (ADJOIN (QUOTE X) SET))) (AND (EQUAL NEW-SET (QUOTE (X A B C))) (EQ SET (CDR NEW-SET))))
607 Pass: (EQUAL (ADJOIN 1 NIL) (QUOTE (1)))
608 Pass: (EQUAL (ADJOIN NIL NIL) (QUOTE (NIL)))
609 Pass: (EQUAL (ADJOIN NIL (QUOTE (NIL))) (QUOTE (NIL)))
610 Pass: (LET ((SET (QUOTE ((TEST-ITEM 1))))) (EQUAL (ADJOIN (QUOTE (TEST-ITEM 1)) SET) (QUOTE ((TEST-ITEM 1) (TEST-ITEM 1)))))
611 Pass: (LET ((SET (QUOTE ((TEST-ITEM 1))))) (EQUAL (ADJOIN (QUOTE (TEST-ITEM 1)) SET) (QUOTE ((TEST-ITEM 1) (TEST-ITEM 1)))))
612 Pass: (LET ((SET (QUOTE ((TEST-ITEM 1))))) (EQ (ADJOIN (QUOTE (TEST-ITEM 1)) SET :TEST (FUNCTION EQUAL)) SET))
613 Pass: (LET ((SET (QUOTE ((TEST-ITEM 1))))) (EQ (ADJOIN (QUOTE (TEST-ITEM)) SET :KEY (FUNCTION CAR)) SET))
614 Pass: (LET ((SET (QUOTE ((TEST-ITEM 1))))) (EQ (ADJOIN (QUOTE (TEST-ITEM)) SET :KEY (FUNCTION CAR) :TEST (FUNCTION EQ)) SET))
615 Pass: (LET ((SET (QUOTE (("test-item" 1))))) (EQ (ADJOIN (QUOTE ("test-item")) SET :KEY (FUNCTION CAR) :TEST (FUNCTION EQUAL)) SET))
616 Pass: (LET ((SET (QUOTE ((TEST-ITEM 1))))) (EQ (ADJOIN (QUOTE (TEST-ITEM 1)) SET :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))) SET))
617 Pass: (LET ((SET (QUOTE ((TEST-ITEM 1))))) (EQ (ADJOIN (QUOTE (TEST-ITEM)) SET :TEST-NOT (COMPLEMENT (FUNCTION EQL)) :KEY (FUNCTION CAR)) SET))
618 Pass: (LET ((SET (QUOTE ((TEST-ITEM 1))))) (EQ (ADJOIN (QUOTE (TEST-ITEM)) SET :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION EQ))) SET))
619 Pass: (LET ((SET (QUOTE (("test-item" 1))))) (EQ (ADJOIN (QUOTE ("test-item")) SET :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))) SET))
620 Pass: (LET ((PLACE NIL)) (AND (EQUAL (PUSHNEW (QUOTE A) PLACE) (QUOTE (A))) (EQUAL PLACE (QUOTE (A)))))
621 Pass: (LET ((PLACE NIL)) (AND (EQUAL (PUSHNEW (QUOTE A) PLACE) (QUOTE (A))) (EQUAL PLACE (QUOTE (A)))))
622 Pass: (LET ((PLACE (QUOTE ((A . 1) (B . 2))))) (AND (EQUAL (PUSHNEW (QUOTE (B . 2)) PLACE :TEST (FUNCTION =) :KEY (FUNCTION CDR)) (QUOTE ((A . 1) (B . 2)))) (EQUAL PLACE (QUOTE ((A . 1) (B . 2))))))
623 Pass: (LET ((PLACE (QUOTE ((A . 1) (B . 2))))) (AND (EQUAL (PUSHNEW (QUOTE (B . 2)) PLACE :TEST-NOT (COMPLEMENT (FUNCTION =)) :KEY (FUNCTION CDR)) (QUOTE ((A . 1) (B . 2)))) (EQUAL PLACE (QUOTE ((A . 1) (B . 2))))))
624 Pass: (LET ((PLACE (QUOTE ((A . 1) (B . 2))))) (AND (EQ (PUSHNEW (QUOTE (Z . 2)) PLACE :TEST (FUNCTION =) :KEY (FUNCTION CDR)) PLACE) (EQUAL PLACE (QUOTE ((A . 1) (B . 2))))))
625 Pass: (LET ((PLACE (QUOTE ((A . 1) (B . 2))))) (AND (EQ (PUSHNEW (QUOTE (Z . 2)) PLACE :TEST-NOT (COMPLEMENT (FUNCTION =)) :KEY (FUNCTION CDR)) PLACE) (EQUAL PLACE (QUOTE ((A . 1) (B . 2))))))
626 Pass: (LET ((PLACE (QUOTE ("love" "peace")))) (EQUAL (PUSHNEW "war" PLACE :TEST (FUNCTION EQUAL)) (QUOTE ("war" "love" "peace"))))
627 Pass: (LET ((PLACE (QUOTE ("love" "peace")))) (EQUAL (PUSHNEW "war" PLACE :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))) (QUOTE ("war" "love" "peace"))))
628 Pass: (LET ((PLACE (QUOTE ("love" "peace")))) (AND (EQ (PUSHNEW "peace" PLACE :TEST (FUNCTION EQUAL)) PLACE) (EQUAL PLACE (QUOTE ("love" "peace")))))
629 Pass: (LET ((PLACE (QUOTE ("love" "peace")))) (AND (EQ (PUSHNEW "peace" PLACE :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))) PLACE) (EQUAL PLACE (QUOTE ("love" "peace")))))
630 Pass: (LET ((PLACE (QUOTE (("love" . L) ("peace" . P))))) (EQUAL (PUSHNEW (QUOTE ("war" . W)) PLACE :TEST (FUNCTION EQUAL) :KEY (FUNCTION CAR)) (QUOTE (("war" . W) ("love" . L) ("peace" . P)))))
631 Pass: (LET ((PLACE (QUOTE (("love" . L) ("peace" . P))))) (EQUAL (PUSHNEW (QUOTE ("war" . W)) PLACE :TEST-NOT (COMPLEMENT (FUNCTION EQUAL)) :KEY (FUNCTION CAR)) (QUOTE (("war" . W) ("love" . L) ("peace" . P)))))
632 Pass: (LET ((PLACE (QUOTE (("love" . L) ("peace" . P))))) (AND (EQ (PUSHNEW (QUOTE ("love" . L)) PLACE :TEST (FUNCTION EQUAL) :KEY (FUNCTION CAR)) PLACE) (EQUAL PLACE (QUOTE (("love" . L) ("peace" . P))))))
633 Pass: (LET ((PLACE (QUOTE (("love" . L) ("peace" . P))))) (AND (EQ (PUSHNEW (QUOTE ("love" . L)) PLACE :TEST-NOT (COMPLEMENT (FUNCTION EQUAL)) :KEY (FUNCTION CAR)) PLACE) (EQUAL PLACE (QUOTE (("love" . L) ("peace" . P))))))
634 Pass: (LET ((PLACE (QUOTE (("love" . L) ("peace" . P))))) (AND (EQ (PUSHNEW (QUOTE ("LOVE" . L)) PLACE :TEST (FUNCTION EQUALP) :KEY (FUNCTION CAR)) PLACE) (EQUAL PLACE (QUOTE (("love" . L) ("peace" . P))))))
635 Pass: (LET ((PLACE (QUOTE (("love" . L) ("peace" . P))))) (AND (EQ (PUSHNEW (QUOTE ("LOVE" . L)) PLACE :TEST-NOT (COMPLEMENT (FUNCTION EQUALP)) :KEY (FUNCTION CAR)) PLACE) (EQUAL PLACE (QUOTE (("love" . L) ("peace" . P))))))
636 Pass: (LET ((PLACE (QUOTE (("love" . L) ("peace" . P))))) (EQUAL (PUSHNEW (QUOTE ("LOVE" . L)) PLACE :TEST (FUNCTION EQUAL) :KEY (FUNCTION CAR)) (QUOTE (("LOVE" . L) ("love" . L) ("peace" . P)))))
637 Pass: (LET ((PLACE (QUOTE (("love" . L) ("peace" . P))))) (EQUAL (PUSHNEW (QUOTE ("LOVE" . L)) PLACE :TEST-NOT (COMPLEMENT (FUNCTION EQUAL)) :KEY (FUNCTION CAR)) (QUOTE (("LOVE" . L) ("love" . L) ("peace" . P)))))
638 Pass: (LET ((LIST (QUOTE ((1) (1 2) (1 2 3))))) (AND (EQUAL (PUSHNEW (QUOTE (1)) LIST) (QUOTE ((1) (1) (1 2) (1 2 3)))) (EQUAL LIST (QUOTE ((1) (1) (1 2) (1 2 3))))))
639 Pass: (LET* ((LIST (QUOTE ((1) (1 2) (1 2 3)))) (ORIGINAL LIST)) (AND (EQUAL (PUSHNEW (QUOTE (1)) LIST :TEST (FUNCTION EQUAL)) (QUOTE ((1) (1 2) (1 2 3)))) (EQ LIST ORIGINAL)))
640 Pass: (LET* ((LIST (QUOTE ((1) (1 2) (1 2 3)))) (ORIGINAL LIST)) (AND (EQUAL (PUSHNEW (QUOTE (1)) LIST :TEST (FUNCTION EQUAL) :KEY NIL) (QUOTE ((1) (1 2) (1 2 3)))) (EQ LIST ORIGINAL)))
641 Pass: (LET ((LIST (COPY-TREE (QUOTE (1 (2) 3 4))))) (AND (EQUAL (PUSHNEW 4 (CADR LIST)) (QUOTE (4 2))) (EQUAL LIST (QUOTE (1 (4 2) 3 4)))))
642 Pass: (LET ((LIST (COPY-TREE (QUOTE (1 (2) 3 4))))) (AND (EQUAL (PUSHNEW 4 (CADR LIST) :KEY NIL) (QUOTE (4 2))) (EQUAL LIST (QUOTE (1 (4 2) 3 4)))))
643 Pass: (NULL (SET-DIFFERENCE (SET-DIFFERENCE (QUOTE (1 2 3 4 5 6 7 8 9)) (QUOTE (2 4 6 8))) (QUOTE (1 3 5 7 9))))
644 Pass: (NULL (NSET-DIFFERENCE (SET-DIFFERENCE (LIST 1 2 3 4 5 6 7 8 9) (QUOTE (2 4 6 8))) (QUOTE (1 3 5 7 9))))
645 Pass: (NULL (SET-DIFFERENCE (SET-DIFFERENCE (QUOTE ("1" "2" "3" "4" "5" "6" "7" "8" "9")) (QUOTE ("2" "4" "6" "8")) :TEST (FUNCTION EQUAL)) (QUOTE ("1" "3" "5" "7" "9")) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))
646 Pass: (NULL (SET-DIFFERENCE (SET-DIFFERENCE (QUOTE ("1" "2" "3" "4" "5" "6" "7" "8" "9")) (QUOTE ("2" "4" "6" "8")) :TEST (FUNCTION EQUAL)) (QUOTE ("1" "3" "5" "7" "9")) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))
647 Pass: (NULL (NSET-DIFFERENCE (NSET-DIFFERENCE (LIST "1" "2" "3" "4" "5" "6" "7" "8" "9") (QUOTE ("2" "4" "6" "8")) :TEST (FUNCTION EQUAL)) (QUOTE ("1" "3" "5" "7" "9")) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))
648 Pass: (NULL (SET-DIFFERENCE (SET-DIFFERENCE (QUOTE (("love") ("hate") ("peace") ("war"))) (QUOTE (("love") ("peace"))) :KEY (FUNCTION CAR) :TEST (FUNCTION EQUAL)) (QUOTE (("hate") ("war"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))
649 Pass: (NULL (NSET-DIFFERENCE (NSET-DIFFERENCE (LIST (QUOTE ("love")) (QUOTE ("hate")) (QUOTE ("peace")) (QUOTE ("war"))) (QUOTE (("love") ("peace"))) :KEY (FUNCTION CAR) :TEST (FUNCTION EQUAL)) (QUOTE (("hate") ("war"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))
650 Pass: (NULL (SET-DIFFERENCE (QUOTE NIL) (QUOTE NIL)))
651 Pass: (NULL (SET-DIFFERENCE (QUOTE NIL) (QUOTE NIL) :TEST (FUNCTION EQUAL) :KEY (QUOTE IDENTITY)))
652 Pass: (NULL (NSET-DIFFERENCE (QUOTE NIL) (QUOTE NIL)))
653 Pass: (NULL (SET-DIFFERENCE (QUOTE NIL) (QUOTE (1 2 3))))
654 Pass: (NULL (SET-DIFFERENCE (QUOTE NIL) (QUOTE (1 2 3)) :TEST (FUNCTION EQUAL) :KEY (QUOTE IDENTITY)))
655 Pass: (NULL (NSET-DIFFERENCE (QUOTE NIL) (QUOTE (1 2 3))))
656 Pass: (NULL (SET-DIFFERENCE (QUOTE (1 2 3 4)) (QUOTE (4 3 2 1))))
657 Pass: (NULL (NSET-DIFFERENCE (LIST 1 2 3 4) (QUOTE (4 3 2 1))))
658 Pass: (NULL (SET-DIFFERENCE (QUOTE (1 2 3 4)) (QUOTE (2 4 3 1))))
659 Pass: (NULL (NSET-DIFFERENCE (LIST 1 2 3 4) (QUOTE (2 4 3 1))))
660 Pass: (NULL (SET-DIFFERENCE (QUOTE (1 2 3 4)) (QUOTE (1 3 4 2))))
661 Pass: (NULL (NSET-DIFFERENCE (LIST 1 2 3 4) (QUOTE (1 3 4 2))))
662 Pass: (NULL (SET-DIFFERENCE (QUOTE (1 2 3 4)) (QUOTE (1 3 2 4))))
663 Pass: (NULL (NSET-DIFFERENCE (LIST 1 2 3 4) (QUOTE (1 3 2 4))))
664 Pass: (EQ (SET-DIFFERENCE (SET-DIFFERENCE (QUOTE (1 2 3)) (QUOTE NIL)) (QUOTE (1 2 3))) (QUOTE NIL))
665 Pass: (EQ (NSET-DIFFERENCE (NSET-DIFFERENCE (LIST 1 2 3) (QUOTE NIL)) (QUOTE (1 2 3))) (QUOTE NIL))
666 Pass: (EQ (SET-DIFFERENCE (SET-DIFFERENCE (QUOTE (1 2 3)) (QUOTE (1))) (QUOTE (2 3))) (QUOTE NIL))
667 Pass: (EQ (NSET-DIFFERENCE (NSET-DIFFERENCE (LIST 1 2 3) (QUOTE (1))) (QUOTE (2 3))) (QUOTE NIL))
668 Pass: (EQ (SET-DIFFERENCE (SET-DIFFERENCE (QUOTE (1 2 3)) (QUOTE (1 2))) (QUOTE (3))) (QUOTE NIL))
669 Pass: (EQ (NSET-DIFFERENCE (NSET-DIFFERENCE (LIST 1 2 3) (QUOTE (1 2))) (QUOTE (3))) (QUOTE NIL))
670 Pass: (NULL (SET-EXCLUSIVE-OR (SET-EXCLUSIVE-OR (QUOTE (1 2 3)) (QUOTE (2 3 4))) (QUOTE (1 4))))
671 Pass: (NULL (NSET-EXCLUSIVE-OR (NSET-EXCLUSIVE-OR (LIST 1 2 3) (QUOTE (2 3 4))) (QUOTE (1 4))))
672 Pass: (NULL (SET-EXCLUSIVE-OR (SET-EXCLUSIVE-OR (QUOTE (1 2 3)) (QUOTE (1 3))) (QUOTE (2))))
673 Pass: (NULL (NSET-EXCLUSIVE-OR (NSET-EXCLUSIVE-OR (LIST 1 2 3) (QUOTE (1 3))) (QUOTE (2))))
674 Pass: (NULL (SET-EXCLUSIVE-OR (QUOTE NIL) (QUOTE NIL)))
675 Pass: (NULL (NSET-EXCLUSIVE-OR (QUOTE NIL) (QUOTE NIL)))
676 Pass: (NULL (SET-EXCLUSIVE-OR (QUOTE (1 2 3)) (QUOTE (3 2 1))))
677 Pass: (NULL (NSET-EXCLUSIVE-OR (LIST 1 2 3) (QUOTE (3 2 1))))
678 Pass: (NULL (SET-EXCLUSIVE-OR (QUOTE (1 2 3)) (QUOTE (2 3 1))))
679 Pass: (NULL (NSET-EXCLUSIVE-OR (LIST 1 2 3) (QUOTE (2 3 1))))
680 Pass: (NULL (SET-EXCLUSIVE-OR (QUOTE (1 2 3)) (QUOTE (1 3 2))))
681 Pass: (NULL (NSET-EXCLUSIVE-OR (LIST 1 2 3) (QUOTE (1 3 2))))
682 Pass: (NULL (SET-EXCLUSIVE-OR (SET-EXCLUSIVE-OR (QUOTE (1 2 3)) (QUOTE NIL)) (QUOTE (3 2 1))))
683 Pass: (NULL (NSET-EXCLUSIVE-OR (NSET-EXCLUSIVE-OR (LIST 1 2 3) (QUOTE NIL)) (QUOTE (3 2 1))))
684 Pass: (NULL (SET-EXCLUSIVE-OR (SET-EXCLUSIVE-OR (QUOTE NIL) (QUOTE (1 2 3))) (QUOTE (2 1 3))))
685 Pass: (NULL (NSET-EXCLUSIVE-OR (NSET-EXCLUSIVE-OR (QUOTE NIL) (QUOTE (1 2 3))) (QUOTE (2 1 3))))
686 Pass: (NULL (SET-EXCLUSIVE-OR (QUOTE ("car" "ship" "airplane" "submarine")) (QUOTE ("car" "ship" "airplane" "submarine")) :TEST (FUNCTION EQUAL)))
687 Pass: (NULL (NSET-EXCLUSIVE-OR (COPY-LIST (QUOTE ("car" "ship" "airplane" "submarine"))) (QUOTE ("car" "ship" "airplane" "submarine")) :TEST (FUNCTION EQUAL)))
688 Pass: (NULL (SET-EXCLUSIVE-OR (QUOTE ("car" "ship" "airplane" "submarine")) (QUOTE ("CAR" "SHIP" "AIRPLANE" "SUBMARINE")) :TEST (FUNCTION EQUALP)))
689 Pass: (NULL (NSET-EXCLUSIVE-OR (COPY-LIST (QUOTE ("car" "ship" "airplane" "submarine"))) (QUOTE ("CAR" "SHIP" "AIRPLANE" "SUBMARINE")) :TEST (FUNCTION EQUALP)))
690 Pass: (NULL (SET-EXCLUSIVE-OR (QUOTE ("car" "ship" "airplane" "submarine")) (QUOTE ("ship" "airplane" "submarine" "car")) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))
691 Pass: (NULL (NSET-EXCLUSIVE-OR (COPY-LIST (QUOTE ("car" "ship" "airplane" "submarine"))) (QUOTE ("ship" "airplane" "submarine" "car")) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))
692 Pass: (NULL (SET-EXCLUSIVE-OR (QUOTE (("car") ("ship") ("airplane") ("submarine"))) (QUOTE (("car") ("ship") ("airplane") ("submarine"))) :TEST (FUNCTION STRING=) :KEY (FUNCTION CAR)))
693 Pass: (NULL (NSET-EXCLUSIVE-OR (COPY-TREE (QUOTE (("car") ("ship") ("airplane") ("submarine")))) (QUOTE (("car") ("ship") ("airplane") ("submarine"))) :TEST (FUNCTION STRING=) :KEY (FUNCTION CAR)))
694 Pass: (NULL (SET-EXCLUSIVE-OR (QUOTE (("car") ("ship") ("airplane") ("submarine"))) (QUOTE (("car") ("ship") ("airplane") ("submarine"))) :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION CAR)))
695 Pass: (NULL (NSET-EXCLUSIVE-OR (COPY-TREE (QUOTE (("car") ("ship") ("airplane") ("submarine")))) (QUOTE (("car") ("ship") ("airplane") ("submarine"))) :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION CAR)))
696 Pass: (NULL (SET-EXCLUSIVE-OR (SET-EXCLUSIVE-OR (QUOTE ("car" "ship" "airplane" "submarine")) (QUOTE ("car" "ship" "horse" "airplane" "submarine" "camel")) :TEST (FUNCTION EQUAL)) (QUOTE ("camel" "horse")) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))
697 Pass: (NULL (NSET-EXCLUSIVE-OR (NSET-EXCLUSIVE-OR (LIST "car" "ship" "airplane" "submarine") (QUOTE ("car" "ship" "horse" "airplane" "submarine" "camel")) :TEST (FUNCTION EQUAL)) (QUOTE ("camel" "horse")) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))
698 Pass: (SUBSETP (QUOTE (1 2 3)) (QUOTE (1 2 3)))
699 Pass: (SUBSETP (QUOTE (1 2 3)) (QUOTE (3 2 1)))
700 Pass: (SUBSETP (QUOTE (1 2 3)) (QUOTE (2 1 3)))
701 Pass: (NULL (SUBSETP (QUOTE (1 2 3 4)) (QUOTE (2 1 3))))
702 Pass: (SUBSETP (QUOTE (1)) (QUOTE (2 1 3)))
703 Pass: (SUBSETP (QUOTE (1 2)) (QUOTE (1 2 3 4 5 6 7 8)))
704 Pass: (SUBSETP (QUOTE (1 2 3 4 5)) (QUOTE (8 7 6 5 4 3 2 1)))
705 Pass: (NULL (SUBSETP (QUOTE ("car" "ship" "airplane" "submarine")) (QUOTE ("car" "ship" "horse" "airplane" "submarine" "camel"))))
706 Pass: (SUBSETP (QUOTE ("car" "ship" "airplane" "submarine")) (QUOTE ("car" "ship" "horse" "airplane" "submarine" "camel")) :TEST (FUNCTION EQUAL))
707 Pass: (SUBSETP (QUOTE ("CAR" "SHIP" "AIRPLANE" "SUBMARINE")) (QUOTE ("car" "ship" "horse" "airplane" "submarine" "camel")) :TEST (FUNCTION EQUALP))
708 Pass: (SUBSETP (QUOTE (("car") ("ship") ("airplane") ("submarine"))) (QUOTE (("car") ("ship") ("horse") ("airplane") ("submarine") ("camel"))) :TEST (FUNCTION STRING=) :KEY (FUNCTION CAR))
709 Pass: (NULL (UNION (QUOTE NIL) (QUOTE NIL)))
710 Pass: (NULL (NUNION (QUOTE NIL) (QUOTE NIL)))
711 Pass: (NULL (SET-DIFFERENCE (UNION (QUOTE (1 2 3)) (QUOTE (2 3 4))) (QUOTE (1 2 3 4))))
712 Pass: (NULL (SET-DIFFERENCE (NUNION (LIST 1 2 3) (LIST 2 3 4)) (QUOTE (1 2 3 4))))
713 Pass: (NULL (SET-DIFFERENCE (UNION (QUOTE (1 2 3)) (QUOTE (1 2 3))) (QUOTE (1 2 3))))
714 Pass: (NULL (SET-DIFFERENCE (NUNION (LIST 1 2 3) (LIST 1 2 3)) (QUOTE (1 2 3))))
715 Pass: (NULL (SET-DIFFERENCE (UNION (QUOTE (1)) (QUOTE (3 2 1))) (QUOTE (1 2 3))))
716 Pass: (NULL (SET-DIFFERENCE (NUNION (LIST 1) (LIST 3 2 1)) (QUOTE (1 2 3))))
717 Pass: (NULL (SET-DIFFERENCE (UNION (QUOTE (1 2 3)) (QUOTE NIL)) (QUOTE (1 2 3))))
718 Pass: (NULL (SET-DIFFERENCE (NUNION (LIST 1 2 3) (QUOTE NIL)) (QUOTE (1 2 3))))
719 Pass: (NULL (SET-DIFFERENCE (UNION (QUOTE NIL) (QUOTE (1 2 3))) (QUOTE (1 2 3))))
720 Pass: (NULL (SET-DIFFERENCE (NUNION (QUOTE NIL) (LIST 1 2 3)) (QUOTE (1 2 3))))
721 Pass: (NULL (SET-DIFFERENCE (UNION (QUOTE (1 2 3)) (QUOTE (2))) (QUOTE (1 2 3))))
722 Pass: (NULL (SET-DIFFERENCE (NUNION (LIST 1 2 3) (LIST 2)) (QUOTE (1 2 3))))
723 Pass: (NULL (SET-DIFFERENCE (UNION (QUOTE ("Alpha" "Bravo" "Charlie")) (QUOTE ("Bravo" "Charlie" "Delta" "Echo")) :TEST (FUNCTION STRING=)) (QUOTE ("Alpha" "Bravo" "Charlie" "Delta" "Echo")) :TEST-NOT (COMPLEMENT (FUNCTION STRING=))))
724 Pass: (NULL (SET-DIFFERENCE (NUNION (LIST "Alpha" "Bravo" "Charlie") (LIST "Bravo" "Charlie" "Delta" "Echo") :TEST (FUNCTION STRING=)) (QUOTE ("Alpha" "Bravo" "Charlie" "Delta" "Echo")) :TEST-NOT (COMPLEMENT (FUNCTION STRING=))))
725 Pass: (NULL (SET-DIFFERENCE (UNION (COPY-TREE (QUOTE (("Alpha") ("Bravo") ("Charlie")))) (COPY-TREE (QUOTE (("Bravo") ("Charlie") ("Delta") ("Echo")))) :TEST (FUNCTION STRING=) :KEY (FUNCTION CAR)) (QUOTE (("Alpha") ("Bravo") ("Charlie") ("Delta") ("Echo"))) :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION CAR)))
726 Pass: (NULL (SET-DIFFERENCE (NUNION (COPY-TREE (QUOTE (("Alpha") ("Bravo") ("Charlie")))) (COPY-TREE (QUOTE (("Bravo") ("Charlie") ("Delta") ("Echo")))) :TEST (FUNCTION STRING=) :KEY (FUNCTION CAR)) (QUOTE (("Alpha") ("Bravo") ("Charlie") ("Delta") ("Echo"))) :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION CAR)))
727 Pass: (NULL (SET-DIFFERENCE (UNION (QUOTE ("Alpha" "Bravo" "Charlie")) (QUOTE ("BRAVO" "CHARLIE" "DELTA" "ECHO")) :TEST (FUNCTION STRING-EQUAL)) (QUOTE ("ALPHA" "BRAVO" "CHARLIE" "DELTA" "ECHO")) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL))))
Pass: 728, Failed: 0

test: sacla-tests/must-data-and-control.lisp
0 Pass: (LET (A B C) (AND (NULL (PSETQ A 1 B 2 C 3)) (EQL A 1) (EQL B 2) (EQL C 3)))
1 Pass: (LET ((A 1) (B 2) (C 3)) (AND (NULL (PSETQ A (1+ B) B (1+ A) C (+ A B))) (EQL A 3) (EQL B 2) (EQL C 3)))
2 Failed: (LET ((X (LIST 10 20 30))) (SYMBOL-MACROLET ((Y (CAR X)) (Z (CADR X))) (PSETQ Y (1+ Z) Z (1+ Y)) (EQUAL (LIST X Y Z) (QUOTE ((21 11 30) 21 11)))))
3 Pass: (LET ((A 1) (B 2)) (AND (NULL (PSETQ A B B A)) (EQL A 2) (EQL B 1)))
4 Pass: (NULL (PSETQ))
5 Pass: (LET ((A NIL)) (AND (NULL (PSETQ A T)) (EQ A T)))
6 Pass: (LET ((A 0) (B 1)) (AND (NULL (PSETQ A B B A)) (EQ A 1) (EQ B 0)))
7 Pass: (LET ((A 0) (B 1) (C 2)) (AND (NULL (PSETQ A B B C C A)) (EQ A 1) (EQ B 2) (EQ C 0)))
8 Pass: (LET ((A 0) (B 1) (C 2) (D 3)) (AND (NULL (PSETQ A B B C C D D A)) (EQ A 1) (EQ B 2) (EQ C 3) (EQ D 0)))
9 Pass: (NULL (BLOCK NIL (RETURN) 1))
10 Pass: (EQL (BLOCK NIL (RETURN 1) 2) 1)
11 Pass: (EQUAL (MULTIPLE-VALUE-LIST (BLOCK NIL (RETURN (VALUES 1 2)) 3)) (QUOTE (1 2)))
12 Pass: (EQL (BLOCK NIL (BLOCK ALPHA (RETURN 1) 2)) 1)
13 Pass: (EQL (BLOCK ALPHA (BLOCK NIL (RETURN 1)) 2) 2)
14 Pass: (EQL (BLOCK NIL (BLOCK NIL (RETURN 1) 2)) 1)
15 Pass: (EQ (DOTIMES (I 10 NIL) (RETURN T)) T)
16 Pass: (EQ (DOLIST (ELT (LIST 0 1 2 3) NIL) (WHEN (NUMBERP ELT) (RETURN T))) T)
17 Pass: (NOT NIL)
18 Pass: (NOT (QUOTE NIL))
19 Pass: (NOT (INTEGERP (QUOTE SSS)))
20 Pass: (NULL (NOT (INTEGERP 1)))
21 Pass: (NULL (NOT 3.7))
22 Pass: (NULL (NOT (QUOTE APPLE)))
23 Pass: (NOT NIL)
24 Pass: (NULL (NOT T))
25 Pass: (NOT (CDR (QUOTE (A))))
26 Pass: (EQUAL (QUOTE A) (QUOTE A))
27 Pass: (NOT (EQUAL (QUOTE A) (QUOTE B)))
28 Pass: (EQUAL (QUOTE ABC) (QUOTE ABC))
29 Pass: (EQUAL 1 1)
30 Pass: (EQUAL 2 2)
31 Pass: (EQUAL 0.1 0.1)
32 Pass: (EQUAL 0 0)
33 Pass: (NOT (EQUAL 0 1))
34 Failed: (NOT (EQUAL 1 1))
35 Failed: (NOT (EQUAL 0 0))
36 Pass: (EQUAL #\a #\a)
37 Pass: (EQUAL #\b #\b)
38 Pass: (NOT (EQUAL #\b #\B))
39 Pass: (NOT (EQUAL #\C #\c))
40 Pass: (EQUAL (QUOTE (0)) (QUOTE (0)))
41 Pass: (EQUAL (QUOTE (0 #\a)) (QUOTE (0 #\a)))
42 Pass: (EQUAL (QUOTE (0 #\a X)) (QUOTE (0 #\a X)))
43 Pass: (EQUAL (QUOTE (0 #\a X (0))) (QUOTE (0 #\a X (0))))
44 Pass: (EQUAL (QUOTE (0 #\a X (0 (#\a (X "abc" #(0 1 0 1)))))) (QUOTE (0 #\a X (0 (#\a (X "abc" #(0 1 0 1)))))))
45 Pass: (NOT (EQUAL (MAKE-ARRAY (QUOTE (2 2)) :INITIAL-CONTENTS (QUOTE ((A B) (C D)))) (MAKE-ARRAY (QUOTE (2 2)) :INITIAL-CONTENTS (QUOTE ((A B) (C D))))))
46 Pass: (LET ((ARRAY (MAKE-ARRAY (QUOTE (2 2)) :INITIAL-CONTENTS (QUOTE ((A B) (C D)))))) (EQUAL ARRAY ARRAY))
47 Pass: (EQL (IDENTITY 101) 101)
48 Pass: (EQUAL (MAPCAN (FUNCTION IDENTITY) (LIST (LIST 1 2 3) (QUOTE (4 5 6)))) (QUOTE (1 2 3 4 5 6)))
49 Pass: (EQ (IDENTITY (QUOTE X)) (QUOTE X))
50 Pass: (FUNCALL (COMPLEMENT (FUNCTION ZEROP)) 1)
51 Pass: (NOT (FUNCALL (COMPLEMENT (FUNCTION CHARACTERP)) #\A))
52 Pass: (NOT (FUNCALL (COMPLEMENT (FUNCTION MEMBER)) (QUOTE A) (QUOTE (A B C))))
53 Pass: (FUNCALL (COMPLEMENT (FUNCTION MEMBER)) (QUOTE D) (QUOTE (A B C)))
54 Pass: (EQUAL (MAPCAR (CONSTANTLY 3) (QUOTE (A B C D))) (QUOTE (3 3 3 3)))
55 Pass: (LET ((CONST-FUNC (CONSTANTLY (QUOTE XYZ)))) (EVERY (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE XYZ)))) (LIST (FUNCALL CONST-FUNC) (FUNCALL CONST-FUNC (QUOTE A)) (FUNCALL CONST-FUNC (QUOTE A) (QUOTE B)) (FUNCALL CONST-FUNC (QUOTE A) (QUOTE B) (QUOTE C)) (FUNCALL CONST-FUNC (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D)))))
56 Pass: (LET ((TEMP1 1) (TEMP2 1) (TEMP3 1)) (AND (EQL (AND (INCF TEMP1) (INCF TEMP2) (INCF TEMP3)) 2) (AND (EQL 2 TEMP1) (EQL 2 TEMP2) (EQL 2 TEMP3)) (EQL (DECF TEMP3) 1) (NULL (AND (DECF TEMP1) (DECF TEMP2) (EQ TEMP3 (QUOTE NIL)) (DECF TEMP3))) (AND (EQL TEMP1 TEMP2) (EQL TEMP2 TEMP3)) (AND)))
57 Pass: (EQ (AND) T)
58 Pass: (EQUAL (MULTIPLE-VALUE-LIST (AND (QUOTE T) (QUOTE T) (QUOTE T) (VALUES (QUOTE A) (QUOTE B) (QUOTE C)))) (QUOTE (A B C)))
59 Pass: (NULL (AND (QUOTE T) (QUOTE T) (CDR (QUOTE (A))) (ERROR "error")))
60 Failed: (LET ((TEMP0 NIL) (TEMP1 10) (TEMP2 20) (TEMP3 30)) (AND (EQL (OR TEMP0 TEMP1 (SETQ TEMP2 37)) 10) (EQL TEMP2 20) (EQL (OR (INCF TEMP1) (INCF TEMP2) (INCF TEMP3)) 11) (EQL TEMP1 11) (EQL TEMP2 20) (EQL TEMP3 30) (EQUAL (MULTIPLE-VALUE-LIST (OR (VALUES) TEMP1)) (QUOTE (11))) (EQUAL (MULTIPLE-VALUE-LIST (OR (VALUES TEMP1 TEMP2) TEMP3)) (QUOTE (11))) (EQUAL (MULTIPLE-VALUE-LIST (OR TEMP0 (VALUES TEMP1 TEMP2))) (QUOTE (11 20))) (EQUAL (MULTIPLE-VALUE-LIST (OR (VALUES TEMP0 TEMP1) (VALUES TEMP2 TEMP3))) (QUOTE (20 30)))))
61 Pass: (ZEROP (OR (QUOTE 0) (QUOTE 1) (QUOTE 2)))
62 Pass: (LET ((A 0)) (AND (EQL (OR (INCF A) (INCF A) (INCF A)) 1) (EQL A 1)))
63 Pass: (EQUAL (MULTIPLE-VALUE-LIST (OR (VALUES) 1)) (QUOTE (1)))
64 Pass: (EQUAL (MULTIPLE-VALUE-LIST (OR (VALUES 1 2) 3)) (QUOTE (1)))
65 Pass: (NULL (OR))
66 Failed: (EQUAL (MULTIPLE-VALUE-LIST (OR (VALUES 0 1 2))) (QUOTE (0 1 2)))
67 Failed: (EQUAL (MULTIPLE-VALUE-LIST (OR NIL (VALUES 0 1 2))) (QUOTE (0 1 2)))
68 Failed: (EQUAL (MULTIPLE-VALUE-LIST (OR NIL NIL (VALUES 0 1 2))) (QUOTE (0 1 2)))
69 Failed: (EQUAL (MULTIPLE-VALUE-LIST (OR NIL NIL NIL (VALUES 0 1 2))) (QUOTE (0 1 2)))
70 Pass: (LET ((A NIL)) (FLET ((SELECT-OPTIONS NIL (COND ((= A 1) (SETQ A 2)) ((= A 2) (SETQ A 3)) ((AND (= A 3) (FLOOR A 2))) (T (FLOOR A 3))))) (AND (EQL (SETQ A 1) 1) (EQL (SELECT-OPTIONS) 2) (EQL A 2) (EQL (SELECT-OPTIONS) 3) (EQL A 3) (EQL (SELECT-OPTIONS) 1) (SETQ A 5) (EQUAL (MULTIPLE-VALUE-LIST (SELECT-OPTIONS)) (QUOTE (1 2))))))
71 Pass: (NULL (COND))
72 Pass: (EQUAL (MULTIPLE-VALUE-LIST (COND ((VALUES 1 2 3)))) (QUOTE (1)))
73 Pass: (EQUAL (MULTIPLE-VALUE-LIST (COND (T (VALUES 1 2 3)))) (QUOTE (1 2 3)))
74 Pass: (EQUAL (MULTIPLE-VALUE-LIST (COND (T (VALUES 1) (VALUES 1 2) (VALUES 1 2 3)))) (QUOTE (1 2 3)))
75 Pass: (LET ((A 0)) (AND (EQL (COND ((INCF A)) ((INCF A)) ((INCF A))) 1) (EQL A 1)))
76 Pass: (LET ((A 0)) (AND (EQL (COND ((INCF A) (INCF A) (INCF A)) ((INCF A) (INCF A) (INCF A)) ((INCF A) (INCF A) (INCF A))) 3) (EQL A 3)))
77 Pass: (EQ (WHEN T (QUOTE HELLO)) (QUOTE HELLO))
78 Pass: (NULL (UNLESS T (QUOTE HELLO)))
79 Pass: (NULL (WHEN NIL (QUOTE HELLO)))
80 Pass: (EQ (UNLESS NIL (QUOTE HELLO)) (QUOTE HELLO))
81 Pass: (NULL (WHEN T))
82 Pass: (NULL (UNLESS NIL))
83 Pass: (LET ((X 3)) (EQUAL (LIST (WHEN (ODDP X) (INCF X) (LIST X)) (WHEN (ODDP X) (INCF X) (LIST X)) (UNLESS (ODDP X) (INCF X) (LIST X)) (UNLESS (ODDP X) (INCF X) (LIST X)) (IF (ODDP X) (INCF X) (LIST X)) (IF (ODDP X) (INCF X) (LIST X)) (IF (NOT (ODDP X)) (INCF X) (LIST X)) (IF (NOT (ODDP X)) (INCF X) (LIST X))) (QUOTE ((4) NIL (5) NIL 6 (6) 7 (7)))))
84 Pass: (EQUAL (LET ((LIST NIL)) (DOLIST (K (QUOTE (1 2 3 :FOUR #\v NIL T (QUOTE OTHER)))) (PUSH (CASE K ((1 2) (QUOTE CLAUSE1)) (3 (QUOTE CLAUSE2)) (NIL (QUOTE NO-KEYS-SO-NEVER-SEEN)) ((NIL) (QUOTE NILSLOT)) ((:FOUR #\v) (QUOTE CLAUSE4)) ((T) (QUOTE TSLOT)) (OTHERWISE (QUOTE OTHERS))) LIST)) LIST) (QUOTE (OTHERS TSLOT NILSLOT CLAUSE4 CLAUSE4 CLAUSE2 CLAUSE1 CLAUSE1)))
85 Pass: (MACRO-FUNCTION (QUOTE CASE))
86 Failed: (MACRO-FUNCTION (QUOTE CCASE))
87 Pass: (MACRO-FUNCTION (QUOTE ECASE))
88 Pass: (EQL (CASE (QUOTE A) ((A B C) 0) (X 1) (Y 2) (Z 3)) 0)
89 Failed: (EQL (CASE (QUOTE J) ((A B C) 0) (X 1) (Y 2) (Z 3) (T 9)) 9)
90 Pass: (EQL (CASE (QUOTE J) ((A B C) 0) (X 1) (Y 2) (Z 3) (OTHERWISE 9)) 9)
91 Pass: (EQL (CASE (QUOTE J) ((A B C) 0) (X 1) (Y 2) (Z 3)) NIL)
92 Pass: (NULL (CASE (QUOTE X)))
93 Pass: (LET ((X #\a)) (EQUAL (CASE X ((#\x #\y #\z) "xyz") (#\a "a") (T "-")) "a"))
94 Failed: (LET ((X #\A)) (EQUAL (CASE X ((#\x #\y #\z) "xyz") (#\a "a") (T "-")) "-"))
95 Pass: (LET ((X T)) (EQL (CASE X ((T) 0) (T 1)) 0))
96 Failed: (LET ((X NIL)) (EQL (CASE X ((T) 0) (T 1)) 1))
97 Pass: (LET ((X (QUOTE A))) (EQL (CASE X ((T) 0)) NIL))
98 Pass: (LET ((X (QUOTE OTHERWISE))) (EQL (CASE X ((OTHERWISE) 0) (OTHERWISE 1)) 0))
99 Pass: (LET ((X NIL)) (EQL (CASE X ((OTHERWISE) 0) (OTHERWISE 1)) 1))
100 Pass: (LET ((X (QUOTE A))) (EQL (CASE X ((OTHERWISE) 0)) NIL))
101 Pass: (LET ((X (QUOTE A))) (AND (EQL (CASE X ((A B C) (SETQ X 0) (QUOTE A)) ((X Y Z) (SETQ X 1) (QUOTE X))) (QUOTE A)) (EQL X 0)))
102 Pass: (LET ((X (QUOTE X))) (AND (EQL (CASE X ((A B C) (SETQ X 0) (QUOTE A)) ((X Y Z) (SETQ X 1) (QUOTE X))) (QUOTE X)) (EQL X 1)))
103 Pass: (EQUAL (MAPCAR (FUNCTION (LAMBDA (X) (CASE X (A 0) (B 1) (C 2) (D 3) (E 4)))) (QUOTE (A B C D E F))) (QUOTE (0 1 2 3 4 NIL)))
104 Pass: (CASE (QUOTE A) (OTHERWISE T))
105 Pass: (EQL (CASE (QUOTE A) (OTHERWISE 10)) 10)
106 Pass: (LET ((A 0) (B 1)) (AND (EQ (CASE (PROGN (INCF A) (INCF B)) (0 (QUOTE A)) (1 (QUOTE B)) (2 (QUOTE C))) (QUOTE C)) (EQL A 1) (EQL B 2)))
107 Pass: (LET ((A 0) (B 1)) (AND (EQ (CASE (PROGN (INCF A) (INCF B)) (0 (QUOTE A)) (1 (QUOTE B)) (2 (INCF A) (INCF B) (QUOTE C))) (QUOTE C)) (EQL A 2) (EQL B 3)))
108 Pass: (LET ((A (LIST 0 1 2 3))) (EQ (CASE (CADDR A) (0 (QUOTE X)) (1 (QUOTE Y)) (2 (QUOTE Z)) (3 T)) (QUOTE Z)))
109 Pass: (EQUAL (MULTIPLE-VALUE-LIST (CASE 2 (0 (VALUES 0 (QUOTE X))) (1 (VALUES 1 (QUOTE Y))) (2 (VALUES 2 (QUOTE Z))) (3 (VALUES 3 (QUOTE T))))) (QUOTE (2 Z)))
110 Failed: Illegal function call: ((A B C) 0)
111 Failed: Illegal function call: ((A B C) 0)
112 Failed: (HANDLER-CASE (PROGN (LET ((A NIL)) (CCASE A))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
113 Failed: Illegal function call: ((#\A #\B #\C) 0)
114 Failed: Illegal function call: (0 (QUOTE X))
115 Failed: Illegal function call: ((#\x #\y #\z) "xyz")
116 Failed: Illegal function call: ((A B C) (SETQ X 0) (QUOTE A))
117 Failed: Illegal function call: ((A B C) (SETQ X 0) (QUOTE A))
118 Failed: The function A is undefined
119 Failed: Illegal function call: (0 (VALUES 0 (QUOTE X)))
120 Pass: (LET ((A (QUOTE C))) (EQL (ECASE A ((A B C) 0) (X 1) (Y 2) (Z 3)) 0))
121 Failed: (HANDLER-CASE (PROGN (LET ((A (QUOTE J))) (ECASE A ((A B C) 0) (X 1) (Y 2) (Z 3)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
122 Failed: (HANDLER-CASE (PROGN (LET ((A NIL)) (ECASE A))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
123 Failed: (HANDLER-CASE (PROGN (LET ((A #\a)) (ECASE A ((#\A #\B #\C) 0) ((#\X #\Y #\Z) 1)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
124 Pass: (LET ((A (LIST 0 1 2 3))) (EQ (ECASE (CADDR A) (0 (QUOTE X)) (1 (QUOTE Y)) (2 (QUOTE Z)) (3 T)) (QUOTE Z)))
125 Pass: (LET ((X #\a)) (EQUAL (ECASE X ((#\x #\y #\z) "xyz") (#\a "a")) "a"))
126 Pass: (LET ((X (QUOTE A))) (AND (EQL (ECASE X ((A B C) (SETQ X 0) (QUOTE A)) ((X Y Z) (SETQ X 1) (QUOTE X))) (QUOTE A)) (EQL X 0)))
127 Pass: (LET ((X (QUOTE X))) (AND (EQL (ECASE X ((A B C) (SETQ X 0) (QUOTE A)) ((X Y Z) (SETQ X 1) (QUOTE X))) (QUOTE X)) (EQL X 1)))
128 Pass: (EQUAL (MAPCAR (FUNCTION (LAMBDA (X) (ECASE X (A 0) (B 1) (C 2) (D 3) (E 4)))) (QUOTE (A B C D E))) (QUOTE (0 1 2 3 4)))
129 Pass: (EQUAL (MULTIPLE-VALUE-LIST (LET ((A 2)) (ECASE A (0 (VALUES 0 (QUOTE X))) (1 (VALUES 1 (QUOTE Y))) (2 (VALUES 2 (QUOTE Z))) (3 (VALUES 3 (QUOTE T)))))) (QUOTE (2 Z)))
130 Pass: (LET ((X (QUOTE A))) (EQUAL (TYPECASE X (CONS "cons") (SYMBOL "symbol") (NUMBER "number") (OTHERWISE "unknown")) "symbol"))
131 Pass: (LET ((X (LIST (QUOTE A)))) (EQUAL (TYPECASE X (CONS "cons") (SYMBOL "symbol") (NUMBER "number") (OTHERWISE "unknown")) "cons"))
132 Failed: (LET ((X 0)) (EQUAL (TYPECASE X (CONS "cons") (SYMBOL "symbol") (NUMBER "number") (OTHERWISE "unknown")) "number"))
133 Pass: (LET ((X (MAKE-ARRAY (QUOTE (3 3))))) (EQUAL (TYPECASE X (CONS "cons") (SYMBOL "symbol") (NUMBER "number") (OTHERWISE "unknown")) "unknown"))
134 Pass: (NULL (TYPECASE (QUOTE A)))
135 Pass: (TYPECASE (QUOTE A) (OTHERWISE T))
136 Failed: (TYPECASE (QUOTE A) (T T))
137 Pass: (LET ((X (MAKE-ARRAY (QUOTE (3 3))))) (EQUAL (TYPECASE X (CONS "cons") (SYMBOL "symbol") (NUMBER "number")) NIL))
138 Failed: (LET ((X "")) (EQUAL (TYPECASE X (T "anything") (OTHERWISE NIL)) "anything"))
139 Pass: (LET ((X "")) (AND (EQL (TYPECASE X (STRING (SETQ X (QUOTE STRING)) 0) (CONS (SETQ X (QUOTE CONS)) 1) (ARRAY (SETQ X (QUOTE ARRAY)) 2) (T (SETQ X (QUOTE T)) 9)) 0) (EQ X (QUOTE STRING))))
140 Pass: (LET ((X (LIST NIL))) (AND (EQL (TYPECASE X (STRING (SETQ X (QUOTE STRING)) 0) (CONS (SETQ X (QUOTE CONS)) 1) (ARRAY (SETQ X (QUOTE ARRAY)) 2) (T (SETQ X (QUOTE T)) 9)) 1) (EQ X (QUOTE CONS))))
141 Pass: (LET ((X #(0 1))) (AND (EQL (TYPECASE X (STRING (SETQ X (QUOTE STRING)) 0) (CONS (SETQ X (QUOTE CONS)) 1) (ARRAY (SETQ X (QUOTE ARRAY)) 2) (T (SETQ X (QUOTE T)) 9)) 2) (EQ X (QUOTE ARRAY))))
142 Failed: (LET ((X #\a)) (AND (EQL (TYPECASE X (STRING (SETQ X (QUOTE STRING)) 0) (CONS (SETQ X (QUOTE CONS)) 1) (ARRAY (SETQ X (QUOTE ARRAY)) 2) (T (SETQ X (QUOTE T)) 9)) 9) (EQ X (QUOTE T))))
143 Pass: (LET ((X #(0 1))) (AND (EQUAL (MULTIPLE-VALUE-LIST (TYPECASE X (STRING (SETQ X (QUOTE STRING)) (VALUES (QUOTE STRING) 0)) (CONS (SETQ X (QUOTE CONS)) (VALUES (QUOTE CONS) 1)) (ARRAY (SETQ X (QUOTE ARRAY)) (VALUES (QUOTE ARRAY) 2)) (T (SETQ X (QUOTE T)) (VALUES (QUOTE T) 9)))) (QUOTE (ARRAY 2))) (EQ X (QUOTE ARRAY))))
144 Failed: invalid number of arguments for CONS: 1
145 Failed: invalid number of arguments for CONS: 1
146 Failed: invalid number of arguments for CONS: 1
147 Failed: (HANDLER-CASE (LET ((X (MAKE-ARRAY (QUOTE (3 3))))) (CTYPECASE X (CONS "cons") (SYMBOL "symbol") (NUMBER "number"))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
148 Failed: (HANDLER-CASE (LET ((A NIL)) (CTYPECASE A)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
149 Failed: invalid number of arguments for STRING: 2
150 Failed: invalid number of arguments for STRING: 2
151 Failed: invalid number of arguments for STRING: 2
152 Failed: (HANDLER-CASE (LET ((X #\a)) (CTYPECASE X (STRING (SETQ X (QUOTE STRING)) 0) (CONS (SETQ X (QUOTE CONS)) 1) (ARRAY (SETQ X (QUOTE ARRAY)) 2))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
153 Failed: invalid number of arguments for STRING: 2
154 Pass: (LET ((X (QUOTE A))) (EQUAL (ETYPECASE X (CONS "cons") (SYMBOL "symbol") (NUMBER "number")) "symbol"))
155 Pass: (LET ((X (LIST (QUOTE A)))) (EQUAL (ETYPECASE X (CONS "cons") (SYMBOL "symbol") (NUMBER "number")) "cons"))
156 Failed: 0 fell through ETYPECASE expression. Wanted one of (OR CONS SYMBOL NUMBER).
157 Failed: (HANDLER-CASE (PROGN (LET ((X (MAKE-ARRAY (QUOTE (3 3))))) (ETYPECASE X (CONS "cons") (SYMBOL "symbol") (NUMBER "number")))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
158 Failed: (HANDLER-CASE (PROGN (LET ((A NIL)) (ETYPECASE A))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
159 Pass: (LET ((X "")) (AND (EQL (ETYPECASE X (STRING (SETQ X (QUOTE STRING)) 0) (CONS (SETQ X (QUOTE CONS)) 1) (ARRAY (SETQ X (QUOTE ARRAY)) 2)) 0) (EQ X (QUOTE STRING))))
160 Pass: (LET ((X (LIST NIL))) (AND (EQL (ETYPECASE X (STRING (SETQ X (QUOTE STRING)) 0) (CONS (SETQ X (QUOTE CONS)) 1) (ARRAY (SETQ X (QUOTE ARRAY)) 2)) 1) (EQ X (QUOTE CONS))))
161 Pass: (LET ((X #(0 1))) (AND (EQL (ETYPECASE X (STRING (SETQ X (QUOTE STRING)) 0) (CONS (SETQ X (QUOTE CONS)) 1) (ARRAY (SETQ X (QUOTE ARRAY)) 2)) 2) (EQ X (QUOTE ARRAY))))
162 Failed: (HANDLER-CASE (PROGN (LET ((X #\a)) (ETYPECASE X (STRING (SETQ X (QUOTE STRING)) 0) (CONS (SETQ X (QUOTE CONS)) 1) (ARRAY (SETQ X (QUOTE ARRAY)) 2)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
163 Pass: (LET ((X #(0 1))) (AND (EQUAL (MULTIPLE-VALUE-LIST (ETYPECASE X (STRING (SETQ X (QUOTE STRING)) (VALUES (QUOTE STRING) 0)) (CONS (SETQ X (QUOTE CONS)) (VALUES (QUOTE CONS) 1)) (ARRAY (SETQ X (QUOTE ARRAY)) (VALUES (QUOTE ARRAY) 2)))) (QUOTE (ARRAY 2))) (EQ X (QUOTE ARRAY))))
164 Pass: (MACRO-FUNCTION (QUOTE MULTIPLE-VALUE-BIND))
165 Pass: (EQUAL (MULTIPLE-VALUE-BIND (F R) (FLOOR 130 11) (LIST F R)) (QUOTE (11 9)))
166 Pass: (MULTIPLE-VALUE-BIND (A B C D) (VALUES 0 1 2 3 4 5) (AND (EQL A 0) (EQL B 1) (EQL C 2) (EQL D 3)))
167 Pass: (MULTIPLE-VALUE-BIND (A B C D) (VALUES 0 1) (AND (EQL A 0) (EQL B 1) (EQL C NIL) (EQL D NIL)))
168 Pass: (EQUAL (MULTIPLE-VALUE-LIST (MULTIPLE-VALUE-BIND (A B) (VALUES 0 1) (VALUES A B 2 3))) (QUOTE (0 1 2 3)))
169 Pass: (MULTIPLE-VALUE-BIND NIL (VALUES 0 1 2) T)
170 Pass: (NULL (MULTIPLE-VALUE-BIND NIL NIL))
171 Pass: (EQL (MULTIPLE-VALUE-BIND (A) (FLOOR 130 11) (+ A 10)) 21)
172 Pass: (EQL (MULTIPLE-VALUE-BIND (A) (FLOOR 130 11) (+ A 10) (INCF A 100) (+ A 10)) 121)
173 Failed: (EQUAL (MULTIPLE-VALUE-CALL (FUNCTION LIST) 1 (QUOTE /) (VALUES 2 3) (QUOTE /) (VALUES) (QUOTE /) (FLOOR 2.5)) (QUOTE (1 / 2 3 / / 2 0.5)))
174 Pass: (EQL (+ (FLOOR 5 3) (FLOOR 19 4)) (+ 1 4))
175 Failed: (EQL (MULTIPLE-VALUE-CALL (FUNCTION +) (FLOOR 5 3) (FLOOR 19 4)) (+ 1 2 4 3))
176 Failed: (LET ((LIST NIL)) (AND (EQL (MULTIPLE-VALUE-CALL (PROGN (PUSH (QUOTE FUNCTION) LIST) (FUNCTION +)) (PROGN (PUSH 0 LIST) 0) (PROGN (PUSH 1 LIST) (VALUES 1 2)) (PROGN (PUSH 2 LIST) (VALUES 3 4 5)) (PROGN (PUSH 3 LIST) (VALUES 6 7 8 9))) 45) (EQUAL (REVERSE LIST) (QUOTE (FUNCTION 0 1 2 3)))))
177 Pass: (EQL (MULTIPLE-VALUE-CALL (FUNCTION +) 0 1 2 3 4) 10)
178 Failed: invalid number of arguments for NIL: 1
179 Failed: (EQUAL (MULTIPLE-VALUE-LIST (MULTIPLE-VALUE-CALL (FUNCTION VALUES) 0 1 (VALUES 2) (VALUES 3 4) (VALUES 5 6 7))) (QUOTE (0 1 2 3 4 5 6 7)))
180 Pass: (SPECIAL-OPERATOR-P (QUOTE MULTIPLE-VALUE-CALL))
181 Pass: (MACRO-FUNCTION (QUOTE MULTIPLE-VALUE-LIST))
182 Failed: (EQUAL (MULTIPLE-VALUE-LIST (FLOOR -3 4)) (QUOTE (-1 1)))
183 Pass: (EQUAL (MULTIPLE-VALUE-LIST (PROGN (VALUES (QUOTE A) (QUOTE B)) 0)) (QUOTE (0)))
184 Pass: (EQUAL (MULTIPLE-VALUE-LIST (PROG1 (VALUES (QUOTE A) (QUOTE B)) 0)) (QUOTE (A)))
185 Pass: (EQUAL (MULTIPLE-VALUE-LIST (MULTIPLE-VALUE-PROG1 (VALUES (QUOTE A) (QUOTE B)) 0)) (QUOTE (A B)))
186 Pass: (SPECIAL-OPERATOR-P (QUOTE MULTIPLE-VALUE-PROG1))
187 Pass: (EQL (MULTIPLE-VALUE-PROG1 1 2 3) 1)
188 Pass: (EQL (MULTIPLE-VALUE-PROG1 1 2 3) 1)
189 Failed: The function VALUES-LIST is undefined
190 Pass: (ZEROP (MULTIPLE-VALUE-PROG1 0 (VALUES 0 1) (VALUES 0 1 2)))
191 Pass: (EQUAL (MULTIPLE-VALUE-LIST (MULTIPLE-VALUE-PROG1 (PROGN 0 (VALUES 0 1) (VALUES 0 1 2)))) (QUOTE (0 1 2)))
192 Failed: The function TRUNCATE is undefined
193 Pass: (LET ((A 7) (B 8) (C 9)) (AND (EQL (MULTIPLE-VALUE-SETQ (A B C) (VALUES 1 2)) 1) (EQL A 1) (EQL B 2) (EQL C NIL)))
194 Pass: (LET ((A 0) (B 1)) (AND (EQL (MULTIPLE-VALUE-SETQ (A B) (VALUES 4 5 6)) 4) (EQL A 4) (EQL B 5)))
195 Failed: The function VALUES-LIST is undefined
196 Failed: The function VALUES-LIST is undefined
197 Failed: The function VALUES-LIST is undefined
198 Failed: The function VALUES-LIST is undefined
199 Pass: (EVERY (FUNCTION (LAMBDA (LIST) (EQUAL (MULTIPLE-VALUE-LIST (VALUES-LIST LIST)) LIST))) (QUOTE NIL) (QUOTE (A)) (QUOTE (A B)) (QUOTE (A B C)) (QUOTE (A B C D)) (QUOTE (A B C D E)) (QUOTE (A B C D E F)) (QUOTE (A B C D E F G)) (QUOTE (A B C D E F G H)))
200 Failed: (MACRO-FUNCTION (QUOTE NTH-VALUE))
201 Failed: The function NTH-VALUE is undefined
202 Failed: The function NTH-VALUE is undefined
203 Failed: The function NTH-VALUE is undefined
204 Failed: The function NTH-VALUE is undefined
205 Failed: The function NTH-VALUE is undefined
206 Failed: The function NTH-VALUE is undefined
207 Failed: The function NTH-VALUE is undefined
208 Failed: The function NTH-VALUE is undefined
209 Failed: The function NTH-VALUE is undefined
210 Failed: The function NTH-VALUE is undefined
211 Failed: The function NTH-VALUE is undefined
212 Failed: The function NTH-VALUE is undefined
213 Failed: The function NTH-VALUE is undefined
214 Failed: Illegal function call: ((Y Z) (X (CAR Y)))
215 Failed: (MACRO-FUNCTION (QUOTE PROG))
216 Failed: (MACRO-FUNCTION (QUOTE PROG*))
217 Failed: Illegal function call: ((A 2) (B A))
218 Failed: Illegal function call: ((A 2) (B A))
219 Failed: The function PROG is undefined
220 Failed: return for unknown block: NIL
221 Failed: The function PROG is undefined
222 Failed: The function PROG is undefined
223 Failed: Illegal function call: ((A 10) (B 100))
224 Failed: return for unknown block: NIL
225 Failed: Illegal function call: ((A 0) B (C 2))
226 Failed: Illegal function call: ((A 0) (B 1) C)
227 Failed: return for unknown block: NIL
228 Failed: Illegal function call: ((A 10))
229 Failed: Illegal function call: ((A 10) B (C 100))
230 Failed: Illegal function call: ((A 10) B (C 100))
231 Failed: return for unknown block: NIL
232 Failed: Illegal function call: ((X LIST) (RESULT NIL))
233 Failed: attempt to GO to nonexistent tag: POINT-A
234 Failed: Illegal function call: ((A 100) (B A) (C 1))
235 Failed: The function PROG* is undefined
236 Failed: return for unknown block: NIL
237 Failed: The function PROG* is undefined
238 Failed: The function PROG* is undefined
239 Failed: Illegal function call: ((A 10) (B 100))
240 Failed: return for unknown block: NIL
241 Failed: Illegal function call: ((A 0) B (C 2))
242 Failed: Illegal function call: ((A 0) (B 1) C)
243 Failed: return for unknown block: NIL
244 Failed: Illegal function call: ((A 10))
245 Failed: Illegal function call: ((A 10) B (C 100))
246 Failed: Illegal function call: ((A 10) B (C 100))
247 Failed: return for unknown block: NIL
248 Failed: Illegal function call: ((X LIST) (RESULT NIL))
249 Failed: attempt to GO to nonexistent tag: POINT-A
250 Failed: Illegal function call: ((A 100) (B A) (C 1))
251 Pass: (MACRO-FUNCTION (QUOTE PROG1))
252 Failed: (MACRO-FUNCTION (QUOTE PROG2))
253 Pass: (EQL (LET ((TEMP 1)) (PROG1 TEMP (INCF TEMP) TEMP)) 1)
254 Pass: (LET ((TEMP T)) (AND (EQ (PROG1 TEMP (SETQ TEMP NIL)) (QUOTE T)) (NULL TEMP)))
255 Pass: (EQUAL (MULTIPLE-VALUE-LIST (PROG1 (VALUES 1 2 3) 4)) (QUOTE (1)))
256 Pass: (LET ((TEMP (LIST (QUOTE A) (QUOTE B) (QUOTE C)))) (AND (EQ (PROG1 (CAR TEMP) (SETF (CAR TEMP) (QUOTE ALPHA))) (QUOTE A)) (EQUAL TEMP (QUOTE (ALPHA B C)))))
257 Pass: (EQUAL (FLET ((SWAP-SYMBOL-VALUES (X Y) (SETF (SYMBOL-VALUE X) (PROG1 (SYMBOL-VALUE Y) (SETF (SYMBOL-VALUE Y) (SYMBOL-VALUE X)))))) (LET ((*FOO* 1) (*BAR* 2)) (DECLARE (SPECIAL *FOO* *BAR*)) (SWAP-SYMBOL-VALUES (QUOTE *FOO*) (QUOTE *BAR*)) (LIST *FOO* *BAR*))) (QUOTE (2 1)))
258 Failed: The function PROG2 is undefined
259 Failed: The function PROG2 is undefined
260 Failed: The function PROG2 is undefined
261 Pass: (EQL (PROG1 1) 1)
262 Pass: (EQL (PROG1 1 2) 1)
263 Pass: (EQL (PROG1 1 2 3) 1)
264 Pass: (EQUAL (MULTIPLE-VALUE-LIST (PROG1 (VALUES 1 2 3))) (QUOTE (1)))
265 Pass: (EQUAL (MULTIPLE-VALUE-LIST (PROG1 (VALUES 1 2 3) (VALUES 4 5 6) (VALUES 7 8 9))) (QUOTE (1)))
266 Failed: The function PROG2 is undefined
267 Failed: The function PROG2 is undefined
268 Failed: The function PROG2 is undefined
269 Failed: The function PROG2 is undefined
270 Pass: (LET ((X (CONS (QUOTE A) (QUOTE B))) (Y (LIST 1 2 3))) (AND (EQUAL (SETF (CAR X) (QUOTE X) (CADR Y) (CAR X) (CDR X) Y) (QUOTE (1 X 3))) (EQUAL X (QUOTE (X 1 X 3))) (EQUAL Y (QUOTE (1 X 3)))))
271 Failed: The function PSETF is undefined
272 Pass: (NULL (SETF))
273 Failed: The function PSETF is undefined
274 Pass: (LET ((A 0)) (AND (EQL (SETF A 10) 10) (EQL A 10)))
275 Pass: (LET ((A 0) (B 1)) (AND (EQL (SETF A 10 B 20) 20) (EQL A 10) (EQL B 20)))
276 Pass: (LET ((A 0) (B 1) (C 2)) (AND (EQL (SETF A 10 B (+ A 10) C (+ B 10)) 30) (EQL A 10) (EQL B 20) (EQL C 30)))
277 Pass: (LET ((X (LIST 0 1 2))) (AND (EQ (SETF (CAR X) (QUOTE A)) (QUOTE A)) (EQ (SETF (CADR X) (QUOTE B)) (QUOTE B)) (EQ (SETF (CADDR X) (QUOTE C)) (QUOTE C)) (EQUAL X (QUOTE (A B C)))))
278 Failed: The function PSETF is undefined
279 Failed: The function PSETF is undefined
280 Failed: The function PSETF is undefined
281 Failed: The function PSETF is undefined
282 Failed: no dispatch function defined for #\A
283 Failed: Illegal function call: ((0 0.1 0.2) (1 1.1 1.2))
284 Failed: unmatched close parenthesis
285 Failed: unmatched close parenthesis
286 Failed: unmatched close parenthesis
287 Pass: (LET ((X (MAKE-ARRAY 4 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0))) (AND (EQUALP X #(0 0 0 0)) (EQL (SETF (BIT X 0) 1) 1) (EQL (SETF (BIT X 2) 1) 1) (EQUAL X #(1 0 1 0))))
288 Pass: (LET ((X (COPY-SEQ "dog"))) (AND (EQL (SETF (CHAR X 0) #\c) #\c) (EQL (SETF (CHAR X 1) #\a) #\a) (EQL (SETF (CHAR X 2) #\t) #\t) (EQUAL X "cat")))
289 Pass: (LET ((X (COPY-SEQ "dog"))) (AND (EQL (SETF (SCHAR X 0) #\c) #\c) (EQL (SETF (SCHAR X 1) #\a) #\a) (EQL (SETF (SCHAR X 2) #\t) #\t) (EQUAL X "cat")))
290 Pass: (LET ((X (COPY-SEQ "dog"))) (AND (EQL (SETF (ELT X 0) #\c) #\c) (EQL (SETF (ELT X 1) #\a) #\a) (EQL (SETF (ELT X 2) #\t) #\t) (EQUAL X "cat")))
291 Failed: (LET ((X (LIST 0 1 2))) (AND (EQL (SETF (ELT X 0) #\c) #\c) (EQL (SETF (ELT X 1) #\a) #\a) (EQL (SETF (ELT X 2) #\t) #\t) (EQUAL X (QUOTE (#\c #\a #\t)))))
292 Pass: (LET ((X (FUNCTION (LAMBDA (A) (+ A 10)))) (SAVED (WHEN (FBOUNDP (QUOTE TEST-FN)) (FDEFINITION (QUOTE TEST-FN))))) (UNWIND-PROTECT (AND (EQ (SETF (FDEFINITION (QUOTE TEST-FN)) X) X) (EQL (TEST-FN 10) 20)) (WHEN SAVED (SETF (FDEFINITION (QUOTE TEST-FN)) SAVED))))
293 Pass: (LET ((TABLE (MAKE-HASH-TABLE))) (AND (EQUAL (MULTIPLE-VALUE-LIST (GETHASH 1 TABLE)) (QUOTE (NIL NIL))) (EQUAL (MULTIPLE-VALUE-LIST (GETHASH 1 TABLE 2)) (QUOTE (2 NIL))) (EQUAL (SETF (GETHASH 1 TABLE) "one") "one") (EQUAL (SETF (GETHASH 2 TABLE "two") "two") "two") (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH 1 TABLE) (AND (EQUAL VALUE "one") PRESENT-P)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH 2 TABLE) (AND (EQUAL VALUE "two") PRESENT-P))))
294 Pass: (LET ((TABLE (MAKE-HASH-TABLE))) (AND (EQUAL (MULTIPLE-VALUE-LIST (GETHASH NIL TABLE)) (QUOTE (NIL NIL))) (NULL (SETF (GETHASH NIL TABLE) NIL)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH NIL TABLE) (AND (EQUAL VALUE NIL) PRESENT-P))))
295 Pass: (LET ((X (COPY-SEQ #(0 1 0 1)))) (AND (EQL (SETF (SBIT X 0) 1) 1) (EQL (SETF (SBIT X 2) 1) 1) (EQUAL X #(1 1 1 1))))
296 Failed: The function (SETF VALUES) is undefined.
297 Failed: The function (SETF VALUES) is undefined.
298 Failed: The function (SETF VALUES) is undefined.
299 Failed: The function (SETF VALUES) is undefined.
300 Failed: The function (SETF VALUES) is undefined.
301 Failed: The function (SETF VALUES) is undefined.
302 Failed: The function SHIFTF is undefined
303 Failed: The function SHIFTF is undefined
304 Failed: The function SHIFTF is undefined
305 Failed: The function SHIFTF is undefined
306 Failed: The function ROTATEF is undefined
307 Failed: The function ROTATEF is undefined
308 Failed: The function ROTATEF is undefined
309 Failed: The function ROTATEF is undefined
310 Failed: The function ROTATEF is undefined
311 Failed: The function ROTATEF is undefined
312 Failed: The function PSETF is undefined
313 Failed: The function ROTATEF is undefined
Pass: 170, Failed: 144

test: sacla-tests/must-do.lisp
0 Pass: (NULL (DOTIMES (I 10)))
1 Pass: (= (DOTIMES (TEMP-ONE 10 TEMP-ONE)) 10)
2 Pass: (LET ((TEMP-TWO 0)) (AND (EQ T (DOTIMES (TEMP-ONE 10 T) (INCF TEMP-TWO))) (EQL TEMP-TWO 10)))
3 Pass: (PROGN (DEFUN PALINDROMEP (STRING &OPTIONAL (START 0) (END (LENGTH STRING))) (DOTIMES (K (FLOOR (- END START) 2) T) (UNLESS (CHAR-EQUAL (CHAR STRING (+ START K)) (CHAR STRING (- END K 1))) (RETURN NIL)))) (AND (PALINDROMEP "Able was I ere I saw Elba") (NOT (PALINDROMEP "A man, a plan, a canal--Panama!")) (EQUAL (REMOVE-IF-NOT (FUNCTION ALPHA-CHAR-P) "A man, a plan, a canal--Panama!") "AmanaplanacanalPanama") (PALINDROMEP (REMOVE-IF-NOT (FUNCTION ALPHA-CHAR-P) "A man, a plan, a canal--Panama!")) (PALINDROMEP (REMOVE-IF-NOT (FUNCTION ALPHA-CHAR-P) "Unremarkable was I ere I saw Elba Kramer, nu?"))))
4 Pass: (LET ((COUNT 0)) (EQL (DOTIMES (I 5 COUNT) (INCF COUNT)) 5))
5 Pass: (LET ((COUNT 0)) (EQL (DOTIMES (I 1 COUNT) (INCF COUNT)) 1))
6 Pass: (LET ((COUNT 0)) (ZEROP (DOTIMES (I 0 COUNT) (INCF COUNT))))
7 Pass: (LET ((COUNT 0)) (ZEROP (DOTIMES (I -1 COUNT) (INCF COUNT))))
8 Pass: (LET ((COUNT 0)) (ZEROP (DOTIMES (I -100 COUNT) (INCF COUNT))))
9 Pass: (EQL (DOTIMES (I 3 I)) 3)
10 Pass: (EQL (DOTIMES (I 2 I)) 2)
11 Pass: (EQL (DOTIMES (I 1 I)) 1)
12 Pass: (EQL (DOTIMES (I 0 I)) 0)
13 Pass: (EQL (DOTIMES (I -1 I)) 0)
14 Pass: (EQL (DOTIMES (I -2 I)) 0)
15 Pass: (EQL (DOTIMES (I -10 I)) 0)
16 Pass: (LET ((LIST NIL)) (AND (EQ (DOTIMES (I 10 T) (PUSH I LIST)) T) (EQUAL LIST (QUOTE (9 8 7 6 5 4 3 2 1 0)))))
17 Pass: (LET ((LIST NIL)) (EQUAL (DOTIMES (I 10 (PUSH I LIST)) (PUSH I LIST)) (QUOTE (10 9 8 7 6 5 4 3 2 1 0))))
18 Pass: (LET ((LIST NIL)) (EQUAL (DOTIMES (I (QUOTE 10) (PUSH I LIST)) (PUSH I LIST)) (QUOTE (10 9 8 7 6 5 4 3 2 1 0))))
19 Pass: (LET ((LIST NIL)) (EQUAL (DOTIMES (I (/ 100 10) (PUSH I LIST)) (PUSH I LIST)) (QUOTE (10 9 8 7 6 5 4 3 2 1 0))))
20 Pass: (NULL (DOTIMES (I 10 T) (RETURN NIL)))
21 Pass: (EQUAL (MULTIPLE-VALUE-LIST (DOTIMES (I 10 T) (RETURN (VALUES (QUOTE A) (QUOTE B) (QUOTE C))))) (QUOTE (A B C)))
22 Pass: (LET ((VAL 0)) (= (DOTIMES (I 10 VAL) (INCF VAL 1) (WHEN (< I 9) (GO LP)) (INCF VAL 2) LP (INCF VAL 3)) 42))
23 Pass: (= (LET ((VAL 0)) (DOTIMES (I 10 VAL) (WHEN (< I 9) (GO LOOP)) 9 (INCF VAL 100) (GO LAST) LOOP (WHEN (= I 0) (GO 9)) (INCF VAL) LAST)) 208)
24 Pass: (= 3 (LET ((I 3)) (DOTIMES (I I I) (DECLARE (FIXNUM I)))))
25 Pass: (= 3 (LET ((X 0)) (DOTIMES (I 3 X) (DECLARE (FIXNUM I)) (INCF X))))
26 Pass: (= 3 (DOTIMES (I 3 I) (DECLARE (FIXNUM I))))
27 Pass: (= 3 (LET ((X 0)) (DOTIMES (I 3 X) (DECLARE (FIXNUM I)) (INCF X))))
28 Pass: (EQUAL (QUOTE ((8 6 4 2 0) (9 7 5 3 1))) (LET (EVEN ODD) (DOTIMES (I 10 (LIST EVEN ODD)) (COND ((EVENP I) (GO EVEN)) ((ODDP I) (GO ODD)) (T (ERROR "logic error"))) EVEN (PUSH I EVEN) (GO END) ODD (PUSH I ODD) (GO END) END)))
29 Pass: (LET ((LIST (COPY-TREE (QUOTE ((0) (1) (2) (3)))))) (AND (NULL (DOLIST (ITEM LIST) (INCF (CAR ITEM)))) (EQUAL LIST (QUOTE ((1) (2) (3) (4))))))
30 Pass: (EQ (QUOTE OK) (DOLIST (X (QUOTE (0 1 2)) T) (RETURN (QUOTE OK))))
31 Pass: (EQ (QUOTE OK) (DOLIST (X (QUOTE (0 1 2)) T) (RETURN-FROM NIL (QUOTE OK))))
32 Pass: (EQUAL (QUOTE (OK FINE)) (MULTIPLE-VALUE-LIST (DOLIST (X (QUOTE (0 1 2)) T) (RETURN (VALUES (QUOTE OK) (QUOTE FINE))))))
33 Pass: (EQUAL (QUOTE (OK FINE)) (MULTIPLE-VALUE-LIST (DOLIST (X (QUOTE (0 1 2)) T) (RETURN-FROM NIL (VALUES (QUOTE OK) (QUOTE FINE))))))
34 Pass: (NULL (LET ((X (QUOTE (0 1 2)))) (DOLIST (X X X))))
35 Pass: (= 3 (LET ((X (QUOTE (0 1 2))) (I 0)) (DOLIST (X X I) (INCF I))))
36 Pass: (NULL (DOLIST (X (QUOTE NIL))))
37 Pass: (NULL (DOLIST (X (QUOTE (A)))))
38 Pass: (EQ T (DOLIST (X NIL T)))
39 Pass: (= 6 (LET ((SUM 0)) (DOLIST (X (QUOTE (0 1 2 3)) SUM) (DECLARE (FIXNUM X)) (INCF SUM X))))
40 Pass: (EQUAL (QUOTE (5 4 3 2 1)) (LET (STACK) (FLET ((F NIL (DECLARE (SPECIAL X)) (1+ X))) (DOLIST (X (QUOTE (0 1 2 3 4)) STACK) (DECLARE (SPECIAL X)) (DECLARE (TYPE FIXNUM X)) (PUSH (F) STACK)))))
41 Pass: (EQUAL (QUOTE ((3 1) (4 2 0))) (LET (ODD EVEN) (DOLIST (X (QUOTE (0 1 2 3 4)) (LIST ODD EVEN)) (COND ((ODDP X) (GO ODD)) ((EVENP X) (GO EVEN)) (T (ERROR "This code mustn't have got executed."))) ODD (PUSH X ODD) (GO LOOP-END) EVEN (PUSH X EVEN) (GO LOOP-END) LOOP-END)))
42 Pass: (LET ((TEMP-TWO (QUOTE NIL))) (EQUAL (DOLIST (TEMP-ONE (QUOTE (1 2 3 4)) TEMP-TWO) (PUSH TEMP-ONE TEMP-TWO)) (QUOTE (4 3 2 1))))
43 Pass: (LET ((TEMP-TWO 0)) (AND (NULL (DOLIST (TEMP-ONE (QUOTE (1 2 3 4))) (INCF TEMP-TWO))) (EQL TEMP-TWO 4)))
44 Pass: (NULL (DOLIST (VAR NIL VAR)))
45 Pass: (LET ((LIST NIL)) (EQUAL (DOLIST (VAR (QUOTE (0 1 2 3)) LIST) (PUSH VAR LIST)) (QUOTE (3 2 1 0))))
46 Pass: (LET ((LIST NIL)) (EQUAL (DOLIST (VAR (QUOTE (0 1 2 3)) (PUSH VAR LIST)) (PUSH VAR LIST)) (QUOTE (NIL 3 2 1 0))))
47 Pass: (NULL (DOLIST (VAR (QUOTE (0 1 2 3)))))
48 Pass: (LET ((LIST NIL)) (AND (NULL (DOLIST (VAR (QUOTE (0 1 2 3))) (PUSH VAR LIST))) (EQUAL LIST (QUOTE (3 2 1 0)))))
49 Pass: (LET ((LIST NIL)) (AND (EQ (DOLIST (VAR (QUOTE NIL) T) (PUSH VAR LIST)) T) (NULL LIST)))
50 Pass: (LET ((LIST (QUOTE ((A) (B) (C)))) (COUNT 0)) (DOLIST (VAR LIST T) (UNLESS (EQ (NTH COUNT LIST) VAR) (RETURN NIL)) (INCF COUNT)))
51 Pass: (LET ((LIST NIL)) (AND (NULL (DOLIST (VAR (QUOTE (0 1 2 3)) T) (IF (= VAR 2) (RETURN) (PUSH VAR LIST)))) (EQUAL LIST (QUOTE (1 0)))))
52 Pass: (LET ((VAL 0)) (= (DOLIST (VAR (QUOTE (A B C)) VAL) (INCF VAL 1) (UNLESS (EQ VAR (QUOTE C)) (GO LP)) (INCF VAL 2) LP (INCF VAL 3)) 14))
53 Pass: (= (LET ((VAL 0)) (DOLIST (I (QUOTE (0 1 2 3 4 5 6 7 8 9)) VAL) (WHEN (< I 9) (GO LOOP)) 9 (INCF VAL 100) (GO LAST) LOOP (WHEN (= I 0) (GO 9)) (INCF VAL) LAST)) 208)
54 Pass: (LET ((VAL 0)) (= (DOLIST (I (QUOTE (0 1 2 3 4 5 6 7 8 9)) VAL) (INCF VAL 1) (WHEN (< I 9) (GO LP)) (INCF VAL 2) LP (INCF VAL 3)) 42))
55 Pass: (EQ (QUOTE OK) (BLOCK NIL (TAGBODY (DOLIST (X (QUOTE (0 1 2 3)) T) (WHEN (ODDP X) (GO THERE))) THERE (RETURN (QUOTE OK)))))
56 Pass: (FLET ((REV (LIST) (DO ((X LIST (CDR X)) (REVERSE NIL (CONS (CAR X) REVERSE))) ((NULL X) REVERSE)))) (AND (NULL (REV NIL)) (EQUAL (REV (QUOTE (0 1 2 3 4))) (QUOTE (4 3 2 1 0)))))
57 Pass: (FLET ((NREV (LIST) (DO ((1ST (CDR LIST) (CDR 1ST)) (2ND LIST 1ST) (3RD (QUOTE NIL) 2ND)) ((NULL 2ND) 3RD) (RPLACD 2ND 3RD)))) (AND (NULL (NREV NIL)) (EQUAL (NREV (LIST 0 1 2 3 4)) (QUOTE (4 3 2 1 0)))))
58 Pass: (FLET ((SUB (LIST START END) (DO* ((X (NTHCDR START LIST) (CDR X)) (I START (1+ I)) (RESULT (LIST NIL)) (SPLICE RESULT)) ((>= I END) (CDR RESULT)) (SETQ SPLICE (CDR (RPLACD SPLICE (LIST (CAR X)))))))) (AND (EQ (SUB (QUOTE NIL) 0 0) (QUOTE NIL)) (EQUAL (SUB (QUOTE (0 1 2 3)) 1 4) (QUOTE (1 2 3))) (EQUAL (SUB (QUOTE (0 1 2 3)) 1 1) (QUOTE NIL)) (EQUAL (SUB (QUOTE (0 1 2 3)) 1 2) (QUOTE (1))) (EQUAL (SUB (QUOTE (0 1 2 3)) 1 3) (QUOTE (1 2)))))
59 Pass: (EQL (DO ((TEMP-ONE 1 (1+ TEMP-ONE)) (TEMP-TWO 0 (1- TEMP-TWO))) ((> (- TEMP-ONE TEMP-TWO) 5) TEMP-ONE)) 4)
60 Pass: (EQL (DO ((TEMP-ONE 1 (1+ TEMP-ONE)) (TEMP-TWO 0 (1+ TEMP-ONE))) ((= 3 TEMP-TWO) TEMP-ONE)) 3)
61 Pass: (EQL (DO* ((TEMP-ONE 1 (1+ TEMP-ONE)) (TEMP-TWO 0 (1+ TEMP-ONE))) ((= 3 TEMP-TWO) TEMP-ONE)) 2)
62 Pass: (LET ((A-VECTOR (VECTOR 1 NIL 3 NIL))) (AND (NULL (DO ((I 0 (+ I 1)) (N (ARRAY-DIMENSION A-VECTOR 0))) ((= I N)) (WHEN (NULL (AREF A-VECTOR I)) (SETF (AREF A-VECTOR I) 0)))) (EQUALP A-VECTOR #(1 0 3 0))))
63 Pass: (LET ((VEC (VECTOR 0 1 2 3 4 5 6 7 8 9))) (EQUALP (DO ((I 0 (1+ I)) N (J 9 (1- J))) ((>= I J) VEC) (SETQ N (AREF VEC I)) (SETF (AREF VEC I) (AREF VEC J)) (SETF (AREF VEC J) N)) #(9 8 7 6 5 4 3 2 1 0)))
64 Pass: (LET ((VEC (VECTOR 0 1 2 3 4 5 6 7 8 9))) (AND (NULL (DO ((I 0 (1+ I)) N (J 9 (1- J))) ((>= I J)) (SETQ N (AREF VEC I)) (SETF (AREF VEC I) (AREF VEC J)) (SETF (AREF VEC J) N))) (EQUALP VEC #(9 8 7 6 5 4 3 2 1 0))))
65 Pass: (LET ((VEC (VECTOR 0 1 2 3 4 5 6 7 8 9))) (AND (NULL (DO ((I 0 (1+ I)) N (J 9 (1- J))) ((>= I J)) (DECLARE (FIXNUM I J N)) (SETQ N (AREF VEC I)) (SETF (AREF VEC I) (AREF VEC J)) (SETF (AREF VEC J) N))) (EQUALP VEC #(9 8 7 6 5 4 3 2 1 0))))
66 Pass: (LET ((VEC (VECTOR 0 1 2 3 4 5 6 7 8 9))) (AND (NULL (DO ((I 0 (1+ I)) N (J 9 (1- J))) ((>= I J)) (DECLARE (FIXNUM I)) (DECLARE (FIXNUM J)) (DECLARE (FIXNUM N)) (SETQ N (AREF VEC I)) (SETF (AREF VEC I) (AREF VEC J)) (SETF (AREF VEC J) N))) (EQUALP VEC #(9 8 7 6 5 4 3 2 1 0))))
67 Pass: (LET ((VEC (VECTOR 0 1 2 3 4 5 6 7 8 9))) (AND (NULL (DO (N (I 0 (1+ I)) (J 9 (1- J))) ((>= I J)) (DECLARE (FIXNUM I)) (DECLARE (FIXNUM J)) (DECLARE (FIXNUM N)) (SETQ N (AREF VEC I)) (SETF (AREF VEC I) (AREF VEC J)) (SETF (AREF VEC J) N))) (EQUALP VEC #(9 8 7 6 5 4 3 2 1 0))))
68 Pass: (LET ((VEC (VECTOR 0 1 2 3 4 5 6 7 8 9))) (AND (NULL (DO ((I 0 (1+ I)) (J 9 (1- J)) N) ((>= I J)) (DECLARE (FIXNUM I)) (DECLARE (FIXNUM J)) (DECLARE (FIXNUM N)) (SETQ N (AREF VEC I)) (SETF (AREF VEC I) (AREF VEC J)) (SETF (AREF VEC J) N))) (EQUALP VEC #(9 8 7 6 5 4 3 2 1 0))))
69 Pass: (= (DO* ((LIST (LIST 0 1 2 3 4 5 6 7 8 9) (CDR LIST)) (ELM (CAR LIST) (CAR LIST)) (N 0 (+ N (OR ELM 0)))) ((ENDP LIST) N)) 45)
70 Pass: (= (DO* ((LIST (LIST 0 1 2 3 4 5 6 7 8 9) (CDR LIST)) (ELM (CAR LIST) (CAR LIST)) (N 0)) ((ENDP LIST) N) (INCF N ELM)) 45)
71 Pass: (LET ((VEC (VECTOR 0 1 2 3 4 5 6 7 8 9))) (AND (NULL (DO* (N (I 0 (1+ I)) (J (- 9 I) (- 9 I))) ((>= I J)) (DECLARE (FIXNUM I)) (DECLARE (FIXNUM J)) (DECLARE (FIXNUM N)) (SETQ N (AREF VEC I)) (SETF (AREF VEC I) (AREF VEC J)) (SETF (AREF VEC J) N))) (EQUALP VEC #(9 8 7 6 5 4 3 2 1 0))))
72 Pass: (LET ((VEC (VECTOR 0 1 2 3 4 5 6 7 8 9))) (AND (NULL (DO* ((I 0 (1+ I)) N (J (- 9 I) (- 9 I))) ((>= I J)) (DECLARE (FIXNUM I J N)) (SETQ N (AREF VEC I)) (SETF (AREF VEC I) (AREF VEC J)) (SETF (AREF VEC J) N))) (EQUALP VEC #(9 8 7 6 5 4 3 2 1 0))))
73 Pass: (LET ((VEC (VECTOR 0 1 2 3 4 5 6 7 8 9))) (AND (NULL (DO* ((I 0 (1+ I)) (J (- 9 I) (- 9 I)) N) ((>= I J)) (DECLARE (FIXNUM I J N)) (SETQ N (AREF VEC I)) (SETF (AREF VEC I) (AREF VEC J)) (SETF (AREF VEC J) N))) (EQUALP VEC #(9 8 7 6 5 4 3 2 1 0))))
74 Pass: (LET ((VEC (VECTOR 0 1 2 3 4 5 6 7 8 9))) (AND (NULL (DO* ((I 0 (1+ I)) (J (- 9 I) (- 9 I)) N) ((>= I J)) (SETF N (AREF VEC I) (AREF VEC I) (AREF VEC J) (AREF VEC J) N))) (EQUALP VEC #(9 8 7 6 5 4 3 2 1 0))))
Pass: 75, Failed: 0

test: sacla-tests/must-eval.lisp
0 Pass: (= (FUNCALL (LAMBDA (X) (+ X 3)) 4) 7)
1 Pass: (= (FUNCALL (LAMBDA (&REST ARGS) (APPLY (FUNCTION +) ARGS)) 1 2 3 4) 10)
2 Pass: (FUNCTIONP (LAMBDA (&REST ARGS) (APPLY (FUNCTION +) ARGS)))
3 Pass: (FUNCTIONP (MACRO-FUNCTION (QUOTE LAMBDA)))
4 Pass: (EVERY (FUNCTION SPECIAL-OPERATOR-P) (QUOTE (BLOCK CATCH EVAL-WHEN FLET FUNCTION GO IF LABELS LET LET* LOAD-TIME-VALUE LOCALLY MACROLET MULTIPLE-VALUE-CALL MULTIPLE-VALUE-PROG1 PROGN PROGV QUOTE RETURN-FROM SETQ SYMBOL-MACROLET TAGBODY THE THROW UNWIND-PROTECT)))
5 Pass: (NOT (SPECIAL-OPERATOR-P (QUOTE CAR)))
6 Pass: (NOT (SPECIAL-OPERATOR-P (QUOTE CDR)))
7 Pass: (NOT (SPECIAL-OPERATOR-P (QUOTE COND)))
8 Pass: (NOT (SPECIAL-OPERATOR-P (QUOTE VALUES)))
Pass: 9, Failed: 0

test: sacla-tests/must-hash-table.lisp
0 Pass: (LET ((TABLE (MAKE-HASH-TABLE))) (AND (HASH-TABLE-P TABLE) (EQL (SETF (GETHASH "one" TABLE) 1) 1) (EQUAL (MULTIPLE-VALUE-LIST (GETHASH (COPY-SEQ "one") TABLE)) (QUOTE (NIL NIL)))))
1 Failed: (LET ((TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQUAL)))) (AND (HASH-TABLE-P TABLE) (EQL (SETF (GETHASH "one" TABLE) 1) 1) (EQUAL (MULTIPLE-VALUE-LIST (GETHASH (COPY-SEQ "one") TABLE)) (QUOTE (1 T)))))
2 Pass: (MAKE-HASH-TABLE :REHASH-SIZE 1.5 :REHASH-THRESHOLD 0.7000000000000001)
3 Pass: (MAKE-HASH-TABLE)
4 Pass: (HASH-TABLE-P (MAKE-HASH-TABLE))
5 Pass: (DOLIST (TEST (QUOTE (EQ EQL EQUAL EQUALP)) T) (LET ((HASH-TABLE (MAKE-HASH-TABLE :TEST TEST))) (UNLESS (AND (HASH-TABLE-P HASH-TABLE) (EQ (HASH-TABLE-TEST HASH-TABLE) TEST)) (RETURN NIL))))
6 Failed: (DOLIST (TEST (QUOTE (EQ EQL EQUAL EQUALP)) T) (LET* ((TEST-FUNCTION (SYMBOL-FUNCTION TEST)) (HASH-TABLE (MAKE-HASH-TABLE :TEST TEST-FUNCTION))) (UNLESS (AND (HASH-TABLE-P HASH-TABLE) (EQ (HASH-TABLE-TEST HASH-TABLE) TEST)) (RETURN NIL))))
7 Pass: (HASH-TABLE-P (MAKE-HASH-TABLE :SIZE 0))
8 Pass: (HASH-TABLE-P (MAKE-HASH-TABLE :SIZE 1))
9 Pass: (HASH-TABLE-P (MAKE-HASH-TABLE :SIZE 2))
10 Pass: (HASH-TABLE-P (MAKE-HASH-TABLE :SIZE 3))
11 Pass: (HASH-TABLE-P (MAKE-HASH-TABLE :SIZE 1000))
12 Pass: (HASH-TABLE-P (MAKE-HASH-TABLE :REHASH-SIZE 1))
13 Pass: (HASH-TABLE-P (MAKE-HASH-TABLE :REHASH-SIZE 100))
14 Pass: (HASH-TABLE-P (MAKE-HASH-TABLE :REHASH-SIZE 1.5))
15 Pass: (HASH-TABLE-P (MAKE-HASH-TABLE :REHASH-SIZE 1))
16 Pass: (HASH-TABLE-P (MAKE-HASH-TABLE :REHASH-THRESHOLD 0))
17 Pass: (HASH-TABLE-P (MAKE-HASH-TABLE :REHASH-THRESHOLD 0))
18 Pass: (HASH-TABLE-P (MAKE-HASH-TABLE :REHASH-THRESHOLD 0.1))
19 Pass: (HASH-TABLE-P (MAKE-HASH-TABLE :REHASH-THRESHOLD 0.12000000000000002))
20 Pass: (HASH-TABLE-P (MAKE-HASH-TABLE :REHASH-THRESHOLD 0.5))
21 Pass: (HASH-TABLE-P (MAKE-HASH-TABLE :REHASH-THRESHOLD 0))
22 Pass: (HASH-TABLE-P (MAKE-HASH-TABLE :REHASH-THRESHOLD 0.8880000000000002))
23 Pass: (HASH-TABLE-P (MAKE-HASH-TABLE :REHASH-THRESHOLD 0.9900000000000002))
24 Pass: (HASH-TABLE-P (MAKE-HASH-TABLE :REHASH-THRESHOLD 1))
25 Pass: (HASH-TABLE-P (MAKE-HASH-TABLE :REHASH-THRESHOLD 1))
26 Pass: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 0 :REHASH-SIZE 1.1 :REHASH-THRESHOLD 0))) (AND (DOTIMES (I 10 T) (SETF (GETHASH I TABLE) I)) (DOTIMES (I 10 T) (UNLESS (EQL (GETHASH I TABLE) I) (RETURN NIL))) (HASH-TABLE-P TABLE)))
27 Pass: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 1 :REHASH-SIZE 1 :REHASH-THRESHOLD 1))) (AND (DOTIMES (I 100 T) (SETF (GETHASH I TABLE) I)) (DOTIMES (I 100 T) (UNLESS (EQL (GETHASH I TABLE) I) (RETURN NIL))) (HASH-TABLE-P TABLE)))
28 Pass: (NOT (HASH-TABLE-P (QUOTE HASH-TABLE)))
29 Pass: (LET ((TABLE (MAKE-HASH-TABLE))) (HASH-TABLE-P TABLE))
30 Pass: (NOT (HASH-TABLE-P 37))
31 Pass: (NOT (HASH-TABLE-P (QUOTE ((A . 1) (B . 2)))))
32 Pass: (NOT (HASH-TABLE-P (TYPE-OF (MAKE-HASH-TABLE))))
33 Pass: (LET ((TABLE (MAKE-HASH-TABLE))) (AND (ZEROP (HASH-TABLE-COUNT TABLE)) (EQUAL (SETF (GETHASH 57 TABLE) "fifty-seven") "fifty-seven") (EQL (HASH-TABLE-COUNT TABLE) 1) (DOTIMES (I 100 T) (SETF (GETHASH I TABLE) I)) (EQL (HASH-TABLE-COUNT TABLE) 100)))
34 Pass: (ZEROP (HASH-TABLE-COUNT (MAKE-HASH-TABLE)))
35 Pass: (LET ((TABLE (MAKE-HASH-TABLE))) (AND (EQL (SETF (GETHASH (QUOTE KEY) TABLE) 9) 9) (= (HASH-TABLE-COUNT TABLE) 1)))
36 Pass: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 100 :REHASH-SIZE 1.4))) (= (HASH-TABLE-REHASH-SIZE TABLE) 1.4))
37 Pass: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 100 :REHASH-THRESHOLD 0.5))) (= (HASH-TABLE-REHASH-THRESHOLD TABLE) 0.5))
38 Pass: (<= 0 (HASH-TABLE-SIZE (MAKE-HASH-TABLE)))
39 Pass: (EQ (QUOTE EQ) (HASH-TABLE-TEST (MAKE-HASH-TABLE :TEST (QUOTE EQ))))
40 Failed: (EQ (QUOTE EQ) (HASH-TABLE-TEST (MAKE-HASH-TABLE :TEST (FUNCTION EQ))))
41 Failed: (EQ (QUOTE EQL) (HASH-TABLE-TEST (MAKE-HASH-TABLE)))
42 Pass: (EQ (QUOTE EQL) (HASH-TABLE-TEST (MAKE-HASH-TABLE :TEST (QUOTE EQL))))
43 Failed: (EQ (QUOTE EQL) (HASH-TABLE-TEST (MAKE-HASH-TABLE :TEST (FUNCTION EQL))))
44 Pass: (EQ (QUOTE EQUAL) (HASH-TABLE-TEST (MAKE-HASH-TABLE :TEST (QUOTE EQUAL))))
45 Failed: (EQ (QUOTE EQUAL) (HASH-TABLE-TEST (MAKE-HASH-TABLE :TEST (FUNCTION EQUAL))))
46 Pass: (EQ (QUOTE EQUALP) (HASH-TABLE-TEST (MAKE-HASH-TABLE :TEST (QUOTE EQUALP))))
47 Failed: (EQ (QUOTE EQUALP) (HASH-TABLE-TEST (MAKE-HASH-TABLE :TEST (FUNCTION EQUALP))))
48 Pass: (LET* ((TABLE0 (MAKE-HASH-TABLE)) (TABLE (MAKE-HASH-TABLE :SIZE (HASH-TABLE-SIZE TABLE0) :TEST (HASH-TABLE-TEST TABLE0) :REHASH-THRESHOLD (HASH-TABLE-REHASH-THRESHOLD TABLE0) :REHASH-SIZE (HASH-TABLE-REHASH-SIZE TABLE0)))) (AND (HASH-TABLE-P TABLE) (ZEROP (HASH-TABLE-COUNT TABLE)) (EQ (TYPE-OF TABLE) (QUOTE HASH-TABLE))))
49 Pass: (LET ((TABLE (MAKE-HASH-TABLE))) (AND (EQUAL (MULTIPLE-VALUE-LIST (GETHASH 1 TABLE)) (QUOTE (NIL NIL))) (EQUAL (MULTIPLE-VALUE-LIST (GETHASH 1 TABLE 2)) (QUOTE (2 NIL))) (EQUAL (SETF (GETHASH 1 TABLE) "one") "one") (EQUAL (SETF (GETHASH 2 TABLE "two") "two") "two") (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH 1 TABLE) (AND (EQUAL VALUE "one") PRESENT-P)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH 2 TABLE) (AND (EQUAL VALUE "two") PRESENT-P)) (EQUAL (MULTIPLE-VALUE-LIST (GETHASH NIL TABLE)) (QUOTE (NIL NIL))) (NULL (SETF (GETHASH NIL TABLE) NIL)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH NIL TABLE) (AND (NOT VALUE) PRESENT-P))))
50 Pass: (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH (QUOTE KEY) (MAKE-HASH-TABLE) (QUOTE DEFAULT)) (AND (EQ VALUE (QUOTE DEFAULT)) (NOT PRESENT-P)))
51 Pass: (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH (QUOTE KEY) (MAKE-HASH-TABLE)) (AND (NULL VALUE) (NOT PRESENT-P)))
52 Pass: (LET ((TABLE (MAKE-HASH-TABLE))) (AND (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH (QUOTE KEY) TABLE) (AND (NULL VALUE) (NOT PRESENT-P))) (EQL (SETF (GETHASH (QUOTE KEY) TABLE) 100) 100) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH (QUOTE KEY) TABLE) (AND (EQL VALUE 100) PRESENT-P))))
53 Pass: (LET ((TABLE (MAKE-HASH-TABLE)) (LIST NIL)) (AND (EQL (SETF (GETHASH (PROGN (PUSH 0 LIST) 0) (PROGN (PUSH 1 LIST) TABLE) (PROGN (PUSH 2 LIST) (QUOTE DEFAULT))) (PROGN (PUSH 3 LIST) 9)) 9) (EQUAL LIST (QUOTE (3 2 1 0)))))
54 Pass: (LET ((TABLE (MAKE-HASH-TABLE))) (AND (DOTIMES (I 100 T) (UNLESS (EQL (SETF (GETHASH I TABLE) (* I 10)) (* I 10)) (RETURN NIL))) (= (HASH-TABLE-COUNT TABLE) 100) (DOTIMES (I 100 T) (UNLESS (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH I TABLE) (AND (EQL VALUE (* I 10)) PRESENT-P)) (RETURN NIL)))))
55 Pass: (LET ((TABLE (MAKE-HASH-TABLE))) (AND (EQUAL (SETF (GETHASH 100 TABLE) "C") "C") (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH 100 TABLE) (AND (EQUAL VALUE "C") PRESENT-P)) (REMHASH 100 TABLE) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH 100 TABLE) (AND (NOT VALUE) (NOT PRESENT-P))) (NOT (REMHASH 100 TABLE))))
56 Failed: (LET ((TABLE (MAKE-HASH-TABLE))) (AND (ZEROP (HASH-TABLE-COUNT TABLE)) (EQL (SETF (GETHASH (QUOTE A) TABLE) (QUOTE ABC)) (QUOTE ABC)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH (QUOTE A) TABLE) (AND (EQ VALUE (QUOTE ABC)) PRESENT-P)) (EQL (HASH-TABLE-COUNT TABLE) 1) (REMHASH (QUOTE A) TABLE) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH (QUOTE A) TABLE) (AND (NOT VALUE) (NOT PRESENT-P))) (ZEROP (HASH-TABLE-COUNT TABLE))))
57 Pass: (NOT (REMHASH (QUOTE KEY) (MAKE-HASH-TABLE)))
58 Failed: invalid number of arguments for NIL: 0
59 Failed: The value (1 1) is not of the expected type NUMBER
60 Pass: (LET ((TABLE (MAKE-HASH-TABLE)) (EVAL 0)) (DOTIMES (I 10) (SETF (GETHASH I TABLE) I)) (WITH-HASH-TABLE-ITERATOR (ITERATOR (PROGN (INCF EVAL) TABLE)) (LOOP (MULTIPLE-VALUE-BIND (MORE KEY VALUE) (ITERATOR) (DECLARE (IGNORE KEY VALUE)) (UNLESS MORE (RETURN))))) (EQL EVAL 1))
61 Pass: (WITH-HASH-TABLE-ITERATOR (ITERATOR (MAKE-HASH-TABLE)) (NULL (ITERATOR)))
62 Failed: The value (2 . 2) is not of the expected type NUMBER
63 Failed: The value (B . #<undefined>) is not of the expected type NUMBER
64 Failed: (LET ((TABLE (MAKE-HASH-TABLE))) (AND (NULL (DOTIMES (I 10) (SETF (GETHASH I TABLE) I))) (EQL (LET ((SUM-OF-SQUARES 0)) (MAPHASH (FUNCTION (LAMBDA (KEY VAL) (LET ((SQUARE (* VAL VAL))) (INCF SUM-OF-SQUARES SQUARE) (SETF (GETHASH KEY TABLE) SQUARE)))) TABLE) SUM-OF-SQUARES) 285) (EQL (HASH-TABLE-COUNT TABLE) 10) (NULL (MAPHASH (FUNCTION (LAMBDA (KEY VAL) (WHEN (ODDP VAL) (REMHASH KEY TABLE)))) TABLE)) (EQL (HASH-TABLE-COUNT TABLE) 5) (LET ((ALIST NIL)) (AND (NULL (MAPHASH (FUNCTION (LAMBDA (KEY VAL) (PUSH (LIST KEY VAL) ALIST))) TABLE)) (EQUALP (SORT ALIST (FUNCTION <) :KEY (FUNCTION CAR)) (QUOTE ((0 0) (2 4) (4 16) (6 36) (8 64))))))))
65 Failed: The value (2 . 4) is not of the expected type NUMBER
66 Failed: Key J not found for value #<undefined>
67 Failed: unexpected format directive
68 Failed: The function SXHASH is undefined
69 Failed: The function SXHASH is undefined
70 Pass: (LET ((TABLE (MAKE-HASH-TABLE :REHASH-THRESHOLD 0.8))) (AND (EQL (SETF (GETHASH (QUOTE KEY) TABLE) (QUOTE VALUE0)) (QUOTE VALUE0)) (EQL (HASH-TABLE-COUNT TABLE) 1) (EQL (SETF (GETHASH (QUOTE KEY) TABLE) (QUOTE VALUE1)) (QUOTE VALUE1)) (EQL (HASH-TABLE-COUNT TABLE) 1) (EQ (GETHASH (QUOTE KEY) TABLE) (QUOTE VALUE1))))
71 Pass: (LET ((TABLE (MAKE-HASH-TABLE :REHASH-THRESHOLD 0.8))) (AND (EQL (SETF (GETHASH (QUOTE KEY0) TABLE) (QUOTE VALUE0)) (QUOTE VALUE0)) (EQL (HASH-TABLE-COUNT TABLE) 1) (EQL (SETF (GETHASH (QUOTE KEY1) TABLE) (QUOTE VALUE1)) (QUOTE VALUE1)) (EQL (HASH-TABLE-COUNT TABLE) 2) (EQL (SETF (GETHASH (QUOTE KEY2) TABLE) (QUOTE VALUE2)) (QUOTE VALUE2)) (EQL (HASH-TABLE-COUNT TABLE) 3) (EQL (SETF (GETHASH (QUOTE KEY0) TABLE) (QUOTE VALUE00)) (QUOTE VALUE00)) (EQL (HASH-TABLE-COUNT TABLE) 3) (EQL (SETF (GETHASH (QUOTE KEY2) TABLE) (QUOTE VALUE22)) (QUOTE VALUE22)) (EQL (HASH-TABLE-COUNT TABLE) 3) (EQ (GETHASH (QUOTE KEY0) TABLE) (QUOTE VALUE00)) (EQ (GETHASH (QUOTE KEY1) TABLE) (QUOTE VALUE1)) (EQ (GETHASH (QUOTE KEY2) TABLE) (QUOTE VALUE22))))
72 Pass: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 0 :TEST (QUOTE EQ))) (KEY0 (COPY-SEQ "key")) (KEY1 (COPY-SEQ "key"))) (AND (NOT (EQ KEY0 KEY1)) (EQ (SETF (GETHASH KEY0 TABLE) (QUOTE VALUE)) (QUOTE VALUE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY1 TABLE) (AND (NULL VALUE) (NOT PRESENT-P))) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY0 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P))))
73 Pass: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 0 :TEST (QUOTE EQL))) (KEY0 (COPY-SEQ "key")) (KEY1 (COPY-SEQ "key"))) (AND (NOT (EQL KEY0 KEY1)) (EQ (SETF (GETHASH KEY0 TABLE) (QUOTE VALUE)) (QUOTE VALUE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY1 TABLE) (AND (NULL VALUE) (NOT PRESENT-P))) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY0 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P))))
74 Pass: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 0 :TEST (QUOTE EQL))) (KEY0 1) (KEY1 1)) (AND (EQL KEY0 KEY1) (EQ (SETF (GETHASH KEY0 TABLE) (QUOTE VALUE)) (QUOTE VALUE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY1 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY0 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P))))
75 Pass: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 0 :TEST (QUOTE EQL))) (KEY0 #\a) (KEY1 #\a)) (AND (EQL KEY0 KEY1) (EQ (SETF (GETHASH KEY0 TABLE) (QUOTE VALUE)) (QUOTE VALUE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY1 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY0 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P))))
76 Pass: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 0 :TEST (QUOTE EQL))) (KEY0 #\a) (KEY1 #\A)) (AND (NOT (EQL KEY0 KEY1)) (EQ (SETF (GETHASH KEY0 TABLE) (QUOTE VALUE)) (QUOTE VALUE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY1 TABLE) (AND (NULL VALUE) (NOT PRESENT-P))) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY0 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P))))
77 Pass: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 16 :TEST (QUOTE EQUAL))) (KEY0 (QUOTE KEY)) (KEY1 (QUOTE KEY))) (AND (EQ KEY0 KEY1) (EQUAL KEY0 KEY1) (EQ (SETF (GETHASH KEY0 TABLE) (QUOTE VALUE)) (QUOTE VALUE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY1 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY0 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P))))
78 Pass: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 0 :TEST (QUOTE EQUAL))) (KEY0 1) (KEY1 1)) (AND (EQUAL KEY0 KEY1) (EQ (SETF (GETHASH KEY0 TABLE) (QUOTE VALUE)) (QUOTE VALUE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY1 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY0 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P))))
79 Pass: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 0 :TEST (QUOTE EQUAL))) (KEY0 #\a) (KEY1 #\a)) (AND (EQUAL KEY0 KEY1) (EQ (SETF (GETHASH KEY0 TABLE) (QUOTE VALUE)) (QUOTE VALUE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY1 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY0 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P))))
80 Pass: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 0 :TEST (QUOTE EQUAL))) (KEY0 #\a) (KEY1 #\A)) (AND (NOT (EQUAL KEY0 KEY1)) (EQ (SETF (GETHASH KEY0 TABLE) (QUOTE VALUE)) (QUOTE VALUE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY1 TABLE) (AND (NULL VALUE) (NOT PRESENT-P))) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY0 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P))))
81 Failed: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 16 :TEST (QUOTE EQUAL))) (KEY0 (COPY-SEQ "key")) (KEY1 (COPY-SEQ "key"))) (AND (NOT (EQ KEY0 KEY1)) (EQUAL KEY0 KEY1) (EQ (SETF (GETHASH KEY0 TABLE) (QUOTE VALUE)) (QUOTE VALUE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY1 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY0 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P))))
82 Pass: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 16 :TEST (QUOTE EQUAL))) (KEY0 (COPY-SEQ "key")) (KEY1 (COPY-SEQ "KEY"))) (AND (NOT (EQ KEY0 KEY1)) (NOT (EQUAL KEY0 KEY1)) (EQ (SETF (GETHASH KEY0 TABLE) (QUOTE VALUE)) (QUOTE VALUE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY1 TABLE) (AND (NULL VALUE) (NOT PRESENT-P))) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY0 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P))))
83 Failed: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 10 :TEST (QUOTE EQUAL))) (KEY0 (COPY-SEQ (QUOTE (KEY)))) (KEY1 (COPY-SEQ (QUOTE (KEY))))) (AND (NOT (EQ KEY0 KEY1)) (EQUAL KEY0 KEY1) (EQ (SETF (GETHASH KEY0 TABLE) (QUOTE VALUE)) (QUOTE VALUE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY1 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY0 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P))))
84 Failed: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 16 :TEST (QUOTE EQUAL))) (KEY0 (COPY-SEQ #(1 0 1 0))) (KEY1 (COPY-SEQ #(1 0 1 0)))) (AND (NOT (EQ KEY0 KEY1)) (EQUAL KEY0 KEY1) (EQ (SETF (GETHASH KEY0 TABLE) (QUOTE VALUE)) (QUOTE VALUE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY1 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY0 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P))))
85 Failed: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 16 :TEST (QUOTE EQUAL))) (KEY0 (COPY-SEQ #(A B C))) (KEY1 (COPY-SEQ #(A B C)))) (AND (NOT (EQ KEY0 KEY1)) (NOT (EQUAL KEY0 KEY1)) (EQ (SETF (GETHASH KEY0 TABLE) (QUOTE VALUE)) (QUOTE VALUE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY1 TABLE) (AND (NULL VALUE) (NOT PRESENT-P))) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY0 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P))))
86 Failed: The function MAKE-PATHNAME is undefined
87 Failed: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 0 :TEST (QUOTE EQUALP))) (KEY0 (COPY-SEQ "key")) (KEY1 (COPY-SEQ "key"))) (AND (EQUALP KEY0 KEY1) (EQ (SETF (GETHASH KEY0 TABLE) (QUOTE VALUE)) (QUOTE VALUE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY1 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY0 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P))))
88 Pass: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 0 :TEST (QUOTE EQUALP))) (KEY0 1) (KEY1 1)) (AND (EQUALP KEY0 KEY1) (EQ (SETF (GETHASH KEY0 TABLE) (QUOTE VALUE)) (QUOTE VALUE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY1 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY0 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P))))
89 Failed: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 100 :TEST (QUOTE EQUALP))) (KEY0 1) (KEY1 1)) (AND (NOT (EQ KEY0 KEY1)) (EQUALP KEY0 KEY1) (EQ (SETF (GETHASH KEY0 TABLE) (QUOTE VALUE)) (QUOTE VALUE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY1 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY0 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P))))
90 Pass: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 0 :TEST (QUOTE EQUALP))) (KEY0 #\a) (KEY1 #\a)) (AND (EQUALP KEY0 KEY1) (EQ (SETF (GETHASH KEY0 TABLE) (QUOTE VALUE)) (QUOTE VALUE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY1 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY0 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P))))
91 Failed: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 10 :TEST (QUOTE EQUALP))) (KEY0 #\a) (KEY1 #\A)) (AND (NOT (EQ KEY0 KEY1)) (EQUALP KEY0 KEY1) (EQ (SETF (GETHASH KEY0 TABLE) (QUOTE VALUE)) (QUOTE VALUE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY1 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY0 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P))))
92 Failed: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 3 :TEST (QUOTE EQUALP))) (KEY0 (COPY-SEQ (QUOTE (#\a)))) (KEY1 (COPY-SEQ (QUOTE (#\A))))) (AND (NOT (EQ KEY0 KEY1)) (EQUALP KEY0 KEY1) (EQ (SETF (GETHASH KEY0 TABLE) (QUOTE VALUE)) (QUOTE VALUE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY1 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY0 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P))))
93 Failed: (LET ((TABLE (MAKE-HASH-TABLE :SIZE 3 :TEST (QUOTE EQUALP))) (KEY0 (COPY-SEQ (QUOTE (#\a (1))))) (KEY1 (COPY-SEQ (QUOTE (#\A (1)))))) (AND (NOT (EQ KEY0 KEY1)) (EQUALP KEY0 KEY1) (EQ (SETF (GETHASH KEY0 TABLE) (QUOTE VALUE)) (QUOTE VALUE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY1 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY0 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P))))
94 Failed: (LET ((TABLE (MAKE-HASH-TABLE :TEST (QUOTE EQUALP))) (KEY0 (MAKE-HASH-TABLE)) (KEY1 (MAKE-HASH-TABLE))) (AND (NOT (EQ KEY0 KEY1)) (EQUALP KEY0 KEY1) (EQ (SETF (GETHASH KEY0 TABLE) (QUOTE VALUE)) (QUOTE VALUE)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY1 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P)) (MULTIPLE-VALUE-BIND (VALUE PRESENT-P) (GETHASH KEY0 TABLE) (AND (EQ VALUE (QUOTE VALUE)) PRESENT-P))))
95 Failed: (LET ((TABLE (MAKE-HASH-TABLE))) (AND (ZEROP (HASH-TABLE-COUNT TABLE)) (DOLIST (PAIR (QUOTE ((A ABC) (A BC) (1 "one") (1 "ONE") (#\a A) (#\A B))) T) (UNLESS (EQ (SETF (GETHASH (CAR PAIR) TABLE) (CADR PAIR)) (CADR PAIR)) (RETURN NIL))) (EQL (HASH-TABLE-COUNT TABLE) 5) (EQ (GETHASH (QUOTE A) TABLE) (QUOTE BC)) (EQUAL (GETHASH 1 TABLE) "one") (EQUAL (GETHASH 1 TABLE) "ONE") (EQL (GETHASH #\A TABLE) (QUOTE B)) (EQL (GETHASH #\a TABLE) (QUOTE A))))
Pass: 66, Failed: 30

test: sacla-tests/must-sequence.lisp
0 Pass: (EQL (LENGTH "abc") 3)
1 Pass: (LET ((STR (MAKE-ARRAY (QUOTE (3)) :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "abc" :FILL-POINTER T))) (AND (EQL (LENGTH STR) 3) (EQL (SETF (FILL-POINTER STR) 2) 2) (EQL (LENGTH STR) 2)))
2 Pass: (ZEROP (LENGTH #()))
3 Pass: (ZEROP (LENGTH ""))
4 Pass: (ZEROP (LENGTH #()))
5 Pass: (ZEROP (LENGTH NIL))
6 Pass: (EQL (LENGTH (QUOTE (0))) 1)
7 Pass: (EQL (LENGTH (QUOTE (0 1))) 2)
8 Pass: (EQL (LENGTH (QUOTE (0 1 2))) 3)
9 Pass: (EQL (LENGTH (QUOTE (0 1 2 3))) 4)
10 Pass: (EQL (LENGTH (QUOTE (0 1 2 3 4))) 5)
11 Pass: (EQL (LENGTH (QUOTE (0 1 2 3 4 5))) 6)
12 Pass: (EQL (LENGTH (QUOTE (0 1 2 3 4 5 6))) 7)
13 Pass: (EQL (LENGTH #(0)) 1)
14 Pass: (EQL (LENGTH #(0 1)) 2)
15 Pass: (EQL (LENGTH #(0 1 2)) 3)
16 Pass: (EQL (LENGTH #(0 1 2 3)) 4)
17 Pass: (EQL (LENGTH #(0 1 2 3 4)) 5)
18 Pass: (EQL (LENGTH #(0 1 2 3 4 5)) 6)
19 Pass: (EQL (LENGTH #(0 1 2 3 4 5 6)) 7)
20 Pass: (EQL (LENGTH (MAKE-ARRAY 100)) 100)
21 Pass: (EQL (LENGTH (MAKE-SEQUENCE (QUOTE LIST) 20)) 20)
22 Pass: (EQL (LENGTH (MAKE-SEQUENCE (QUOTE STRING) 10)) 10)
23 Pass: (EQL (LENGTH (MAKE-SEQUENCE (QUOTE BIT-VECTOR) 3)) 3)
24 Pass: (EQL (LENGTH (MAKE-SEQUENCE (QUOTE BIT-VECTOR) 64)) 64)
25 Pass: (EQL (LENGTH (MAKE-SEQUENCE (QUOTE SIMPLE-VECTOR) 64)) 64)
26 Pass: (STRING= (COPY-SEQ "love") "love")
27 Pass: (EQUALP (COPY-SEQ (QUOTE #(A B C D))) (QUOTE #(A B C D)))
28 Pass: (EQUALP (COPY-SEQ (QUOTE #(0 1 0 1 0 1 0 1))) (QUOTE #(0 1 0 1 0 1 0 1)))
29 Pass: (EQUAL (COPY-SEQ (QUOTE (LOVE))) (QUOTE (LOVE)))
30 Pass: (EQUAL (COPY-SEQ (QUOTE (LOVE HATE WAR PEACE))) (QUOTE (LOVE HATE WAR PEACE)))
31 Pass: (NULL (COPY-SEQ NIL))
32 Pass: (STRING= (COPY-SEQ "") "")
33 Pass: (LET* ((SEQ0 "love&peace") (SEQ (COPY-SEQ SEQ0))) (AND (NOT (EQ SEQ0 SEQ)) (STRING= SEQ0 SEQ)))
34 Pass: (LET* ((SEQ0 (LIST (QUOTE LOVE) (QUOTE AND) (QUOTE PEACE))) (SEQ (COPY-SEQ SEQ0))) (AND (NOT (EQ SEQ0 SEQ)) (EQUAL SEQ0 SEQ)))
35 Pass: (LET* ((C0 (LIST (QUOTE LOVE))) (C1 (LIST (QUOTE PEACE))) (SEQ (COPY-SEQ (LIST C0 C1)))) (AND (EQUAL SEQ (QUOTE ((LOVE) (PEACE)))) (EQ (CAR SEQ) C0) (EQ (CADR SEQ) C1)))
36 Pass: (LET* ((SEQ0 (QUOTE #(T NIL T NIL))) (SEQ (COPY-SEQ SEQ0))) (AND (NOT (EQ SEQ0 SEQ)) (EQUALP SEQ SEQ0)))
37 Pass: (VECTORP (COPY-SEQ (VECTOR)))
38 Pass: (SIMPLE-BIT-VECTOR-P (COPY-SEQ #()))
39 Pass: (SIMPLE-VECTOR-P (COPY-SEQ (VECTOR)))
40 Pass: (SIMPLE-VECTOR-P (COPY-SEQ (MAKE-ARRAY 10 :FILL-POINTER 3 :INITIAL-ELEMENT NIL)))
41 Pass: (SIMPLE-VECTOR-P (COPY-SEQ (VECTOR 0 1)))
42 Pass: (SIMPLE-STRING-P (COPY-SEQ "xyz"))
43 Pass: (SIMPLE-STRING-P (COPY-SEQ (MAKE-ARRAY 3 :DISPLACED-TO "0123456789" :DISPLACED-INDEX-OFFSET 3 :ELEMENT-TYPE (QUOTE BASE-CHAR))))
44 Pass: (SIMPLE-STRING-P (COPY-SEQ (MAKE-ARRAY 20 :FILL-POINTER T :ELEMENT-TYPE (QUOTE BASE-CHAR) :INITIAL-ELEMENT #\ )))
45 Pass: (SIMPLE-BIT-VECTOR-P (COPY-SEQ #(0 1 0 1)))
46 Pass: (SIMPLE-BIT-VECTOR-P (COPY-SEQ (MAKE-ARRAY 30 :FILL-POINTER 3 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-ELEMENT 0)))
47 Pass: (LET* ((VEC0 (MAKE-ARRAY 10 :FILL-POINTER 3 :INITIAL-CONTENTS "0123456789")) (VEC (COPY-SEQ VEC0))) (AND (SIMPLE-VECTOR-P VEC) (= (LENGTH VEC) 3) (EQUALP VEC #(#\0 #\1 #\2))))
48 Pass: (CHAR= (ELT "0123456789" 6) #\6)
49 Pass: (EQ (ELT #(A B C D E F G) 0) (QUOTE A))
50 Pass: (EQ (ELT (QUOTE (A B C D E F G)) 4) (QUOTE E))
51 Pass: (ZEROP (ELT #(0 1 0 1 0 1 0) 0))
52 Pass: (DOTIMES (I 10 T) (UNLESS (CHAR= (ELT "0123456789" I) (DIGIT-CHAR I)) (RETURN NIL)))
53 Pass: (LET ((STR (COPY-SEQ "0123456789"))) (AND (CHAR= (ELT STR 6) #\6) (SETF (ELT STR 0) #\#) (STRING= STR "#123456789")))
54 Pass: (LET ((LIST (LIST 0 1 2 3))) (AND (= (ELT LIST 2) 2) (SETF (ELT LIST 1) 9) (= (ELT LIST 1) 9) (EQUAL LIST (QUOTE (0 9 2 3)))))
55 Pass: (LET ((BV #(0 1 0 1 0 1 0 1 0 1))) (DOTIMES (I 10 T) (UNLESS (= (ELT BV I) (IF (EVENP I) 0 1)) (RETURN NIL))))
56 Pass: (LET ((VEC (VECTOR (QUOTE A) (QUOTE B) (QUOTE C)))) (AND (EQ (ELT VEC 0) (QUOTE A)) (EQ (ELT VEC 1) (QUOTE B)) (EQ (ELT VEC 2) (QUOTE C))))
57 Pass: (LET ((LIST (LIST 0 1 2 3))) (AND (EQ (FILL LIST (QUOTE NIL)) LIST) (EVERY (QUOTE NULL) LIST)))
58 Pass: (LET ((VECTOR (VECTOR (QUOTE X) (QUOTE Y) (QUOTE Z)))) (AND (EQ (FILL VECTOR (QUOTE A)) VECTOR) (EVERY (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE A)))) VECTOR)))
59 Pass: (LET ((LIST (LIST 0 1 2 3))) (AND (EQ (FILL LIST (QUOTE 9) :START 2) LIST) (EQUAL LIST (QUOTE (0 1 9 9)))))
60 Pass: (LET ((LIST (LIST 0 1 2 3))) (AND (EQ (FILL LIST (QUOTE 9) :START 1 :END 3) LIST) (EQUAL LIST (QUOTE (0 9 9 3)))))
61 Pass: (LET ((LIST (LIST 0 1 2 3))) (AND (EQ (FILL LIST (QUOTE 9) :START 1 :END NIL) LIST) (EQUAL LIST (QUOTE (0 9 9 9)))))
62 Pass: (LET ((LIST (LIST 0 1 2 3))) (AND (EQ (FILL LIST (QUOTE 9) :END 1) LIST) (EQUAL LIST (QUOTE (9 1 2 3)))))
63 Pass: (LET ((VECTOR (VECTOR 0 1 2 3))) (AND (EQ (FILL VECTOR (QUOTE T) :START 3) VECTOR) (EQUALP VECTOR (QUOTE #(0 1 2 T)))))
64 Pass: (LET ((VECTOR (VECTOR 0 1 2 3))) (AND (EQ (FILL VECTOR (QUOTE T) :START 2 :END 4) VECTOR) (EQUALP VECTOR (QUOTE #(0 1 T T)))))
65 Pass: (LET ((VECTOR (VECTOR 0 1 2 3))) (AND (EQ (FILL VECTOR (QUOTE T) :START 2 :END NIL) VECTOR) (EQUALP VECTOR (QUOTE #(0 1 T T)))))
66 Pass: (LET ((VECTOR (VECTOR 0 1 2 3))) (AND (EQ (FILL VECTOR (QUOTE T) :END 3) VECTOR) (EQUALP VECTOR (QUOTE #(T T T 3)))))
67 Pass: (NULL (MAKE-SEQUENCE (QUOTE LIST) 0))
68 Pass: (STRING= (MAKE-SEQUENCE (QUOTE STRING) 26 :INITIAL-ELEMENT #\.) "..........................")
69 Pass: (EQUALP (MAKE-SEQUENCE (QUOTE (VECTOR DOUBLE-FLOAT)) 2 :INITIAL-ELEMENT 1) #(1 1))
70 Pass: (EQUAL (MAKE-SEQUENCE (QUOTE LIST) 3 :INITIAL-ELEMENT (QUOTE A)) (QUOTE (A A A)))
71 Pass: (EQUAL (MAKE-SEQUENCE (QUOTE CONS) 3 :INITIAL-ELEMENT (QUOTE A)) (QUOTE (A A A)))
72 Pass: (NULL (MAKE-SEQUENCE (QUOTE NULL) 0 :INITIAL-ELEMENT (QUOTE A)))
73 Pass: (EQUALP (MAKE-SEQUENCE (QUOTE VECTOR) 3 :INITIAL-ELEMENT (QUOTE Z)) (QUOTE #(Z Z Z)))
74 Pass: (EQUALP (MAKE-SEQUENCE (QUOTE (VECTOR * *)) 3 :INITIAL-ELEMENT (QUOTE Z)) (QUOTE #(Z Z Z)))
75 Pass: (EQUALP (MAKE-SEQUENCE (QUOTE (VECTOR T *)) 3 :INITIAL-ELEMENT (QUOTE Z)) (QUOTE #(Z Z Z)))
76 Pass: (STRING= (MAKE-SEQUENCE (QUOTE (STRING 3)) 3 :INITIAL-ELEMENT (QUOTE #\a)) "aaa")
77 Pass: (STRING= (MAKE-SEQUENCE (QUOTE STRING) 4 :INITIAL-ELEMENT (QUOTE #\z)) "zzzz")
78 Pass: (STRING= (MAKE-SEQUENCE (QUOTE (VECTOR CHARACTER 3)) 3 :INITIAL-ELEMENT (QUOTE #\a)) "aaa")
79 Pass: (EQUALP (MAKE-SEQUENCE (QUOTE (ARRAY T 1)) 3 :INITIAL-ELEMENT (QUOTE Z)) (QUOTE #(Z Z Z)))
80 Pass: (EQUALP (MAKE-SEQUENCE (QUOTE (ARRAY T (3))) 3 :INITIAL-ELEMENT (QUOTE Z)) (QUOTE #(Z Z Z)))
81 Pass: (VECTORP (MAKE-SEQUENCE (QUOTE VECTOR) 10))
82 Pass: (STRING= (SUBSEQ "012345" 2) "2345")
83 Pass: (STRING= (SUBSEQ "012345" 3 5) "34")
84 Pass: (LET ((STR (COPY-SEQ "012345"))) (AND (SETF (SUBSEQ STR 4) "abc") (STRING= STR "0123ab")))
85 Pass: (LET ((STR (COPY-SEQ "012345"))) (SETF (SUBSEQ STR 0 2) "A") (STRING= STR "A12345"))
86 Pass: (EQUAL (SUBSEQ (QUOTE (0 1 2 3)) 0) (QUOTE (0 1 2 3)))
87 Pass: (EQUAL (SUBSEQ (QUOTE (0 1 2 3)) 1) (QUOTE (1 2 3)))
88 Pass: (EQUAL (SUBSEQ (QUOTE (0 1 2 3)) 2) (QUOTE (2 3)))
89 Pass: (EQUAL (SUBSEQ (QUOTE (0 1 2 3)) 3) (QUOTE (3)))
90 Pass: (EQUAL (SUBSEQ (QUOTE (0 1 2 3)) 4) (QUOTE NIL))
91 Pass: (EQUALP (SUBSEQ #(A B C D) 0) #(A B C D))
92 Pass: (EQUALP (SUBSEQ #(A B C D) 1) #(B C D))
93 Pass: (EQUALP (SUBSEQ #(A B C D) 2) #(C D))
94 Pass: (EQUALP (SUBSEQ #(A B C D) 3) #(D))
95 Pass: (EQUALP (SUBSEQ #(A B C D) 4) #())
96 Pass: (STRING= (SUBSEQ "0123" 0) "0123")
97 Pass: (STRING= (SUBSEQ "0123" 1) "123")
98 Pass: (STRING= (SUBSEQ "0123" 2) "23")
99 Pass: (STRING= (SUBSEQ "0123" 3) "3")
100 Pass: (STRING= (SUBSEQ "0123" 4) "")
101 Pass: (EQUALP (SUBSEQ #(1 0 1 0) 0) #(1 0 1 0))
102 Pass: (EQUALP (SUBSEQ #(1 0 1 0) 1) #(0 1 0))
103 Pass: (EQUALP (SUBSEQ #(1 0 1 0) 2) #(1 0))
104 Pass: (EQUALP (SUBSEQ #(1 0 1 0) 3) #(0))
105 Pass: (EQUALP (SUBSEQ #(1 0 1 0) 4) #())
106 Pass: (EQUAL (SUBSEQ (QUOTE (0 1 2 3)) 0 4) (QUOTE (0 1 2 3)))
107 Pass: (EQUAL (SUBSEQ (QUOTE (0 1 2 3)) 0 NIL) (QUOTE (0 1 2 3)))
108 Pass: (LET* ((LIST0 (QUOTE (0 1 2 3))) (LIST (SUBSEQ LIST0 0 4))) (AND (NOT (EQ LIST0 LIST)) (EQUAL LIST0 LIST)))
109 Pass: (LET* ((LIST0 (QUOTE (0 1 2 3))) (LIST (SUBSEQ LIST0 0 NIL))) (AND (NOT (EQ LIST0 LIST)) (EQUAL LIST0 LIST)))
110 Pass: (EQUAL (SUBSEQ (QUOTE (0 1 2 3)) 1 3) (QUOTE (1 2)))
111 Pass: (EQUAL (SUBSEQ (QUOTE (0 1 2 3)) 2 2) (QUOTE NIL))
112 Pass: (EQUAL (SUBSEQ (QUOTE (0 1 2 3)) 0 0) (QUOTE NIL))
113 Pass: (EQUAL (SUBSEQ (QUOTE (0 1 2 3)) 1 1) (QUOTE NIL))
114 Pass: (EQUAL (SUBSEQ (QUOTE (0 1 2 3)) 2 2) (QUOTE NIL))
115 Pass: (EQUAL (SUBSEQ (QUOTE (0 1 2 3)) 3 3) (QUOTE NIL))
116 Pass: (EQUAL (SUBSEQ (QUOTE (0 1 2 3)) 4 4) (QUOTE NIL))
117 Pass: (LET ((LIST (LIST 0 1 2 3 4 5 6 7))) (SETF (SUBSEQ LIST 0) (QUOTE (A B C D))) (EQUAL LIST (QUOTE (A B C D 4 5 6 7))))
118 Pass: (LET ((LIST (LIST 0 1 2 3))) (SETF (SUBSEQ LIST 0) (QUOTE (A B C D))) (EQUAL LIST (QUOTE (A B C D))))
119 Pass: (LET ((LIST (LIST 0 1 2 3))) (SETF (SUBSEQ LIST 2) (QUOTE (A B C D))) (EQUAL LIST (QUOTE (0 1 A B))))
120 Pass: (LET ((LIST (LIST 0 1 2 3))) (SETF (SUBSEQ LIST 2 NIL) (QUOTE (A B C D))) (EQUAL LIST (QUOTE (0 1 A B))))
121 Pass: (LET ((LIST (LIST 0 1 2 3))) (SETF (SUBSEQ LIST 1 3) (QUOTE (A B C D))) (EQUAL LIST (QUOTE (0 A B 3))))
122 Pass: (LET ((LIST (LIST 0 1 2 3))) (SETF (SUBSEQ LIST 0) (QUOTE NIL)) (EQUAL LIST (QUOTE (0 1 2 3))))
123 Pass: (LET ((LIST (QUOTE NIL))) (SETF (SUBSEQ LIST 0) (QUOTE (A B C D E))) (NULL LIST))
124 Pass: (LET ((LIST (QUOTE (0 1 2 3)))) (SETF (SUBSEQ LIST 0 0) (QUOTE (A B C D E))) (EQUAL LIST (QUOTE (0 1 2 3))))
125 Pass: (LET ((LIST (QUOTE (0 1 2 3)))) (SETF (SUBSEQ LIST 1 1) (QUOTE (A B C D E))) (EQUAL LIST (QUOTE (0 1 2 3))))
126 Pass: (LET ((LIST (QUOTE (0 1 2 3)))) (SETF (SUBSEQ LIST 2 2) (QUOTE (A B C D E))) (EQUAL LIST (QUOTE (0 1 2 3))))
127 Pass: (LET ((LIST (QUOTE (0 1 2 3)))) (SETF (SUBSEQ LIST 3 3) (QUOTE (A B C D E))) (EQUAL LIST (QUOTE (0 1 2 3))))
128 Pass: (LET ((LIST (QUOTE (0 1 2 3)))) (SETF (SUBSEQ LIST 4 4) (QUOTE (A B C D E))) (EQUAL LIST (QUOTE (0 1 2 3))))
129 Pass: (LET ((LIST (LIST 0 1 2 3 4 5 6 7))) (SETF (SUBSEQ LIST 0) #(A B C D)) (EQUAL LIST (QUOTE (A B C D 4 5 6 7))))
130 Pass: (LET ((LIST (LIST 0 1 2 3))) (SETF (SUBSEQ LIST 0) #(A B C D)) (EQUAL LIST (QUOTE (A B C D))))
131 Pass: (LET ((LIST (LIST 0 1 2 3))) (SETF (SUBSEQ LIST 2) #(A B C D)) (EQUAL LIST (QUOTE (0 1 A B))))
132 Pass: (LET ((LIST (LIST 0 1 2 3))) (SETF (SUBSEQ LIST 2 NIL) #(A B C D)) (EQUAL LIST (QUOTE (0 1 A B))))
133 Pass: (LET ((LIST (LIST 0 1 2 3))) (SETF (SUBSEQ LIST 1 3) #(A B C D)) (EQUAL LIST (QUOTE (0 A B 3))))
134 Pass: (LET ((LIST (LIST 0 1 2 3))) (SETF (SUBSEQ LIST 0) #()) (EQUAL LIST (QUOTE (0 1 2 3))))
135 Pass: (LET ((LIST (LIST 0 1 2 3 4 5 6 7))) (SETF (SUBSEQ LIST 0) "abcd") (EQUAL LIST (QUOTE (#\a #\b #\c #\d 4 5 6 7))))
136 Pass: (LET ((LIST (LIST 0 1 2 3))) (SETF (SUBSEQ LIST 0) "abcd") (EQUAL LIST (QUOTE (#\a #\b #\c #\d))))
137 Pass: (LET ((LIST (LIST 0 1 2 3))) (SETF (SUBSEQ LIST 2) "abcd") (EQUAL LIST (QUOTE (0 1 #\a #\b))))
138 Pass: (LET ((LIST (LIST 0 1 2 3))) (SETF (SUBSEQ LIST 2 NIL) "abcd") (EQUAL LIST (QUOTE (0 1 #\a #\b))))
139 Pass: (LET ((LIST (LIST 0 1 2 3))) (SETF (SUBSEQ LIST 1 3) "abcd") (EQUAL LIST (QUOTE (0 #\a #\b 3))))
140 Pass: (LET ((LIST (LIST 0 1 2 3))) (SETF (SUBSEQ LIST 0) "") (EQUAL LIST (QUOTE (0 1 2 3))))
141 Pass: (EQUALP (SUBSEQ #(0 1 2 3) 0 4) #(0 1 2 3))
142 Pass: (EQUALP (SUBSEQ #(0 1 2 3) 0 NIL) #(0 1 2 3))
143 Pass: (LET* ((VEC0 #(0 1 2 3)) (VEC (SUBSEQ VEC0 0 4))) (AND (NOT (EQ VEC0 VEC)) (EQUALP VEC0 VEC)))
144 Pass: (LET* ((VEC0 #(0 1 2 3)) (VEC (SUBSEQ VEC0 0 NIL))) (AND (NOT (EQ VEC0 VEC)) (EQUALP VEC0 VEC)))
145 Pass: (EQUALP (SUBSEQ #(0 1 2 3) 1 3) #(1 2))
146 Pass: (EQUALP (SUBSEQ #(0 1 2 3) 2 2) #())
147 Pass: (EQUALP (SUBSEQ #(0 1 2 3) 0 0) #())
148 Pass: (EQUALP (SUBSEQ #(0 1 2 3) 1 1) #())
149 Pass: (EQUALP (SUBSEQ #(0 1 2 3) 2 2) #())
150 Pass: (EQUALP (SUBSEQ #(0 1 2 3) 3 3) #())
151 Pass: (EQUALP (SUBSEQ #(0 1 2 3) 4 4) #())
152 Pass: (LET ((VEC (VECTOR 0 1 2 3 4 5 6 7))) (SETF (SUBSEQ VEC 0) #(A B C D)) (EQUALP VEC #(A B C D 4 5 6 7)))
153 Pass: (LET ((VEC (VECTOR 0 1 2 3))) (SETF (SUBSEQ VEC 0) #(A B C D)) (EQUALP VEC #(A B C D)))
154 Pass: (LET ((VEC (VECTOR 0 1 2 3))) (SETF (SUBSEQ VEC 2) #(A B C D)) (EQUALP VEC #(0 1 A B)))
155 Pass: (LET ((VEC (VECTOR 0 1 2 3))) (SETF (SUBSEQ VEC 1 3) #(A B C D)) (EQUALP VEC #(0 A B 3)))
156 Pass: (LET ((VEC (VECTOR 0 1 2 3))) (SETF (SUBSEQ VEC 0) #()) (EQUALP VEC #(0 1 2 3)))
157 Pass: (LET ((VEC (VECTOR))) (SETF (SUBSEQ VEC 0) #(A B C D E)) (EQUALP VEC #()))
158 Pass: (LET ((VEC (VECTOR 0 1 2 3))) (SETF (SUBSEQ VEC 0 0) #(A B C D E)) (EQUALP VEC #(0 1 2 3)))
159 Pass: (LET ((VEC (VECTOR 0 1 2 3))) (SETF (SUBSEQ VEC 1 1) #(A B C D E)) (EQUALP VEC #(0 1 2 3)))
160 Pass: (LET ((VEC (VECTOR 0 1 2 3))) (SETF (SUBSEQ VEC 2 2) #(A B C D E)) (EQUALP VEC #(0 1 2 3)))
161 Pass: (LET ((VEC (VECTOR 0 1 2 3))) (SETF (SUBSEQ VEC 3 3) #(A B C D E)) (EQUALP VEC #(0 1 2 3)))
162 Pass: (LET ((VEC (VECTOR 0 1 2 3))) (SETF (SUBSEQ VEC 4 4) #(A B C D E)) (EQUALP VEC #(0 1 2 3)))
163 Pass: (LET ((VEC (VECTOR 0 1 2 3 4 5 6 7))) (SETF (SUBSEQ VEC 0) #(A B C D)) (EQUALP VEC #(A B C D 4 5 6 7)))
164 Pass: (LET ((VEC (VECTOR 0 1 2 3))) (SETF (SUBSEQ VEC 0) #(A B C D)) (EQUALP VEC #(A B C D)))
165 Pass: (LET ((VEC (VECTOR 0 1 2 3))) (SETF (SUBSEQ VEC 2) #(A B C D)) (EQUALP VEC #(0 1 A B)))
166 Pass: (LET ((VEC (VECTOR 0 1 2 3))) (SETF (SUBSEQ VEC 2 NIL) #(A B C D)) (EQUALP VEC #(0 1 A B)))
167 Pass: (LET ((VEC (VECTOR 0 1 2 3))) (SETF (SUBSEQ VEC 1 3) #(A B C D)) (EQUALP VEC #(0 A B 3)))
168 Pass: (LET ((VEC (VECTOR 0 1 2 3))) (SETF (SUBSEQ VEC 0) #()) (EQUALP VEC #(0 1 2 3)))
169 Pass: (HANDLER-CASE (PROGN (MAP (QUOTE SYMBOL) (FUNCTION +) (QUOTE (0 1)) (QUOTE (1 0)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
170 Pass: (HANDLER-CASE (PROGN (MAP (QUOTE HASH-TABLE) (FUNCTION +) (QUOTE (0 1)) (QUOTE (1 0)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
171 Pass: (STRING= (MAP (QUOTE STRING) (FUNCTION (LAMBDA (X Y) (CHAR "01234567890ABCDEF" (MOD (+ X Y) 16)))) (QUOTE (1 2 3 4)) (QUOTE (10 9 8 7))) "AAAA")
172 Pass: (LET ((SEQ (LIST "lower" "UPPER" "" "123"))) (AND (NULL (MAP NIL (FUNCTION NSTRING-UPCASE) SEQ)) (EQUAL SEQ (QUOTE ("LOWER" "UPPER" "" "123")))))
173 Pass: (EQUAL (MAP (QUOTE LIST) (FUNCTION -) (QUOTE (1 2 3 4))) (QUOTE (-1 -2 -3 -4)))
174 Pass: (STRING= (MAP (QUOTE STRING) (FUNCTION (LAMBDA (X) (IF (ODDP X) #\1 #\0))) (QUOTE (1 2 3 4))) "1010")
175 Pass: (EQUAL (MAP (QUOTE LIST) (QUOTE +) (QUOTE (0 1)) (QUOTE (1 0))) (QUOTE (1 1)))
176 Pass: (EQUAL (MAP (QUOTE LIST) (QUOTE -) (QUOTE (0 1)) (QUOTE (1 0))) (QUOTE (-1 1)))
177 Pass: (EVERY (QUOTE NULL) (LIST (MAP (QUOTE LIST) (FUNCTION +) (QUOTE NIL)) (MAP (QUOTE LIST) (FUNCTION +) (QUOTE NIL) (QUOTE NIL)) (MAP (QUOTE LIST) (FUNCTION +) (QUOTE NIL) (QUOTE NIL) (QUOTE NIL)) (MAP (QUOTE LIST) (FUNCTION +) (QUOTE NIL) (QUOTE NIL) (QUOTE NIL) (QUOTE NIL)) (MAP (QUOTE LIST) (FUNCTION +) (QUOTE NIL) (QUOTE NIL) (QUOTE NIL) (QUOTE NIL) (QUOTE NIL))))
178 Pass: (EVERY (QUOTE NULL) (LIST (MAP (QUOTE LIST) (FUNCTION +) (QUOTE NIL)) (MAP (QUOTE LIST) (FUNCTION +) #() (QUOTE NIL)) (MAP (QUOTE LIST) (FUNCTION +) (QUOTE NIL) #() (QUOTE NIL)) (MAP (QUOTE LIST) (FUNCTION +) #() (QUOTE NIL) #() (QUOTE NIL)) (MAP (QUOTE LIST) (FUNCTION +) (QUOTE NIL) #() (QUOTE NIL) #() (QUOTE NIL))))
179 Pass: (EQUAL (MAP (QUOTE LIST) (FUNCTION +) (QUOTE (0 1 2))) (QUOTE (0 1 2)))
180 Pass: (EQUAL (MAP (QUOTE LIST) (FUNCTION +) (QUOTE (0 1 2)) (QUOTE (1 2 3))) (QUOTE (1 3 5)))
181 Pass: (EQUAL (MAP (QUOTE LIST) (FUNCTION +) (QUOTE (0 1 2)) (QUOTE (1 2 3)) (QUOTE (2 3 4))) (QUOTE (3 6 9)))
182 Pass: (EQUAL (MAP (QUOTE LIST) (FUNCTION +) (QUOTE (0 1 2)) (QUOTE (1 2 3)) (QUOTE (2 3 4)) (QUOTE (3 4 5))) (QUOTE (6 10 14)))
183 Pass: (EQUAL (MAP (QUOTE LIST) (FUNCTION +) (QUOTE (1 2)) (QUOTE (1 2 3))) (QUOTE (2 4)))
184 Pass: (EQUAL (MAP (QUOTE LIST) (FUNCTION +) (QUOTE (0 1 2)) (QUOTE (2 3)) (QUOTE (2 3 4))) (QUOTE (4 7)))
185 Pass: (EQUAL (MAP (QUOTE LIST) (FUNCTION +) (QUOTE (0 1 2)) (QUOTE (1 2 3)) (QUOTE (2)) (QUOTE (3 4 5))) (QUOTE (6)))
186 Pass: (EQUAL (MAP (QUOTE LIST) (FUNCTION +) (QUOTE (0 1 2)) (QUOTE (1 2 3)) (QUOTE (2 3 4)) (QUOTE (3 4 5)) (QUOTE NIL)) (QUOTE NIL))
187 Pass: (EQUAL (MAP (QUOTE CONS) (FUNCTION +) (QUOTE (0 1 2)) (QUOTE (2 1 0))) (QUOTE (2 2 2)))
188 Pass: (EQUAL (MAP (QUOTE (CONS NUMBER CONS)) (FUNCTION +) (QUOTE (0 1 2)) (QUOTE (2 1 0))) (QUOTE (2 2 2)))
189 Pass: (EQUAL (MAP (QUOTE (CONS NUMBER (CONS NUMBER *))) (FUNCTION +) (QUOTE (0 1 2)) (QUOTE (2 1 0))) (QUOTE (2 2 2)))
190 Pass: (NULL (MAP (QUOTE NULL) (FUNCTION +) (QUOTE NIL)))
191 Pass: (EQUALP (MAP (QUOTE VECTOR) (FUNCTION +) #()) #())
192 Pass: (EQUALP (MAP (QUOTE VECTOR) (FUNCTION +) #() #()) #())
193 Pass: (EQUALP (MAP (QUOTE VECTOR) (FUNCTION +) #() #() #()) #())
194 Pass: (EQUALP (MAP (QUOTE VECTOR) (FUNCTION +) #() #() #() #()) #())
195 Pass: (EQUALP (MAP (QUOTE VECTOR) (FUNCTION +) #() #() #() #() #()) #())
196 Pass: (EQUALP (MAP (QUOTE VECTOR) (FUNCTION +) (QUOTE NIL) #()) #())
197 Pass: (EQUALP (MAP (QUOTE VECTOR) (FUNCTION +) (QUOTE NIL) #() "") #())
198 Pass: (EQUALP (MAP (QUOTE VECTOR) (FUNCTION +) (QUOTE (0 1 2))) #(0 1 2))
199 Pass: (EQUALP (MAP (QUOTE VECTOR) (FUNCTION +) (QUOTE (0 1 2)) #(1 2 3)) #(1 3 5))
200 Pass: (EQUALP (MAP (QUOTE VECTOR) (FUNCTION +) #(0 1 2) (QUOTE (1 2 3)) #(2 3 4)) #(3 6 9))
201 Pass: (EQUALP (MAP (QUOTE VECTOR) (FUNCTION +) (QUOTE (0 1 2)) #(1 2 3) (QUOTE (2 3 4)) #(3 4 5)) #(6 10 14))
202 Pass: (EQUALP (MAP (QUOTE VECTOR) (FUNCTION +) (QUOTE (1 2)) (QUOTE (1 2 3))) #(2 4))
203 Pass: (EQUALP (MAP (QUOTE VECTOR) (FUNCTION +) (QUOTE (0 1 2)) (QUOTE (2 3)) (QUOTE (2 3 4))) #(4 7))
204 Pass: (EQUALP (MAP (QUOTE VECTOR) (FUNCTION +) (QUOTE (0 1 2)) (QUOTE (1 2 3)) (QUOTE (2)) (QUOTE (3 4 5))) #(6))
205 Pass: (EQUALP (MAP (QUOTE VECTOR) (FUNCTION +) (QUOTE (0 1 2)) (QUOTE (1 2 3)) (QUOTE (2 3 4)) (QUOTE (3 4 5)) (QUOTE NIL)) #())
206 Pass: (EQUALP (MAP (QUOTE VECTOR) (FUNCTION +) #(1 2) #(1 2 3)) #(2 4))
207 Pass: (EQUALP (MAP (QUOTE VECTOR) (FUNCTION +) #(0 1 2) #(2 3) #(2 3 4)) #(4 7))
208 Pass: (EQUALP (MAP (QUOTE VECTOR) (FUNCTION +) #(0 1 2) (QUOTE (1 2 3)) #(2) (QUOTE (3 4 5))) #(6))
209 Pass: (EQUALP (MAP (QUOTE VECTOR) (FUNCTION +) (QUOTE (0 1 2)) #(1 2 3) (QUOTE (2 3 4)) (QUOTE (3 4 5)) (QUOTE NIL)) #())
210 Pass: (STRING= (MAP (QUOTE STRING) (FUNCTION (LAMBDA (&REST REST) (CHAR-UPCASE (CAR REST)))) "") "")
211 Pass: (STRING= (MAP (QUOTE STRING) (FUNCTION (LAMBDA (&REST REST) (CHAR-UPCASE (CAR REST)))) "" "") "")
212 Pass: (STRING= (MAP (QUOTE STRING) (FUNCTION (LAMBDA (&REST REST) (CHAR-UPCASE (CAR REST)))) "" "" "") "")
213 Pass: (STRING= (MAP (QUOTE STRING) (FUNCTION (LAMBDA (&REST REST) (CHAR-UPCASE (CAR REST)))) "" "" "" "") "")
214 Pass: (STRING= (MAP (QUOTE STRING) (FUNCTION (LAMBDA (&REST REST) (CHAR-UPCASE (CAR REST)))) "" "" "" "" "") "")
215 Pass: (STRING= (MAP (QUOTE STRING) (FUNCTION (LAMBDA (&REST REST) (CHAR-UPCASE (CAR REST)))) "") "")
216 Pass: (STRING= (MAP (QUOTE STRING) (FUNCTION (LAMBDA (&REST REST) (CHAR-UPCASE (CAR REST)))) "" (QUOTE NIL)) "")
217 Pass: (STRING= (MAP (QUOTE STRING) (FUNCTION (LAMBDA (&REST REST) (CHAR-UPCASE (CAR REST)))) "" #() (QUOTE NIL)) "")
218 Pass: (STRING= (MAP (QUOTE STRING) (FUNCTION (LAMBDA (&REST REST) (CHAR-UPCASE (CAR REST)))) (QUOTE NIL) (QUOTE NIL) "" "") "")
219 Pass: (STRING= (MAP (QUOTE STRING) (FUNCTION (LAMBDA (&REST REST) (CHAR-UPCASE (CAR REST)))) #() #() #() #() #()) "")
220 Pass: (STRING= (MAP (QUOTE STRING) (FUNCTION (LAMBDA (A B) (IF (CHAR< A B) B A))) "axbycz" "xaybzc") "xxyyzz")
221 Pass: (STRING= (MAP (QUOTE STRING) (FUNCTION (LAMBDA (A B) (IF (CHAR< A B) B A))) "axbycz" "xayb") "xxyy")
222 Pass: (STRING= (MAP (QUOTE STRING) (FUNCTION (LAMBDA (&REST REST) (IF (ZEROP (APPLY (FUNCTION LOGAND) REST)) #\0 #\1))) (QUOTE (0 1 0 1)) #(1 0 1 0 1 0 1)) "0000")
223 Pass: (STRING= (MAP (QUOTE STRING) (FUNCTION (LAMBDA (&REST REST) (IF (ZEROP (APPLY (FUNCTION LOGAND) REST)) #\0 #\1))) #(1 1 1 1) #(1 0 1 0 1 0 1) #(0 0 1)) "001")
224 Pass: (STRING= (MAP (QUOTE STRING) (FUNCTION (LAMBDA (&REST REST) (IF (ZEROP (APPLY (FUNCTION LOGAND) REST)) #\0 #\1))) #(1 1 1 1) #(1 0 1 0 1 0 1) #(0)) "0")
225 Pass: (STRING= (MAP (QUOTE STRING) (FUNCTION (LAMBDA (&REST REST) (IF (ZEROP (APPLY (FUNCTION LOGAND) REST)) #\0 #\1))) #(1 1 1 1) #(1 0 0 0) #(1 0 1 1)) "1000")
226 Pass: (LET ((LIST NIL)) (AND (NULL (MAP NIL (FUNCTION (LAMBDA (&REST REST) (SETQ LIST (CONS (APPLY (FUNCTION +) REST) LIST)))) (QUOTE (0 1 2 3)) (QUOTE (1 2 3 4)))) (EQUAL LIST (QUOTE (7 5 3 1)))))
227 Pass: (LET ((LIST NIL)) (AND (NULL (MAP NIL (FUNCTION (LAMBDA (&REST REST) (SETQ LIST (CONS (APPLY (FUNCTION +) REST) LIST)))) (QUOTE (0 1 2 3)) (QUOTE (1 2 3 4)) (QUOTE (2 3 4 5)))) (EQUAL LIST (REVERSE (QUOTE (3 6 9 12))))))
228 Pass: (LET ((LIST NIL)) (AND (NULL (MAP NIL (FUNCTION (LAMBDA (&REST REST) (SETQ LIST (CONS (APPLY (FUNCTION +) REST) LIST)))) (QUOTE (0 1 2 3)) (QUOTE (1)) (QUOTE (2 3 4 5)))) (EQUAL LIST (QUOTE (3)))))
229 Pass: (EQUALP (MAP (QUOTE (VECTOR * 2)) (FUNCTION +) #(0 1) #(1 0)) #(1 1))
230 Pass: (EQUALP (MAP (QUOTE (SIMPLE-VECTOR 2)) (FUNCTION +) #(0 1) #(1 0)) #(1 1))
231 Pass: (EQUALP (MAP (QUOTE (ARRAY * 1)) (FUNCTION +) #(0 1) #(1 0)) #(1 1))
232 Pass: (EQUALP (MAP (QUOTE (SIMPLE-ARRAY * 1)) (FUNCTION +) #(0 1) #(1 0)) #(1 1))
233 Pass: (EQUALP (MAP (QUOTE (ARRAY * (2))) (FUNCTION +) #(0 1) #(1 0)) #(1 1))
234 Pass: (EQUALP (MAP (QUOTE (SIMPLE-ARRAY * (2))) (FUNCTION +) #(0 1) #(1 0)) #(1 1))
235 Pass: (STRING= (MAP (QUOTE STRING) (FUNCTION CHAR-UPCASE) "abc") "ABC")
236 Pass: (STRING= (MAP (QUOTE BASE-STRING) (FUNCTION CHAR-UPCASE) "abc") "ABC")
237 Pass: (STRING= (MAP (QUOTE SIMPLE-STRING) (FUNCTION CHAR-UPCASE) "abc") "ABC")
238 Pass: (STRING= (MAP (QUOTE (STRING 3)) (FUNCTION CHAR-UPCASE) "abc") "ABC")
239 Pass: (STRING= (MAP (QUOTE (BASE-STRING 3)) (FUNCTION CHAR-UPCASE) "abc") "ABC")
240 Pass: (STRING= (MAP (QUOTE (SIMPLE-STRING 3)) (FUNCTION CHAR-UPCASE) "abc") "ABC")
241 Pass: (STRING= (MAP (QUOTE (VECTOR CHARACTER)) (FUNCTION CHAR-UPCASE) "abc") "ABC")
242 Pass: (STRING= (MAP (QUOTE (VECTOR CHARACTER 3)) (FUNCTION CHAR-UPCASE) "abc") "ABC")
243 Pass: (STRING= (MAP (QUOTE (VECTOR BASE-CHAR)) (FUNCTION CHAR-UPCASE) "abc") "ABC")
244 Pass: (STRING= (MAP (QUOTE (VECTOR BASE-CHAR 3)) (FUNCTION CHAR-UPCASE) "abc") "ABC")
245 Pass: (STRING= (MAP (QUOTE (VECTOR STANDARD-CHAR)) (FUNCTION CHAR-UPCASE) "abc") "ABC")
246 Pass: (STRING= (MAP (QUOTE (VECTOR STANDARD-CHAR 3)) (FUNCTION CHAR-UPCASE) "abc") "ABC")
247 Pass: (STRING= (MAP (QUOTE (ARRAY CHARACTER 1)) (FUNCTION CHAR-UPCASE) "abc") "ABC")
248 Pass: (STRING= (MAP (QUOTE (ARRAY CHARACTER (3))) (FUNCTION CHAR-UPCASE) "abc") "ABC")
249 Pass: (STRING= (MAP (QUOTE (ARRAY BASE-CHAR 1)) (FUNCTION CHAR-UPCASE) "abc") "ABC")
250 Pass: (STRING= (MAP (QUOTE (ARRAY BASE-CHAR (3))) (FUNCTION CHAR-UPCASE) "abc") "ABC")
251 Pass: (STRING= (MAP (QUOTE (ARRAY STANDARD-CHAR 1)) (FUNCTION CHAR-UPCASE) "abc") "ABC")
252 Pass: (STRING= (MAP (QUOTE (ARRAY STANDARD-CHAR (3))) (FUNCTION CHAR-UPCASE) "abc") "ABC")
253 Pass: (EQUALP (MAP (QUOTE BIT-VECTOR) (FUNCTION LOGAND) (QUOTE (0 1 0 1)) #(1 0 1 0)) #(0 0 0 0))
254 Pass: (EQUALP (MAP (QUOTE SIMPLE-BIT-VECTOR) (FUNCTION LOGAND) (QUOTE (0 1 0 1)) #(1 0 1 0)) #(0 0 0 0))
255 Pass: (EQUALP (MAP (QUOTE (BIT-VECTOR 4)) (FUNCTION LOGAND) (QUOTE (0 1 0 1)) #(1 0 1 0)) #(0 0 0 0))
256 Pass: (EQUALP (MAP (QUOTE (SIMPLE-BIT-VECTOR 4)) (FUNCTION LOGAND) (QUOTE (0 1 0 1)) #(1 0 1 0)) #(0 0 0 0))
257 Pass: (EQUALP (MAP (QUOTE (ARRAY BIT 1)) (FUNCTION LOGAND) (QUOTE (0 1 0 1)) #(1 0 1 0)) #(0 0 0 0))
258 Pass: (EQUALP (MAP (QUOTE (ARRAY BIT (4))) (FUNCTION LOGAND) (QUOTE (0 1 0 1)) #(1 0 1 0)) #(0 0 0 0))
259 Pass: (EQUALP (MAP (QUOTE (SIMPLE-ARRAY BIT 1)) (FUNCTION LOGAND) (QUOTE (0 1 0 1)) #(1 0 1 0)) #(0 0 0 0))
260 Pass: (EQUALP (MAP (QUOTE (SIMPLE-ARRAY BIT (4))) (FUNCTION LOGAND) (QUOTE (0 1 0 1)) #(1 0 1 0)) #(0 0 0 0))
261 Pass: (EQUALP (MAP (QUOTE (VECTOR BIT)) (FUNCTION LOGAND) (QUOTE (0 1 0 1)) #(1 0 1 0)) #(0 0 0 0))
262 Pass: (EQUALP (MAP (QUOTE (VECTOR BIT 4)) (FUNCTION LOGAND) (QUOTE (0 1 0 1)) #(1 0 1 0)) #(0 0 0 0))
263 Pass: (EQUAL (MAP (QUOTE LIST) (FUNCTION +) (QUOTE (0 1 2 3)) #(3 2 1 0) #(0 1 0 1)) (QUOTE (3 4 3 4)))
264 Pass: (EQUALP (MAP (QUOTE VECTOR) (FUNCTION +) (QUOTE (0 1 2 3)) #(3 2 1 0) #(0 1 0 1)) #(3 4 3 4))
265 Pass: (LET ((A (LIST 1 2 3 4)) (B (LIST 10 10 10 10))) (AND (EQUAL (MAP-INTO A (FUNCTION +) A B) (QUOTE (11 12 13 14))) (EQUAL A (QUOTE (11 12 13 14))) (EQUAL B (QUOTE (10 10 10 10)))))
266 Pass: (LET ((A (QUOTE (11 12 13 14))) (K (QUOTE (ONE TWO THREE)))) (EQUAL (MAP-INTO A (FUNCTION CONS) K A) (QUOTE ((ONE . 11) (TWO . 12) (THREE . 13) 14))))
267 Pass: (NULL (MAP-INTO NIL (QUOTE IDENTITY)))
268 Pass: (NULL (MAP-INTO NIL (FUNCTION IDENTITY)))
269 Pass: (NULL (MAP-INTO NIL (FUNCTION IDENTITY) (QUOTE NIL)))
270 Pass: (NULL (MAP-INTO NIL (FUNCTION IDENTITY) (QUOTE (0 1 2)) (QUOTE (9 8 7))))
271 Pass: (LET ((LIST (LIST 0 1 2))) (AND (EQ (MAP-INTO LIST (QUOTE IDENTITY)) LIST) (EQUAL LIST (QUOTE (0 1 2)))))
272 Pass: (LET ((LIST (LIST 0 1 2))) (AND (EQ (MAP-INTO LIST (QUOTE IDENTITY) (QUOTE NIL)) LIST) (EQUAL LIST (QUOTE (0 1 2)))))
273 Pass: (LET ((VEC (VECTOR 0 1 2))) (AND (EQ (MAP-INTO VEC (QUOTE IDENTITY)) VEC) (EQUALP VEC #(0 1 2))))
274 Pass: (LET ((VEC (VECTOR 0 1 2))) (AND (EQ (MAP-INTO VEC (QUOTE IDENTITY) #()) VEC) (EQUALP VEC #(0 1 2))))
275 Pass: (LET ((VEC (VECTOR 0 1 2))) (AND (EQ (MAP-INTO VEC (FUNCTION +) #() (QUOTE NIL) #()) VEC) (EQUALP VEC #(0 1 2))))
276 Pass: (EQUAL (MAP-INTO (LIST NIL NIL) (QUOTE +) (QUOTE (0 1)) (QUOTE (1 0))) (QUOTE (1 1)))
277 Pass: (EQUAL (MAP-INTO (LIST NIL NIL) (QUOTE -) (QUOTE (0 1)) (QUOTE (1 0))) (QUOTE (-1 1)))
278 Pass: (LET ((LIST (MAKE-LIST 3 :INITIAL-ELEMENT NIL))) (AND (EQ (MAP-INTO LIST (FUNCTION +) (QUOTE (0 1 2))) LIST) (EQUAL LIST (QUOTE (0 1 2)))))
279 Pass: (LET ((LIST (MAKE-LIST 3 :INITIAL-ELEMENT NIL))) (AND (EQ (MAP-INTO LIST (FUNCTION +) (QUOTE (0 1 2)) (QUOTE (1 2 3))) LIST) (EQUAL LIST (QUOTE (1 3 5)))))
280 Pass: (LET ((LIST (MAKE-LIST 3 :INITIAL-ELEMENT NIL))) (AND (EQ (MAP-INTO LIST (FUNCTION +) (QUOTE (0 1 2)) (QUOTE (1 2 3)) (QUOTE (2 3 4))) LIST) (EQUAL LIST (QUOTE (3 6 9)))))
281 Pass: (LET ((LIST (MAKE-LIST 3 :INITIAL-ELEMENT NIL))) (AND (EQ (MAP-INTO LIST (FUNCTION +) (QUOTE (1 2)) (QUOTE (1 2 3))) LIST) (EQUAL LIST (QUOTE (2 4 NIL)))))
282 Pass: (LET ((LIST (MAKE-LIST 1 :INITIAL-ELEMENT NIL))) (AND (EQ (MAP-INTO LIST (FUNCTION +) (QUOTE (1 2 3)) (QUOTE (1 2 3))) LIST) (EQUAL LIST (QUOTE (2)))))
283 Pass: (LET ((LIST (MAKE-LIST 3 :INITIAL-ELEMENT NIL))) (AND (EQ (MAP-INTO LIST (FUNCTION +) (QUOTE (1 2 3 4)) (QUOTE (1 2 3)) (QUOTE (0))) LIST) (EQUAL LIST (QUOTE (2 NIL NIL)))))
284 Pass: (LET ((VEC (MAKE-SEQUENCE (QUOTE VECTOR) 3 :INITIAL-ELEMENT NIL))) (AND (EQ (MAP-INTO VEC (FUNCTION +) (QUOTE (0 1 2))) VEC) (EQUALP VEC #(0 1 2))))
285 Pass: (LET ((VEC (MAKE-SEQUENCE (QUOTE VECTOR) 3 :INITIAL-ELEMENT NIL))) (AND (EQ (MAP-INTO VEC (FUNCTION +) (QUOTE (0 1 2)) #(1 2 3)) VEC) (EQUALP VEC #(1 3 5))))
286 Pass: (LET ((VEC (MAKE-SEQUENCE (QUOTE VECTOR) 3 :INITIAL-ELEMENT NIL))) (AND (EQ (MAP-INTO VEC (FUNCTION +) (QUOTE (0 1 2)) (QUOTE (1 2 3)) #(2 3 4)) VEC) (EQUALP VEC #(3 6 9))))
287 Pass: (LET ((VEC (MAKE-SEQUENCE (QUOTE VECTOR) 3 :INITIAL-ELEMENT NIL))) (AND (EQ (MAP-INTO VEC (FUNCTION +) (QUOTE (1 2)) #(1 2 3)) VEC) (EQUALP VEC #(2 4 NIL))))
288 Pass: (LET ((VEC (MAKE-SEQUENCE (QUOTE VECTOR) 1 :INITIAL-ELEMENT NIL))) (AND (EQ (MAP-INTO VEC (FUNCTION +) (QUOTE (1 2)) #(1 2 3)) VEC) (EQUALP VEC #(2))))
289 Pass: (LET ((VEC (MAKE-SEQUENCE (QUOTE VECTOR) 3 :INITIAL-ELEMENT NIL))) (AND (EQ (MAP-INTO VEC (FUNCTION +) (QUOTE (1 2 3 4)) #(1 2 3) (QUOTE (0))) VEC) (EQUALP VEC #(2 NIL NIL))))
290 Pass: (LET ((STR (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE CHARACTER) :INITIAL-CONTENTS "0123456789" :FILL-POINTER 3))) (AND (EQ (MAP-INTO STR (FUNCTION CHAR-UPCASE) "abcde") STR) (STRING= STR "ABCDE") (= (FILL-POINTER STR) 5)))
291 Pass: (LET ((VEC (MAKE-ARRAY 5 :INITIAL-CONTENTS #(0 1 2 3 4) :FILL-POINTER 3))) (AND (EQ (MAP-INTO VEC (FUNCTION +) (QUOTE (0 1 2 3 4 5 6 7 8 9)) (QUOTE (9 8 7 6 5 4 3 2 1 0))) VEC) (EQUALP VEC #(9 9 9 9 9))))
292 Pass: (LET ((VEC (MAKE-ARRAY 5 :INITIAL-CONTENTS #(0 1 2 3 4) :FILL-POINTER 3))) (AND (EQ (MAP-INTO VEC (FUNCTION +) (QUOTE (0 1)) (QUOTE (9 8 7 6 5 4 3 2 1 0))) VEC) (EQUALP VEC #(9 9))))
293 Pass: (LET ((VEC (MAKE-ARRAY 5 :ELEMENT-TYPE (QUOTE BIT) :INITIAL-CONTENTS #(1 1 1 1 1) :FILL-POINTER 3))) (AND (EQ (MAP-INTO VEC (FUNCTION LOGAND) (QUOTE (0 1)) (QUOTE (1 0 1 0 1 0))) VEC) (EQUALP VEC #(0 0))))
294 Pass: (EQL (REDUCE (FUNCTION *) (QUOTE (1 2 3 4 5))) 120)
295 Pass: (EQUAL (REDUCE (FUNCTION APPEND) (QUOTE ((1) (2))) :INITIAL-VALUE (QUOTE (I N I T))) (QUOTE (I N I T 1 2)))
296 Pass: (EQUAL (REDUCE (FUNCTION APPEND) (QUOTE ((1) (2))) :FROM-END T :INITIAL-VALUE (QUOTE (I N I T))) (QUOTE (1 2 I N I T)))
297 Pass: (EQL (REDUCE (FUNCTION -) (QUOTE (1 2 3 4))) -8)
298 Pass: (EQL (REDUCE (FUNCTION -) (QUOTE (1 2 3 4)) :FROM-END T) -2)
299 Pass: (EQL (REDUCE (FUNCTION +) (QUOTE NIL)) 0)
300 Pass: (EQL (REDUCE (FUNCTION +) (QUOTE (3))) 3)
301 Pass: (EQ (REDUCE (FUNCTION +) (QUOTE (FOO))) (QUOTE FOO))
302 Pass: (EQUAL (REDUCE (FUNCTION LIST) (QUOTE (1 2 3 4))) (QUOTE (((1 2) 3) 4)))
303 Pass: (EQUAL (REDUCE (FUNCTION LIST) (QUOTE (1 2 3 4)) :FROM-END T) (QUOTE (1 (2 (3 4)))))
304 Pass: (EQUAL (REDUCE (FUNCTION LIST) (QUOTE (1 2 3 4)) :INITIAL-VALUE (QUOTE FOO)) (QUOTE ((((FOO 1) 2) 3) 4)))
305 Pass: (EQUAL (REDUCE (FUNCTION LIST) (QUOTE (1 2 3 4)) :FROM-END T :INITIAL-VALUE (QUOTE FOO)) (QUOTE (1 (2 (3 (4 FOO))))))
306 Pass: (EQUAL (REDUCE (FUNCTION LIST) (QUOTE (0 1 2 3))) (QUOTE (((0 1) 2) 3)))
307 Pass: (EQUAL (REDUCE (FUNCTION LIST) (QUOTE (0 1 2 3)) :START 1) (QUOTE ((1 2) 3)))
308 Pass: (EQUAL (REDUCE (FUNCTION LIST) (QUOTE (0 1 2 3)) :START 1 :END NIL) (QUOTE ((1 2) 3)))
309 Pass: (EQUAL (REDUCE (FUNCTION LIST) (QUOTE (0 1 2 3)) :START 2) (QUOTE (2 3)))
310 Pass: (EQ (REDUCE (FUNCTION LIST) (QUOTE (0 1 2 3)) :START 0 :END 0) (QUOTE NIL))
311 Pass: (EQ (REDUCE (FUNCTION LIST) (QUOTE (0 1 2 3)) :START 0 :END 0 :INITIAL-VALUE (QUOTE INITIAL-VALUE)) (QUOTE INITIAL-VALUE))
312 Pass: (EQ (REDUCE (FUNCTION LIST) (QUOTE (0 1 2 3)) :START 2 :END 2) (QUOTE NIL))
313 Pass: (EQ (REDUCE (FUNCTION LIST) (QUOTE (0 1 2 3)) :START 2 :END 2 :INITIAL-VALUE (QUOTE INITIAL-VALUE)) (QUOTE INITIAL-VALUE))
314 Pass: (EQ (REDUCE (FUNCTION LIST) (QUOTE (0 1 2 3)) :START 4 :END 4) (QUOTE NIL))
315 Pass: (EQ (REDUCE (FUNCTION LIST) (QUOTE (0 1 2 3)) :START 4 :END 4 :INITIAL-VALUE (QUOTE INITIAL-VALUE)) (QUOTE INITIAL-VALUE))
316 Pass: (EQL (REDUCE (FUNCTION LIST) (QUOTE (0 1 2 3)) :START 2 :END 3) 2)
317 Pass: (EQUAL (REDUCE (FUNCTION LIST) (QUOTE (0 1 2 3)) :START 2 :END 3 :INITIAL-VALUE (QUOTE INITIAL-VALUE)) (QUOTE (INITIAL-VALUE 2)))
318 Pass: (EQL (REDUCE (FUNCTION +) (QUOTE (0 1 2 3 4 5 6 7 8 9))) 45)
319 Pass: (EQL (REDUCE (FUNCTION -) (QUOTE (0 1 2 3 4 5 6 7 8 9))) -45)
320 Pass: (EQL (REDUCE (FUNCTION -) (QUOTE (0 1 2 3 4 5 6 7 8 9)) :FROM-END T) -5)
321 Pass: (EQUAL (REDUCE (FUNCTION LIST) (QUOTE (0 1 2 3)) :INITIAL-VALUE (QUOTE INITIAL-VALUE)) (QUOTE ((((INITIAL-VALUE 0) 1) 2) 3)))
322 Pass: (EQUAL (REDUCE (FUNCTION LIST) (QUOTE (0 1 2 3)) :FROM-END T) (QUOTE (0 (1 (2 3)))))
323 Pass: (EQUAL (REDUCE (FUNCTION LIST) (QUOTE ((1) (2) (3) (4))) :KEY (FUNCTION CAR)) (QUOTE (((1 2) 3) 4)))
324 Pass: (EQUAL (REDUCE (FUNCTION LIST) (QUOTE ((1) (2) (3) (4))) :KEY (FUNCTION CAR) :FROM-END NIL) (QUOTE (((1 2) 3) 4)))
325 Pass: (EQUAL (REDUCE (FUNCTION LIST) (QUOTE ((1) (2) (3) (4))) :KEY (FUNCTION CAR) :INITIAL-VALUE 0) (QUOTE ((((0 1) 2) 3) 4)))
326 Pass: (EQUAL (REDUCE (FUNCTION LIST) (QUOTE ((1) (2) (3) (4))) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (1 (2 (3 4)))))
327 Pass: (EQUAL (REDUCE (FUNCTION LIST) (QUOTE ((1) (2) (3) (4))) :KEY (FUNCTION CAR) :FROM-END T :INITIAL-VALUE 5) (QUOTE (1 (2 (3 (4 5))))))
328 Pass: (EQUAL (REDUCE (FUNCTION LIST) #(0 1 2 3)) (QUOTE (((0 1) 2) 3)))
329 Pass: (EQUAL (REDUCE (FUNCTION LIST) #(0 1 2 3) :START 1) (QUOTE ((1 2) 3)))
330 Pass: (EQUAL (REDUCE (FUNCTION LIST) #(0 1 2 3) :START 1 :END NIL) (QUOTE ((1 2) 3)))
331 Pass: (EQUAL (REDUCE (FUNCTION LIST) #(0 1 2 3) :START 2) (QUOTE (2 3)))
332 Pass: (EQ (REDUCE (FUNCTION LIST) #(0 1 2 3) :START 0 :END 0) (QUOTE NIL))
333 Pass: (EQ (REDUCE (FUNCTION LIST) #(0 1 2 3) :START 0 :END 0 :INITIAL-VALUE (QUOTE INITIAL-VALUE)) (QUOTE INITIAL-VALUE))
334 Pass: (EQ (REDUCE (FUNCTION LIST) #(0 1 2 3) :START 2 :END 2) (QUOTE NIL))
335 Pass: (EQ (REDUCE (FUNCTION LIST) #(0 1 2 3) :START 2 :END 2 :INITIAL-VALUE (QUOTE INITIAL-VALUE)) (QUOTE INITIAL-VALUE))
336 Pass: (EQ (REDUCE (FUNCTION LIST) #(0 1 2 3) :START 4 :END 4) (QUOTE NIL))
337 Pass: (EQ (REDUCE (FUNCTION LIST) #(0 1 2 3) :START 4 :END 4 :INITIAL-VALUE (QUOTE INITIAL-VALUE)) (QUOTE INITIAL-VALUE))
338 Pass: (EQL (REDUCE (FUNCTION LIST) #(0 1 2 3) :START 2 :END 3) 2)
339 Pass: (EQUAL (REDUCE (FUNCTION LIST) #(0 1 2 3) :START 2 :END 3 :INITIAL-VALUE (QUOTE INITIAL-VALUE)) (QUOTE (INITIAL-VALUE 2)))
340 Pass: (EQL (REDUCE (FUNCTION +) #(0 1 2 3 4 5 6 7 8 9)) 45)
341 Pass: (EQL (REDUCE (FUNCTION -) #(0 1 2 3 4 5 6 7 8 9)) -45)
342 Pass: (EQL (REDUCE (FUNCTION -) #(0 1 2 3 4 5 6 7 8 9) :FROM-END T) -5)
343 Pass: (EQUAL (REDUCE (FUNCTION LIST) #(0 1 2 3) :INITIAL-VALUE (QUOTE INITIAL-VALUE)) (QUOTE ((((INITIAL-VALUE 0) 1) 2) 3)))
344 Pass: (EQUAL (REDUCE (FUNCTION LIST) #(0 1 2 3) :FROM-END T) (QUOTE (0 (1 (2 3)))))
345 Pass: (EQUAL (REDUCE (FUNCTION LIST) #((1) (2) (3) (4)) :KEY (FUNCTION CAR)) (QUOTE (((1 2) 3) 4)))
346 Pass: (EQUAL (REDUCE (FUNCTION LIST) #((1) (2) (3) (4)) :KEY (FUNCTION CAR) :FROM-END NIL) (QUOTE (((1 2) 3) 4)))
347 Pass: (EQUAL (REDUCE (FUNCTION LIST) #((1) (2) (3) (4)) :KEY (FUNCTION CAR) :INITIAL-VALUE 0) (QUOTE ((((0 1) 2) 3) 4)))
348 Pass: (EQUAL (REDUCE (FUNCTION LIST) #((1) (2) (3) (4)) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (1 (2 (3 4)))))
349 Pass: (EQUAL (REDUCE (FUNCTION LIST) #((1) (2) (3) (4)) :KEY (FUNCTION CAR) :FROM-END T :INITIAL-VALUE 5) (QUOTE (1 (2 (3 (4 5))))))
350 Pass: (STRING= (REDUCE (FUNCTION (LAMBDA (&REST REST) (CONCATENATE (QUOTE STRING) (STRING (CAR REST)) (STRING (CHAR-UPCASE (CADR REST)))))) "abcdefg" :INITIAL-VALUE #\Z) "ZABCDEFG")
351 Pass: (EQL (COUNT #\a "how many A's are there in here?") 2)
352 Pass: (EQL (COUNT-IF-NOT (FUNCTION ODDP) (QUOTE ((1) (2) (3) (4))) :KEY (FUNCTION CAR)) 2)
353 Pass: (EQL (COUNT-IF (FUNCTION UPPER-CASE-P) "The Crying of Lot 49" :START 4) 2)
354 Pass: (EQL (COUNT #\a (CONCATENATE (QUOTE LIST) "how many A's are there in here?")) 2)
355 Pass: (EQL (COUNT-IF (FUNCTION ALPHA-CHAR-P) "-a-b-c-0-1-2-3-4-") 3)
356 Pass: (EQL (COUNT-IF (FUNCTION ALPHANUMERICP) "-a-b-c-0-1-2-3-4-") 8)
357 Pass: (EQL (COUNT (QUOTE NIL) (QUOTE (T NIL T NIL T NIL))) 3)
358 Pass: (EQL (COUNT (QUOTE NIL) #(T NIL T NIL T NIL)) 3)
359 Pass: (ZEROP (COUNT 9 (QUOTE (0 1 2 3 4))))
360 Pass: (ZEROP (COUNT (QUOTE A) (QUOTE (0 1 2 3 4))))
361 Pass: (EQL (COUNT 0 (QUOTE (0 0 0 0 0)) :START 1) 4)
362 Pass: (EQL (COUNT 0 (QUOTE (0 0 0 0 0)) :START 1 :END NIL) 4)
363 Pass: (EQL (COUNT 0 (QUOTE (0 0 0 0 0)) :START 2) 3)
364 Pass: (ZEROP (COUNT 0 (QUOTE (0 0 0 0)) :START 0 :END 0))
365 Pass: (ZEROP (COUNT 0 (QUOTE (0 0 0 0)) :START 2 :END 2))
366 Pass: (ZEROP (COUNT 0 (QUOTE (0 0 0 0)) :START 4 :END 4))
367 Pass: (EQL (COUNT 0 (QUOTE (0 0 0 0)) :START 2 :END 3) 1)
368 Pass: (EQL (COUNT #\a "abcABC" :TEST (FUNCTION EQUALP)) 2)
369 Pass: (EQL (COUNT #\a "abcABC" :TEST (FUNCTION CHAR-EQUAL)) 2)
370 Pass: (EQL (COUNT (QUOTE (A)) (QUOTE ((X) (Y) (Z) (A) (B) (C))) :TEST (FUNCTION EQUALP)) 1)
371 Pass: (EQL (COUNT #\a "abcABC" :TEST-NOT (COMPLEMENT (FUNCTION EQUALP))) 2)
372 Pass: (EQL (COUNT #\a "abcABC" :TEST-NOT (COMPLEMENT (FUNCTION CHAR-EQUAL))) 2)
373 Pass: (EQL (COUNT (QUOTE (A)) (QUOTE ((X) (Y) (Z) (A) (B) (C))) :TEST-NOT (COMPLEMENT (FUNCTION EQUALP))) 1)
374 Pass: (EQL (COUNT (QUOTE A) (QUOTE ((X) (Y) (Z) (A) (B) (C))) :KEY (FUNCTION CAR) :TEST (FUNCTION EQ)) 1)
375 Pass: (EQL (COUNT (QUOTE NIL) (QUOTE ((X . X) (Y) (Z . Z) (A) (B . B) (C))) :KEY (FUNCTION CDR) :TEST (FUNCTION EQ)) 3)
376 Pass: (LET ((LIST NIL)) (AND (EQL (COUNT (QUOTE A) (QUOTE (A B C D)) :TEST (FUNCTION (LAMBDA (A B) (SETQ LIST (CONS B LIST)) (EQ A B)))) 1) (EQUAL LIST (QUOTE (D C B A)))))
377 Pass: (LET ((LIST NIL)) (AND (EQL (COUNT (QUOTE A) (QUOTE (A B C D)) :TEST (FUNCTION (LAMBDA (A B) (SETQ LIST (CONS B LIST)) (EQ A B))) :FROM-END T) 1) (EQUAL LIST (QUOTE (A B C D)))))
378 Pass: (ZEROP (COUNT 9 #(0 1 2 3 4)))
379 Pass: (ZEROP (COUNT (QUOTE A) #(0 1 2 3 4)))
380 Pass: (EQL (COUNT 0 #(0 0 0 0 0) :START 1) 4)
381 Pass: (EQL (COUNT 0 #(0 0 0 0 0) :START 1 :END NIL) 4)
382 Pass: (EQL (COUNT 0 #(0 0 0 0 0) :START 2) 3)
383 Pass: (ZEROP (COUNT 0 #(0 0 0 0) :START 0 :END 0))
384 Pass: (ZEROP (COUNT 0 #(0 0 0 0) :START 2 :END 2))
385 Pass: (ZEROP (COUNT 0 #(0 0 0 0) :START 4 :END 4))
386 Pass: (EQL (COUNT 0 #(0 0 0 0) :START 2 :END 3) 1)
387 Pass: (EQL (COUNT (QUOTE (A)) #((X) (Y) (Z) (A) (B) (C)) :TEST (FUNCTION EQUALP)) 1)
388 Pass: (EQL (COUNT (QUOTE (A)) #((X) (Y) (Z) (A) (B) (C)) :TEST-NOT (COMPLEMENT (FUNCTION EQUALP))) 1)
389 Pass: (EQL (COUNT (QUOTE A) #((X) (Y) (Z) (A) (B) (C)) :KEY (FUNCTION CAR) :TEST (FUNCTION EQ)) 1)
390 Pass: (EQL (COUNT (QUOTE NIL) #((X . X) (Y) (Z . Z) (A) (B . B) (C)) :KEY (FUNCTION CDR) :TEST (FUNCTION EQ)) 3)
391 Pass: (LET ((LIST NIL)) (AND (EQL (COUNT (QUOTE A) #(A B C D) :TEST (FUNCTION (LAMBDA (A B) (SETQ LIST (CONS B LIST)) (EQ A B)))) 1) (EQUAL LIST (QUOTE (D C B A)))))
392 Pass: (LET ((LIST NIL)) (AND (EQL (COUNT (QUOTE A) #(A B C D) :TEST (FUNCTION (LAMBDA (A B) (SETQ LIST (CONS B LIST)) (EQ A B))) :FROM-END T) 1) (EQUAL LIST (QUOTE (A B C D)))))
393 Pass: (EQL (COUNT-IF (FUNCTION NULL) (QUOTE (T NIL T NIL T NIL))) 3)
394 Pass: (ZEROP (COUNT-IF (FUNCTION (LAMBDA (X) (EQL X 9))) #(0 1 2 3 4)))
395 Pass: (ZEROP (COUNT-IF (FUNCTION (LAMBDA (A) (EQ (QUOTE X) A))) #(0 1 2 3 4)))
396 Pass: (EQL (COUNT-IF (FUNCTION ZEROP) (QUOTE (0 0 0 0 0)) :START 1) 4)
397 Pass: (EQL (COUNT-IF (FUNCTION ZEROP) (QUOTE (0 0 0 0 0)) :START 1 :END NIL) 4)
398 Pass: (EQL (COUNT-IF (FUNCTION ZEROP) (QUOTE (0 0 0 0 0)) :START 2) 3)
399 Pass: (ZEROP (COUNT-IF (FUNCTION ZEROP) (QUOTE (0 0 0 0)) :START 0 :END 0))
400 Pass: (ZEROP (COUNT-IF (FUNCTION ZEROP) (QUOTE (0 0 0 0)) :START 2 :END 2))
401 Pass: (ZEROP (COUNT-IF (FUNCTION ZEROP) (QUOTE (0 0 0 0)) :START 4 :END 4))
402 Pass: (EQL (COUNT-IF (FUNCTION ZEROP) (QUOTE (0 0 0 0)) :START 2 :END 3) 1)
403 Pass: (EQL (COUNT-IF (FUNCTION (LAMBDA (X) (EQUALP #\a X))) "abcABC") 2)
404 Pass: (EQL (COUNT-IF (FUNCTION (LAMBDA (X) (CHAR-EQUAL #\a X))) "abcABC") 2)
405 Pass: (EQL (COUNT-IF (FUNCTION (LAMBDA (X) (EQUAL X (QUOTE (A))))) (QUOTE ((X) (Y) (Z) (A) (B) (C)))) 1)
406 Pass: (EQL (COUNT-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE ((X) (Y) (Z) (A) (B) (C))) :KEY (FUNCTION CAR)) 1)
407 Pass: (EQL (COUNT-IF (QUOTE NULL) (QUOTE ((X . X) (Y) (Z . Z) (A) (B . B) (C))) :KEY (FUNCTION CDR)) 3)
408 Pass: (EQL (COUNT-IF (FUNCTION (LAMBDA (X) (EQUAL X (QUOTE (A))))) (QUOTE ((X) (Y) (Z) (A) (B) (C)))) 1)
409 Pass: (EQL (COUNT-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE ((X) (Y) (Z) (A) (B) (C))) :KEY (FUNCTION CAR)) 1)
410 Pass: (EQL (COUNT-IF (FUNCTION NULL) (QUOTE ((X . X) (Y) (Z . Z) (A) (B . B) (C))) :KEY (FUNCTION CDR)) 3)
411 Pass: (LET ((LIST NIL)) (AND (EQL (COUNT-IF (FUNCTION (LAMBDA (X) (SETQ LIST (CONS X LIST)) (EQ X (QUOTE A)))) (QUOTE (A B C D))) 1) (EQUAL LIST (QUOTE (D C B A)))))
412 Pass: (LET ((LIST NIL)) (AND (EQL (COUNT-IF (FUNCTION (LAMBDA (X) (SETQ LIST (CONS X LIST)) (EQ X (QUOTE A)))) (QUOTE (A B C D)) :FROM-END T) 1) (EQUAL LIST (QUOTE (A B C D)))))
413 Pass: (EQL (COUNT-IF (FUNCTION NULL) #(T NIL T NIL T NIL)) 3)
414 Pass: (EQL (COUNT-IF (FUNCTION ZEROP) #(0 0 0 0 0) :START 1) 4)
415 Pass: (EQL (COUNT-IF (FUNCTION ZEROP) #(0 0 0 0 0) :START 1 :END NIL) 4)
416 Pass: (EQL (COUNT-IF (FUNCTION ZEROP) #(0 0 0 0 0) :START 2) 3)
417 Pass: (ZEROP (COUNT-IF (FUNCTION ZEROP) #(0 0 0 0) :START 0 :END 0))
418 Pass: (ZEROP (COUNT-IF (FUNCTION ZEROP) #(0 0 0 0) :START 2 :END 2))
419 Pass: (ZEROP (COUNT-IF (FUNCTION ZEROP) #(0 0 0 0) :START 4 :END 4))
420 Pass: (EQL (COUNT-IF (FUNCTION ZEROP) #(0 0 0 0) :START 2 :END 3) 1)
421 Pass: (EQL (COUNT-IF (FUNCTION (LAMBDA (X) (EQUAL X (QUOTE (A))))) #((X) (Y) (Z) (A) (B) (C))) 1)
422 Pass: (EQL (COUNT-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #((X) (Y) (Z) (A) (B) (C)) :KEY (FUNCTION CAR)) 1)
423 Pass: (EQL (COUNT-IF (FUNCTION NULL) #((X . X) (Y) (Z . Z) (A) (B . B) (C)) :KEY (FUNCTION CDR)) 3)
424 Pass: (EQL (COUNT-IF (FUNCTION (LAMBDA (X) (EQUAL X (QUOTE (A))))) #((X) (Y) (Z) (A) (B) (C))) 1)
425 Pass: (EQL (COUNT-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #((X) (Y) (Z) (A) (B) (C)) :KEY (FUNCTION CAR)) 1)
426 Pass: (EQL (COUNT-IF (FUNCTION NULL) #((X . X) (Y) (Z . Z) (A) (B . B) (C)) :KEY (FUNCTION CDR)) 3)
427 Pass: (LET ((LIST NIL)) (AND (EQL (COUNT-IF (FUNCTION (LAMBDA (X) (SETQ LIST (CONS X LIST)) (EQ X (QUOTE A)))) #(A B C D)) 1) (EQUAL LIST (QUOTE (D C B A)))))
428 Pass: (LET ((LIST NIL)) (AND (EQL (COUNT-IF (FUNCTION (LAMBDA (X) (SETQ LIST (CONS X LIST)) (EQ X (QUOTE A)))) #(A B C D) :FROM-END T) 1) (EQUAL LIST (QUOTE (A B C D)))))
429 Pass: (EQL (COUNT-IF-NOT (COMPLEMENT (FUNCTION NULL)) (QUOTE (T NIL T NIL T NIL))) 3)
430 Pass: (ZEROP (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQL X 9)))) #(0 1 2 3 4)))
431 Pass: (ZEROP (COUNT-IF-NOT (FUNCTION (LAMBDA (A) (NOT (EQ (QUOTE X) A)))) #(0 1 2 3 4)))
432 Pass: (EQL (COUNT-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) (QUOTE (0 0 0 0 0)) :START 1) 4)
433 Pass: (EQL (COUNT-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) (QUOTE (0 0 0 0 0)) :START 1 :END NIL) 4)
434 Pass: (EQL (COUNT-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) (QUOTE (0 0 0 0 0)) :START 2) 3)
435 Pass: (ZEROP (COUNT-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) (QUOTE (0 0 0 0)) :START 0 :END 0))
436 Pass: (ZEROP (COUNT-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) (QUOTE (0 0 0 0)) :START 2 :END 2))
437 Pass: (ZEROP (COUNT-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) (QUOTE (0 0 0 0)) :START 4 :END 4))
438 Pass: (EQL (COUNT-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) (QUOTE (0 0 0 0)) :START 2 :END 3) 1)
439 Pass: (EQL (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQUALP #\a X)))) "abcABC") 2)
440 Pass: (EQL (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (CHAR-EQUAL #\a X)))) "abcABC") 2)
441 Pass: (EQL (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQUAL X (QUOTE (A)))))) (QUOTE ((X) (Y) (Z) (A) (B) (C)))) 1)
442 Pass: (EQL (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE ((X) (Y) (Z) (A) (B) (C))) :KEY (FUNCTION CAR)) 1)
443 Pass: (EQL (COUNT-IF-NOT (COMPLEMENT (FUNCTION NULL)) (QUOTE ((X . X) (Y) (Z . Z) (A) (B . B) (C))) :KEY (FUNCTION CDR)) 3)
444 Pass: (EQL (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQUAL X (QUOTE (A)))))) (QUOTE ((X) (Y) (Z) (A) (B) (C)))) 1)
445 Pass: (EQL (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE ((X) (Y) (Z) (A) (B) (C))) :KEY (FUNCTION CAR)) 1)
446 Pass: (EQL (COUNT-IF-NOT (COMPLEMENT (FUNCTION NULL)) (QUOTE ((X . X) (Y) (Z . Z) (A) (B . B) (C))) :KEY (FUNCTION CDR)) 3)
447 Pass: (LET ((LIST NIL)) (AND (EQL (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (SETQ LIST (CONS X LIST)) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C D))) 1) (EQUAL LIST (QUOTE (D C B A)))))
448 Pass: (LET ((LIST NIL)) (AND (EQL (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (SETQ LIST (CONS X LIST)) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C D)) :FROM-END T) 1) (EQUAL LIST (QUOTE (A B C D)))))
449 Pass: (EQL (COUNT-IF-NOT (COMPLEMENT (FUNCTION NULL)) #(T NIL T NIL T NIL)) 3)
450 Pass: (EQL (COUNT-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 0 0 0 0) :START 1) 4)
451 Pass: (EQL (COUNT-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 0 0 0 0) :START 1 :END NIL) 4)
452 Pass: (EQL (COUNT-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 0 0 0 0) :START 2) 3)
453 Pass: (ZEROP (COUNT-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 0 0 0) :START 0 :END 0))
454 Pass: (ZEROP (COUNT-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 0 0 0) :START 2 :END 2))
455 Pass: (ZEROP (COUNT-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 0 0 0) :START 4 :END 4))
456 Pass: (EQL (COUNT-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 0 0 0) :START 2 :END 3) 1)
457 Pass: (EQL (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQUAL X (QUOTE (A)))))) #((X) (Y) (Z) (A) (B) (C))) 1)
458 Pass: (EQL (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #((X) (Y) (Z) (A) (B) (C)) :KEY (FUNCTION CAR)) 1)
459 Pass: (EQL (COUNT-IF-NOT (COMPLEMENT (FUNCTION NULL)) #((X . X) (Y) (Z . Z) (A) (B . B) (C)) :KEY (FUNCTION CDR)) 3)
460 Pass: (EQL (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQUAL X (QUOTE (A)))))) #((X) (Y) (Z) (A) (B) (C))) 1)
461 Pass: (EQL (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #((X) (Y) (Z) (A) (B) (C)) :KEY (FUNCTION CAR)) 1)
462 Pass: (EQL (COUNT-IF-NOT (COMPLEMENT (FUNCTION NULL)) #((X . X) (Y) (Z . Z) (A) (B . B) (C)) :KEY (FUNCTION CDR)) 3)
463 Pass: (LET ((LIST NIL)) (AND (EQL (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (SETQ LIST (CONS X LIST)) (NOT (EQ X (QUOTE A))))) #(A B C D)) 1) (EQUAL LIST (QUOTE (D C B A)))))
464 Pass: (LET ((LIST NIL)) (AND (EQL (COUNT-IF-NOT (FUNCTION (LAMBDA (X) (SETQ LIST (CONS X LIST)) (NOT (EQ X (QUOTE A))))) #(A B C D) :FROM-END T) 1) (EQUAL LIST (QUOTE (A B C D)))))
465 Pass: (NULL (REVERSE NIL))
466 Pass: (STRING= (REVERSE "") "")
467 Pass: (EQUALP (REVERSE #()) #())
468 Pass: (EQUALP (REVERSE #()) #())
469 Pass: (EQUAL (REVERSE (QUOTE (0 1 2 3))) (QUOTE (3 2 1 0)))
470 Pass: (STRING= (REVERSE "0123") "3210")
471 Pass: (EQUALP (REVERSE #(1 1 0 0)) #(0 0 1 1))
472 Pass: (EQUALP (REVERSE #(A B C D)) #(D C B A))
473 Pass: (NULL (NREVERSE NIL))
474 Pass: (STRING= (NREVERSE (COPY-SEQ "")) "")
475 Pass: (EQUALP (NREVERSE (COPY-SEQ #())) #())
476 Pass: (EQUALP (NREVERSE (COPY-SEQ #())) #())
477 Pass: (EQUAL (NREVERSE (LIST 0 1 2 3)) (QUOTE (3 2 1 0)))
478 Pass: (STRING= (NREVERSE (COPY-SEQ "0123")) "3210")
479 Pass: (EQUALP (REVERSE (COPY-SEQ #(1 1 0 0))) #(0 0 1 1))
480 Pass: (EQUALP (REVERSE (COPY-SEQ #(A B C D))) #(D C B A))
481 Pass: (CHAR= (FIND #\d "edcba" :TEST (FUNCTION CHAR>)) #\c)
482 Pass: (EQL (FIND-IF (FUNCTION ODDP) (QUOTE (1 2 3 4 5)) :END 3 :FROM-END T) 3)
483 Failed: no dispatch function defined for #\C
484 Failed: Illegal function call: (1 0)
485 Failed: no dispatch function defined for #\C
486 Failed: Illegal function call: (0 1)
487 Failed: unmatched close parenthesis
488 Pass: :START
489 Pass: 2
490 Failed: unmatched close parenthesis
491 Failed: unmatched close parenthesis
492 Pass: (EQ (FIND (QUOTE A) (QUOTE (A B C))) (QUOTE A))
493 Pass: (EQ (FIND (QUOTE B) (QUOTE (A B C))) (QUOTE B))
494 Pass: (EQ (FIND (QUOTE C) (QUOTE (A B C))) (QUOTE C))
495 Pass: (NULL (FIND (QUOTE X) (QUOTE (A B C))))
496 Pass: (NULL (FIND (QUOTE A) (QUOTE (A B C)) :START 1))
497 Pass: (NULL (FIND (QUOTE B) (QUOTE (A B C)) :START 2))
498 Pass: (NULL (FIND (QUOTE C) (QUOTE (A B C)) :START 3))
499 Pass: (NULL (FIND (QUOTE A) (QUOTE (A B C)) :START 0 :END 0))
500 Pass: (NULL (FIND (QUOTE A) (QUOTE (A B C)) :START 0 :END 0 :FROM-END T))
501 Pass: (NULL (FIND (QUOTE A) (QUOTE (A B C)) :START 1 :END 1))
502 Pass: (NULL (FIND (QUOTE A) (QUOTE (A B C)) :START 1 :END 1 :FROM-END T))
503 Pass: (NULL (FIND (QUOTE A) (QUOTE (A B C)) :START 2 :END 2))
504 Pass: (NULL (FIND (QUOTE A) (QUOTE (A B C)) :START 2 :END 2 :FROM-END T))
505 Pass: (NULL (FIND (QUOTE A) (QUOTE (A B C)) :START 3 :END 3))
506 Pass: (NULL (FIND (QUOTE A) (QUOTE (A B C)) :START 3 :END 3 :FROM-END T))
507 Pass: (EQ (FIND (QUOTE A) (QUOTE (A B C)) :END NIL) (QUOTE A))
508 Pass: (EQ (FIND (QUOTE B) (QUOTE (A B C)) :END NIL) (QUOTE B))
509 Pass: (EQ (FIND (QUOTE C) (QUOTE (A B C)) :END NIL) (QUOTE C))
510 Pass: (EQ (FIND (QUOTE A) (QUOTE (A B C)) :END 1) (QUOTE A))
511 Pass: (EQ (FIND (QUOTE B) (QUOTE (A B C)) :END 2) (QUOTE B))
512 Pass: (EQ (FIND (QUOTE C) (QUOTE (A B C)) :END 3) (QUOTE C))
513 Pass: (NULL (FIND (QUOTE A) (QUOTE (A B C)) :END 0))
514 Pass: (NULL (FIND (QUOTE B) (QUOTE (A B C)) :END 1))
515 Pass: (NULL (FIND (QUOTE C) (QUOTE (A B C)) :END 2))
516 Pass: (NULL (FIND (QUOTE A) (QUOTE ((A) (B) (C)))))
517 Pass: (EQUAL (FIND (QUOTE A) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)) (QUOTE (A)))
518 Pass: (EQUAL (FIND (QUOTE B) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)) (QUOTE (B)))
519 Pass: (EQUAL (FIND (QUOTE C) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)) (QUOTE (C)))
520 Pass: (NULL (FIND (QUOTE Z) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)))
521 Pass: (LET ((LIST (QUOTE ((A) (B) (C))))) (AND (EQ (FIND (QUOTE A) LIST :KEY (FUNCTION CAR)) (CAR LIST)) (EQ (FIND (QUOTE B) LIST :KEY (FUNCTION CAR)) (CADR LIST)) (EQ (FIND (QUOTE C) LIST :KEY (FUNCTION CAR)) (CADDR LIST)) (NULL (FIND (QUOTE Z) LIST :KEY (FUNCTION CAR)))))
522 Pass: (NULL (FIND (QUOTE (A)) (QUOTE ((A) (B) (C)))))
523 Pass: (EQUAL (FIND (QUOTE (A)) (QUOTE ((A) (B) (C))) :TEST (FUNCTION EQUAL)) (QUOTE (A)))
524 Pass: (NULL (FIND (QUOTE ("a")) (QUOTE (("a") ("b") ("c")))))
525 Pass: (NULL (FIND (QUOTE ("a")) (QUOTE (("A") ("B") ("c"))) :TEST (FUNCTION EQUAL)))
526 Pass: (EQUAL (FIND (QUOTE ("a")) (QUOTE (("A") ("B") ("c"))) :TEST (FUNCTION EQUALP)) (QUOTE ("A")))
527 Pass: (EQ (FIND (QUOTE NIL) (QUOTE (FIRST SECOND THIRD)) :TEST (CONSTANTLY T)) (QUOTE FIRST))
528 Pass: (EQL (FIND 3 (QUOTE (0 1 2 3 4 5))) 3)
529 Pass: (EQL (FIND 3 (QUOTE (0 1 2 3 4 5)) :TEST (FUNCTION <)) 4)
530 Pass: (EQL (FIND 3 (QUOTE (0 1 2 3 4 5)) :TEST (FUNCTION >)) 0)
531 Pass: (EQUAL (FIND (QUOTE (A)) (QUOTE ((A) (B) (C))) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))) (QUOTE (A)))
532 Pass: (NULL (FIND (QUOTE ("a")) (QUOTE (("A") ("B") ("c"))) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))
533 Pass: (EQUAL (FIND (QUOTE ("a")) (QUOTE (("A") ("B") ("c"))) :TEST-NOT (COMPLEMENT (FUNCTION EQUALP))) (QUOTE ("A")))
534 Pass: (EQ (FIND (QUOTE NIL) (QUOTE (FIRST SECOND THIRD)) :TEST-NOT (CONSTANTLY NIL)) (QUOTE FIRST))
535 Pass: (EQL (FIND 3 (QUOTE (0 1 2 3 4 5)) :TEST-NOT (FUNCTION >=)) 4)
536 Pass: (EQL (FIND 3 (QUOTE (0 1 2 3 4 5)) :TEST-NOT (FUNCTION <=)) 0)
537 Pass: (EQUAL (FIND (QUOTE A) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)) (QUOTE (A)))
538 Pass: (EQUAL (FIND (QUOTE A) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (A A)))
539 Pass: (EQUAL (FIND (QUOTE B) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)) (QUOTE (B)))
540 Pass: (EQUAL (FIND (QUOTE B) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (B B)))
541 Pass: (EQUAL (FIND (QUOTE C) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)) (QUOTE (C)))
542 Pass: (EQUAL (FIND (QUOTE C) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (C C)))
543 Pass: (NULL (FIND (QUOTE Z) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)))
544 Pass: (NULL (FIND (QUOTE Z) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T))
545 Pass: (EQUAL (FIND (QUOTE A) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (A A A)))
546 Pass: (EQUAL (FIND (QUOTE A) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T :END NIL) (QUOTE (A A A)))
547 Pass: (EQUAL (FIND (QUOTE A) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T :END 6) (QUOTE (A A)))
548 Pass: (NULL (FIND (QUOTE A) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T :START 1 :END 3))
549 Pass: (NULL (FIND #\c (QUOTE ("abc" "bcd" "cde"))))
550 Pass: (STRING= (FIND #\c (QUOTE ("abc" "bcd" "cde")) :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0))) :TEST (FUNCTION CHAR=)) "cde")
551 Pass: (STRING= (FIND #\c (QUOTE ("abc" "bcd" "cde")) :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0))) :TEST (FUNCTION CHAR>)) "abc")
552 Pass: (STRING= (FIND #\c (QUOTE ("abc" "bcd" "cde")) :START 1 :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0))) :TEST (FUNCTION CHAR>)) "bcd")
553 Pass: (EQ (FIND (QUOTE A) #(A B C)) (QUOTE A))
554 Pass: (EQ (FIND (QUOTE B) #(A B C)) (QUOTE B))
555 Pass: (EQ (FIND (QUOTE C) #(A B C)) (QUOTE C))
556 Pass: (NULL (FIND (QUOTE X) #(A B C)))
557 Pass: (NULL (FIND (QUOTE A) #(A B C) :START 1))
558 Pass: (NULL (FIND (QUOTE B) #(A B C) :START 2))
559 Pass: (NULL (FIND (QUOTE C) #(A B C) :START 3))
560 Pass: (NULL (FIND (QUOTE A) #(A B C) :START 0 :END 0))
561 Pass: (NULL (FIND (QUOTE A) #(A B C) :START 0 :END 0 :FROM-END T))
562 Pass: (NULL (FIND (QUOTE A) #(A B C) :START 1 :END 1))
563 Pass: (NULL (FIND (QUOTE A) #(A B C) :START 1 :END 1 :FROM-END T))
564 Pass: (NULL (FIND (QUOTE A) #(A B C) :START 2 :END 2))
565 Pass: (NULL (FIND (QUOTE A) #(A B C) :START 2 :END 2 :FROM-END T))
566 Pass: (NULL (FIND (QUOTE A) #(A B C) :START 3 :END 3))
567 Pass: (NULL (FIND (QUOTE A) #(A B C) :START 3 :END 3 :FROM-END T))
568 Pass: (EQ (FIND (QUOTE A) #(A B C) :END NIL) (QUOTE A))
569 Pass: (EQ (FIND (QUOTE B) #(A B C) :END NIL) (QUOTE B))
570 Pass: (EQ (FIND (QUOTE C) #(A B C) :END NIL) (QUOTE C))
571 Pass: (EQ (FIND (QUOTE A) #(A B C) :END 1) (QUOTE A))
572 Pass: (EQ (FIND (QUOTE B) #(A B C) :END 2) (QUOTE B))
573 Pass: (EQ (FIND (QUOTE C) #(A B C) :END 3) (QUOTE C))
574 Pass: (NULL (FIND (QUOTE A) #(A B C) :END 0))
575 Pass: (NULL (FIND (QUOTE B) #(A B C) :END 1))
576 Pass: (NULL (FIND (QUOTE C) #(A B C) :END 2))
577 Pass: (NULL (FIND (QUOTE A) #((A) (B) (C))))
578 Pass: (EQUAL (FIND (QUOTE A) #((A) (B) (C)) :KEY (FUNCTION CAR)) (QUOTE (A)))
579 Pass: (EQUAL (FIND (QUOTE B) #((A) (B) (C)) :KEY (FUNCTION CAR)) (QUOTE (B)))
580 Pass: (EQUAL (FIND (QUOTE C) #((A) (B) (C)) :KEY (FUNCTION CAR)) (QUOTE (C)))
581 Pass: (NULL (FIND (QUOTE Z) #((A) (B) (C)) :KEY (FUNCTION CAR)))
582 Pass: (LET ((VECTOR #((A) (B) (C)))) (AND (EQ (FIND (QUOTE A) VECTOR :KEY (FUNCTION CAR)) (AREF VECTOR 0)) (EQ (FIND (QUOTE B) VECTOR :KEY (FUNCTION CAR)) (AREF VECTOR 1)) (EQ (FIND (QUOTE C) VECTOR :KEY (FUNCTION CAR)) (AREF VECTOR 2)) (NULL (FIND (QUOTE Z) VECTOR :KEY (FUNCTION CAR)))))
583 Pass: (NULL (FIND (QUOTE (A)) #((A) (B) (C))))
584 Pass: (EQUAL (FIND (QUOTE (A)) #((A) (B) (C)) :TEST (FUNCTION EQUAL)) (QUOTE (A)))
585 Pass: (NULL (FIND (QUOTE ("a")) #(("a") ("b") ("c"))))
586 Pass: (NULL (FIND (QUOTE ("a")) #(("A") ("B") ("c")) :TEST (FUNCTION EQUAL)))
587 Pass: (EQUAL (FIND (QUOTE ("a")) #(("A") ("B") ("c")) :TEST (FUNCTION EQUALP)) (QUOTE ("A")))
588 Pass: (EQ (FIND (QUOTE NIL) #(FIRST SECOND THIRD) :TEST (CONSTANTLY T)) (QUOTE FIRST))
589 Pass: (EQL (FIND 3 #(0 1 2 3 4 5)) 3)
590 Pass: (EQL (FIND 3 #(0 1 2 3 4 5) :TEST (FUNCTION <)) 4)
591 Pass: (EQL (FIND 3 #(0 1 2 3 4 5) :TEST (FUNCTION >)) 0)
592 Pass: (EQUAL (FIND (QUOTE (A)) #((A) (B) (C)) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))) (QUOTE (A)))
593 Pass: (NULL (FIND (QUOTE ("a")) #(("A") ("B") ("c")) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))
594 Pass: (EQUAL (FIND (QUOTE ("a")) #(("A") ("B") ("c")) :TEST-NOT (COMPLEMENT (FUNCTION EQUALP))) (QUOTE ("A")))
595 Pass: (EQ (FIND (QUOTE NIL) #(FIRST SECOND THIRD) :TEST-NOT (CONSTANTLY NIL)) (QUOTE FIRST))
596 Pass: (EQL (FIND 3 #(0 1 2 3 4 5) :TEST-NOT (FUNCTION >=)) 4)
597 Pass: (EQL (FIND 3 #(0 1 2 3 4 5) :TEST-NOT (FUNCTION <=)) 0)
598 Pass: (EQUAL (FIND (QUOTE A) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)) (QUOTE (A)))
599 Pass: (EQUAL (FIND (QUOTE A) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (A A)))
600 Pass: (EQUAL (FIND (QUOTE B) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)) (QUOTE (B)))
601 Pass: (EQUAL (FIND (QUOTE B) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (B B)))
602 Pass: (EQUAL (FIND (QUOTE C) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)) (QUOTE (C)))
603 Pass: (EQUAL (FIND (QUOTE C) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (C C)))
604 Pass: (NULL (FIND (QUOTE Z) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)))
605 Pass: (NULL (FIND (QUOTE Z) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T))
606 Pass: (EQUAL (FIND (QUOTE A) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (A A A)))
607 Pass: (EQUAL (FIND (QUOTE A) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T :END NIL) (QUOTE (A A A)))
608 Pass: (EQUAL (FIND (QUOTE A) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T :END 6) (QUOTE (A A)))
609 Pass: (NULL (FIND (QUOTE A) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T :START 1 :END 3))
610 Pass: (NULL (FIND #\c #("abc" "bcd" "cde")))
611 Pass: (STRING= (FIND #\c #("abc" "bcd" "cde") :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0))) :TEST (FUNCTION CHAR=)) "cde")
612 Pass: (STRING= (FIND #\c #("abc" "bcd" "cde") :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0))) :TEST (FUNCTION CHAR>)) "abc")
613 Pass: (STRING= (FIND #\c #("abc" "bcd" "cde") :START 1 :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0))) :TEST (FUNCTION CHAR>)) "bcd")
614 Pass: (NULL (FIND #\z "abcABC"))
615 Pass: (EQL (FIND #\a "abcABC") #\a)
616 Pass: (EQL (FIND #\A "abcABC") #\A)
617 Pass: (EQL (FIND #\A "abcABC" :TEST (FUNCTION CHAR-EQUAL)) #\a)
618 Pass: (EQL (FIND #\A "abcABC" :TEST (FUNCTION CHAR-EQUAL) :FROM-END T) #\A)
619 Pass: (EQL (FIND #\a "abcABC" :TEST (FUNCTION CHAR-EQUAL) :FROM-END T) #\A)
620 Pass: (EQL (FIND #\a "abcABC" :TEST (FUNCTION CHAR-EQUAL) :FROM-END T :END 4) #\A)
621 Pass: (EQL (FIND #\a "abcABC" :TEST (FUNCTION CHAR-EQUAL) :FROM-END T :END 3) #\a)
622 Pass: (ZEROP (FIND 0 #(0 1)))
623 Pass: (EQL (FIND 1 #(0 1)) 1)
624 Pass: (NULL (FIND 0 #(0 1) :START 1))
625 Pass: (NULL (FIND 1 #(0 1) :END 0))
626 Pass: (NULL (FIND 0 #(0 0 0 0 0 1) :START 5))
627 Pass: (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C))) (QUOTE A))
628 Pass: (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) (QUOTE (A B C))) (QUOTE B))
629 Pass: (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) (QUOTE (A B C))) (QUOTE C))
630 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A B C))))
631 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :START 1))
632 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) (QUOTE (A B C)) :START 2))
633 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) (QUOTE (A B C)) :START 3))
634 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :START 0 :END 0))
635 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :START 0 :END 0 :FROM-END T))
636 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :START 1 :END 1))
637 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :START 1 :END 1 :FROM-END T))
638 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :START 2 :END 2))
639 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :START 2 :END 2 :FROM-END T))
640 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :START 3 :END 3))
641 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :START 3 :END 3 :FROM-END T))
642 Pass: (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :END NIL) (QUOTE A))
643 Pass: (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) (QUOTE (A B C)) :END NIL) (QUOTE B))
644 Pass: (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) (QUOTE (A B C)) :END NIL) (QUOTE C))
645 Pass: (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :END 1) (QUOTE A))
646 Pass: (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) (QUOTE (A B C)) :END 2) (QUOTE B))
647 Pass: (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) (QUOTE (A B C)) :END 3) (QUOTE C))
648 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :END 0))
649 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) (QUOTE (A B C)) :END 1))
650 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) (QUOTE (A B C)) :END 2))
651 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE ((A) (B) (C)))))
652 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)) (QUOTE (A)))
653 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)) (QUOTE (B)))
654 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)) (QUOTE (C)))
655 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE Z)))) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)))
656 Pass: (LET ((LIST (QUOTE ((A) (B) (C))))) (AND (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) LIST :KEY (FUNCTION CAR)) (CAR LIST)) (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) LIST :KEY (FUNCTION CAR)) (CADR LIST)) (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) LIST :KEY (FUNCTION CAR)) (CADDR LIST)) (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE Z)))) LIST :KEY (FUNCTION CAR)))))
657 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)) (QUOTE (A)))
658 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (A A)))
659 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)) (QUOTE (B)))
660 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (B B)))
661 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)) (QUOTE (C)))
662 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (C C)))
663 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE Z)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)))
664 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE Z)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T))
665 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (A A A)))
666 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T :END NIL) (QUOTE (A A A)))
667 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T :END 6) (QUOTE (A A)))
668 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T :START 1 :END 3))
669 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQL X #\c))) (QUOTE ("abc" "bcd" "cde"))))
670 Pass: (STRING= (FIND-IF (FUNCTION (LAMBDA (X) (EQL X #\c))) (QUOTE ("abc" "bcd" "cde")) :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) "cde")
671 Pass: (STRING= (FIND-IF (FUNCTION (LAMBDA (X) (CHAR> #\c X))) (QUOTE ("abc" "bcd" "cde")) :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) "abc")
672 Pass: (STRING= (FIND-IF (FUNCTION (LAMBDA (X) (CHAR> #\c X))) (QUOTE ("abc" "bcd" "cde")) :START 1 :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) "bcd")
673 Pass: (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C)) (QUOTE A))
674 Pass: (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) #(A B C)) (QUOTE B))
675 Pass: (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) #(A B C)) (QUOTE C))
676 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A B C)))
677 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :START 1))
678 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) #(A B C) :START 2))
679 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) #(A B C) :START 3))
680 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :START 0 :END 0))
681 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :START 0 :END 0 :FROM-END T))
682 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :START 1 :END 1))
683 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :START 1 :END 1 :FROM-END T))
684 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :START 2 :END 2))
685 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :START 2 :END 2 :FROM-END T))
686 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :START 3 :END 3))
687 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :START 3 :END 3 :FROM-END T))
688 Pass: (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :END NIL) (QUOTE A))
689 Pass: (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) #(A B C) :END NIL) (QUOTE B))
690 Pass: (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) #(A B C) :END NIL) (QUOTE C))
691 Pass: (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :END 1) (QUOTE A))
692 Pass: (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) #(A B C) :END 2) (QUOTE B))
693 Pass: (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) #(A B C) :END 3) (QUOTE C))
694 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :END 0))
695 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) #(A B C) :END 1))
696 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) #(A B C) :END 2))
697 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #((A) (B) (C))))
698 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #((A) (B) (C)) :KEY (FUNCTION CAR)) (QUOTE (A)))
699 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) #((A) (B) (C)) :KEY (FUNCTION CAR)) (QUOTE (B)))
700 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) #((A) (B) (C)) :KEY (FUNCTION CAR)) (QUOTE (C)))
701 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE Z)))) #((A) (B) (C)) :KEY (FUNCTION CAR)))
702 Pass: (LET ((VECTOR #((A) (B) (C)))) (AND (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) VECTOR :KEY (FUNCTION CAR)) (AREF VECTOR 0)) (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) VECTOR :KEY (FUNCTION CAR)) (AREF VECTOR 1)) (EQ (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) VECTOR :KEY (FUNCTION CAR)) (AREF VECTOR 2)) (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE Z)))) VECTOR :KEY (FUNCTION CAR)))))
703 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)) (QUOTE (A)))
704 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (A A)))
705 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)) (QUOTE (B)))
706 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (B B)))
707 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)) (QUOTE (C)))
708 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (C C)))
709 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE Z)))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)))
710 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE Z)))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T))
711 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (A A A)))
712 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T :END NIL) (QUOTE (A A A)))
713 Pass: (EQUAL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T :END 6) (QUOTE (A A)))
714 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T :START 1 :END 3))
715 Pass: (NULL (FIND-IF (FUNCTION (LAMBDA (X) (EQL X #\c))) #("abc" "bcd" "cde")))
716 Pass: (STRING= (FIND-IF (FUNCTION (LAMBDA (X) (EQL X #\c))) #("abc" "bcd" "cde") :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) "cde")
717 Pass: (STRING= (FIND-IF (FUNCTION (LAMBDA (X) (CHAR> #\c X))) #("abc" "bcd" "cde") :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) "abc")
718 Pass: (STRING= (FIND-IF (FUNCTION (LAMBDA (X) (CHAR> #\c X))) #("abc" "bcd" "cde") :START 1 :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) "bcd")
719 Pass: (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C))) (QUOTE A))
720 Pass: (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) (QUOTE (A B C))) (QUOTE B))
721 Pass: (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) (QUOTE (A B C))) (QUOTE C))
722 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A B C))))
723 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :START 1))
724 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) (QUOTE (A B C)) :START 2))
725 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) (QUOTE (A B C)) :START 3))
726 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :START 0 :END 0))
727 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :START 0 :END 0 :FROM-END T))
728 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :START 1 :END 1))
729 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :START 1 :END 1 :FROM-END T))
730 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :START 2 :END 2))
731 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :START 2 :END 2 :FROM-END T))
732 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :START 3 :END 3))
733 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :START 3 :END 3 :FROM-END T))
734 Pass: (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :END NIL) (QUOTE A))
735 Pass: (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) (QUOTE (A B C)) :END NIL) (QUOTE B))
736 Pass: (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) (QUOTE (A B C)) :END NIL) (QUOTE C))
737 Pass: (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :END 1) (QUOTE A))
738 Pass: (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) (QUOTE (A B C)) :END 2) (QUOTE B))
739 Pass: (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) (QUOTE (A B C)) :END 3) (QUOTE C))
740 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :END 0))
741 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) (QUOTE (A B C)) :END 1))
742 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) (QUOTE (A B C)) :END 2))
743 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE ((A) (B) (C)))))
744 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)) (QUOTE (A)))
745 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)) (QUOTE (B)))
746 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)) (QUOTE (C)))
747 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE Z))))) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)))
748 Pass: (LET ((LIST (QUOTE ((A) (B) (C))))) (AND (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) LIST :KEY (FUNCTION CAR)) (CAR LIST)) (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) LIST :KEY (FUNCTION CAR)) (CADR LIST)) (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) LIST :KEY (FUNCTION CAR)) (CADDR LIST)) (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE Z))))) LIST :KEY (FUNCTION CAR)))))
749 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)) (QUOTE (A)))
750 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (A A)))
751 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)) (QUOTE (B)))
752 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (B B)))
753 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)) (QUOTE (C)))
754 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (C C)))
755 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE Z))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)))
756 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE Z))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T))
757 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (A A A)))
758 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T :END NIL) (QUOTE (A A A)))
759 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T :END 6) (QUOTE (A A)))
760 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T :START 1 :END 3))
761 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQL X #\c)))) (QUOTE ("abc" "bcd" "cde"))))
762 Pass: (STRING= (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQL X #\c)))) (QUOTE ("abc" "bcd" "cde")) :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) "cde")
763 Pass: (STRING= (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (CHAR> #\c X)))) (QUOTE ("abc" "bcd" "cde")) :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) "abc")
764 Pass: (STRING= (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (CHAR> #\c X)))) (QUOTE ("abc" "bcd" "cde")) :START 1 :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) "bcd")
765 Pass: (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C)) (QUOTE A))
766 Pass: (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) #(A B C)) (QUOTE B))
767 Pass: (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) #(A B C)) (QUOTE C))
768 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A B C)))
769 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :START 1))
770 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) #(A B C) :START 2))
771 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) #(A B C) :START 3))
772 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :START 0 :END 0))
773 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :START 0 :END 0 :FROM-END T))
774 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :START 1 :END 1))
775 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :START 1 :END 1 :FROM-END T))
776 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :START 2 :END 2))
777 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :START 2 :END 2 :FROM-END T))
778 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :START 3 :END 3))
779 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :START 3 :END 3 :FROM-END T))
780 Pass: (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :END NIL) (QUOTE A))
781 Pass: (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) #(A B C) :END NIL) (QUOTE B))
782 Pass: (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) #(A B C) :END NIL) (QUOTE C))
783 Pass: (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :END 1) (QUOTE A))
784 Pass: (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) #(A B C) :END 2) (QUOTE B))
785 Pass: (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) #(A B C) :END 3) (QUOTE C))
786 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :END 0))
787 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) #(A B C) :END 1))
788 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) #(A B C) :END 2))
789 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #((A) (B) (C))))
790 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #((A) (B) (C)) :KEY (FUNCTION CAR)) (QUOTE (A)))
791 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) #((A) (B) (C)) :KEY (FUNCTION CAR)) (QUOTE (B)))
792 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) #((A) (B) (C)) :KEY (FUNCTION CAR)) (QUOTE (C)))
793 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE Z))))) #((A) (B) (C)) :KEY (FUNCTION CAR)))
794 Pass: (LET ((VECTOR #((A) (B) (C)))) (AND (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) VECTOR :KEY (FUNCTION CAR)) (AREF VECTOR 0)) (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) VECTOR :KEY (FUNCTION CAR)) (AREF VECTOR 1)) (EQ (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) VECTOR :KEY (FUNCTION CAR)) (AREF VECTOR 2)) (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE Z))))) VECTOR :KEY (FUNCTION CAR)))))
795 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)) (QUOTE (A)))
796 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (A A)))
797 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)) (QUOTE (B)))
798 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (B B)))
799 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)) (QUOTE (C)))
800 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (C C)))
801 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE Z))))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)))
802 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE Z))))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T))
803 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T) (QUOTE (A A A)))
804 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T :END NIL) (QUOTE (A A A)))
805 Pass: (EQUAL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T :END 6) (QUOTE (A A)))
806 Pass: (NULL (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T :START 1 :END 3))
807 Pass: (STRING= (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQL X #\c)))) #("abc" "bcd" "cde") :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) "cde")
808 Pass: (STRING= (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (CHAR> #\c X)))) #("abc" "bcd" "cde") :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) "abc")
809 Pass: (STRING= (FIND-IF-NOT (FUNCTION (LAMBDA (X) (NOT (CHAR> #\c X)))) #("abc" "bcd" "cde") :START 1 :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) "bcd")
810 Pass: (EQL (POSITION #\a "baobab" :FROM-END T) 4)
811 Pass: (EQL (POSITION-IF (FUNCTION ODDP) (QUOTE ((1) (2) (3) (4))) :START 1 :KEY (FUNCTION CAR)) 2)
812 Pass: (NULL (POSITION 595 (QUOTE NIL)))
813 Failed: (EQL (POSITION-IF-NOT (FUNCTION INTEGERP) (QUOTE (1 2 3 4 5))) 4)
814 Pass: (EQL (POSITION (QUOTE A) (QUOTE (A B C))) 0)
815 Pass: (EQL (POSITION (QUOTE B) (QUOTE (A B C))) 1)
816 Pass: (EQL (POSITION (QUOTE C) (QUOTE (A B C))) 2)
817 Pass: (NULL (POSITION (QUOTE X) (QUOTE (A B C))))
818 Pass: (NULL (POSITION (QUOTE A) (QUOTE (A B C)) :START 1))
819 Pass: (NULL (POSITION (QUOTE B) (QUOTE (A B C)) :START 2))
820 Pass: (NULL (POSITION (QUOTE C) (QUOTE (A B C)) :START 3))
821 Pass: (NULL (POSITION (QUOTE A) (QUOTE (A B C)) :START 0 :END 0))
822 Pass: (NULL (POSITION (QUOTE A) (QUOTE (A B C)) :START 0 :END 0 :FROM-END T))
823 Pass: (NULL (POSITION (QUOTE A) (QUOTE (A B C)) :START 1 :END 1))
824 Pass: (NULL (POSITION (QUOTE A) (QUOTE (A B C)) :START 1 :END 1 :FROM-END T))
825 Pass: (NULL (POSITION (QUOTE A) (QUOTE (A B C)) :START 2 :END 2))
826 Pass: (NULL (POSITION (QUOTE A) (QUOTE (A B C)) :START 2 :END 2 :FROM-END T))
827 Pass: (NULL (POSITION (QUOTE A) (QUOTE (A B C)) :START 3 :END 3))
828 Pass: (NULL (POSITION (QUOTE A) (QUOTE (A B C)) :START 3 :END 3 :FROM-END T))
829 Pass: (EQL (POSITION (QUOTE A) (QUOTE (A B C)) :END NIL) (QUOTE 0))
830 Pass: (EQL (POSITION (QUOTE B) (QUOTE (A B C)) :END NIL) (QUOTE 1))
831 Pass: (EQL (POSITION (QUOTE C) (QUOTE (A B C)) :END NIL) (QUOTE 2))
832 Pass: (EQL (POSITION (QUOTE A) (QUOTE (A B C)) :END 1) (QUOTE 0))
833 Pass: (EQL (POSITION (QUOTE B) (QUOTE (A B C)) :END 2) (QUOTE 1))
834 Pass: (EQL (POSITION (QUOTE C) (QUOTE (A B C)) :END 3) (QUOTE 2))
835 Pass: (NULL (POSITION (QUOTE A) (QUOTE (A B C)) :END 0))
836 Pass: (NULL (POSITION (QUOTE B) (QUOTE (A B C)) :END 1))
837 Pass: (NULL (POSITION (QUOTE C) (QUOTE (A B C)) :END 2))
838 Pass: (NULL (POSITION (QUOTE A) (QUOTE ((A) (B) (C)))))
839 Pass: (EQL (POSITION (QUOTE A) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)) 0)
840 Pass: (EQL (POSITION (QUOTE B) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)) 1)
841 Pass: (EQL (POSITION (QUOTE C) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)) 2)
842 Pass: (NULL (POSITION (QUOTE Z) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)))
843 Pass: (NULL (POSITION (QUOTE (A)) (QUOTE ((A) (B) (C)))))
844 Pass: (EQL (POSITION (QUOTE (A)) (QUOTE ((A) (B) (C))) :TEST (FUNCTION EQUAL)) 0)
845 Pass: (NULL (POSITION (QUOTE ("a")) (QUOTE (("a") ("b") ("c")))))
846 Pass: (NULL (POSITION (QUOTE ("a")) (QUOTE (("A") ("B") ("c"))) :TEST (FUNCTION EQUAL)))
847 Pass: (EQL (POSITION (QUOTE ("a")) (QUOTE (("A") ("B") ("c"))) :TEST (FUNCTION EQUALP)) 0)
848 Pass: (EQL (POSITION (QUOTE NIL) (QUOTE (FIRST SECOND THIRD)) :TEST (CONSTANTLY T)) 0)
849 Pass: (EQL (POSITION 3 (QUOTE (0 1 2 3 4 5))) 3)
850 Pass: (EQL (POSITION 3 (QUOTE (0 1 2 3 4 5)) :TEST (FUNCTION <)) 4)
851 Pass: (EQL (POSITION 3 (QUOTE (0 1 2 3 4 5)) :TEST (FUNCTION >)) 0)
852 Pass: (EQL (POSITION (QUOTE (A)) (QUOTE ((A) (B) (C))) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))) 0)
853 Pass: (NULL (POSITION (QUOTE ("a")) (QUOTE (("A") ("B") ("c"))) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))
854 Pass: (EQL (POSITION (QUOTE ("a")) (QUOTE (("A") ("B") ("c"))) :TEST-NOT (COMPLEMENT (FUNCTION EQUALP))) 0)
855 Pass: (EQL (POSITION (QUOTE NIL) (QUOTE (FIRST SECOND THIRD)) :TEST-NOT (CONSTANTLY NIL)) 0)
856 Pass: (EQL (POSITION 3 (QUOTE (0 1 2 3 4 5)) :TEST-NOT (FUNCTION >=)) 4)
857 Pass: (EQL (POSITION 3 (QUOTE (0 1 2 3 4 5)) :TEST-NOT (FUNCTION <=)) 0)
858 Pass: (EQL (POSITION (QUOTE A) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)) 0)
859 Pass: (EQL (POSITION (QUOTE A) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T) 3)
860 Pass: (EQL (POSITION (QUOTE B) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)) 1)
861 Pass: (EQL (POSITION (QUOTE B) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T) 4)
862 Pass: (EQL (POSITION (QUOTE C) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)) 2)
863 Pass: (EQL (POSITION (QUOTE C) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T) 5)
864 Pass: (NULL (POSITION (QUOTE Z) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)))
865 Pass: (NULL (POSITION (QUOTE Z) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T))
866 Pass: (EQL (POSITION (QUOTE A) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T) 6)
867 Pass: (EQL (POSITION (QUOTE A) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T :END NIL) 6)
868 Pass: (EQL (POSITION (QUOTE A) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T :END 6) 3)
869 Pass: (NULL (POSITION (QUOTE A) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T :START 1 :END 3))
870 Pass: (NULL (POSITION #\c (QUOTE ("abc" "bcd" "cde"))))
871 Pass: (EQL (POSITION #\c (QUOTE ("abc" "bcd" "cde")) :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0))) :TEST (FUNCTION CHAR=)) 2)
872 Pass: (EQL (POSITION #\c (QUOTE ("abc" "bcd" "cde")) :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0))) :TEST (FUNCTION CHAR>)) 0)
873 Pass: (EQL (POSITION #\c (QUOTE ("abc" "bcd" "cde")) :START 1 :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0))) :TEST (FUNCTION CHAR>)) 1)
874 Pass: (EQL (POSITION (QUOTE A) #(A B C)) 0)
875 Pass: (EQL (POSITION (QUOTE B) #(A B C)) 1)
876 Pass: (EQL (POSITION (QUOTE C) #(A B C)) 2)
877 Pass: (NULL (POSITION (QUOTE X) #(A B C)))
878 Pass: (NULL (POSITION (QUOTE A) #(A B C) :START 1))
879 Pass: (NULL (POSITION (QUOTE B) #(A B C) :START 2))
880 Pass: (NULL (POSITION (QUOTE C) #(A B C) :START 3))
881 Pass: (NULL (POSITION (QUOTE A) #(A B C) :START 0 :END 0))
882 Pass: (NULL (POSITION (QUOTE A) #(A B C) :START 0 :END 0 :FROM-END T))
883 Pass: (NULL (POSITION (QUOTE A) #(A B C) :START 1 :END 1))
884 Pass: (NULL (POSITION (QUOTE A) #(A B C) :START 1 :END 1 :FROM-END T))
885 Pass: (NULL (POSITION (QUOTE A) #(A B C) :START 2 :END 2))
886 Pass: (NULL (POSITION (QUOTE A) #(A B C) :START 2 :END 2 :FROM-END T))
887 Pass: (NULL (POSITION (QUOTE A) #(A B C) :START 3 :END 3))
888 Pass: (NULL (POSITION (QUOTE A) #(A B C) :START 3 :END 3 :FROM-END T))
889 Pass: (EQL (POSITION (QUOTE A) #(A B C) :END NIL) 0)
890 Pass: (EQL (POSITION (QUOTE B) #(A B C) :END NIL) 1)
891 Pass: (EQL (POSITION (QUOTE C) #(A B C) :END NIL) 2)
892 Pass: (EQL (POSITION (QUOTE A) #(A B C) :END 1) 0)
893 Pass: (EQL (POSITION (QUOTE B) #(A B C) :END 2) 1)
894 Pass: (EQL (POSITION (QUOTE C) #(A B C) :END 3) 2)
895 Pass: (NULL (POSITION (QUOTE A) #(A B C) :END 0))
896 Pass: (NULL (POSITION (QUOTE B) #(A B C) :END 1))
897 Pass: (NULL (POSITION (QUOTE C) #(A B C) :END 2))
898 Pass: (NULL (POSITION (QUOTE A) #((A) (B) (C))))
899 Pass: (EQL (POSITION (QUOTE A) #((A) (B) (C)) :KEY (FUNCTION CAR)) 0)
900 Pass: (EQL (POSITION (QUOTE B) #((A) (B) (C)) :KEY (FUNCTION CAR)) 1)
901 Pass: (EQL (POSITION (QUOTE C) #((A) (B) (C)) :KEY (FUNCTION CAR)) 2)
902 Pass: (NULL (POSITION (QUOTE Z) #((A) (B) (C)) :KEY (FUNCTION CAR)))
903 Pass: (NULL (POSITION (QUOTE (A)) #((A) (B) (C))))
904 Pass: (EQL (POSITION (QUOTE (A)) #((A) (B) (C)) :TEST (FUNCTION EQUAL)) 0)
905 Pass: (NULL (POSITION (QUOTE ("a")) #(("a") ("b") ("c"))))
906 Pass: (NULL (POSITION (QUOTE ("a")) #(("A") ("B") ("c")) :TEST (FUNCTION EQUAL)))
907 Pass: (EQL (POSITION (QUOTE ("a")) #(("A") ("B") ("c")) :TEST (FUNCTION EQUALP)) 0)
908 Pass: (EQL (POSITION (QUOTE NIL) #(FIRST SECOND THIRD) :TEST (CONSTANTLY T)) 0)
909 Pass: (EQL (POSITION (QUOTE NIL) #(FIRST SECOND THIRD) :TEST (CONSTANTLY T) :FROM-END T) 2)
910 Pass: (EQL (POSITION 3 #(0 1 2 3 4 5)) 3)
911 Pass: (EQL (POSITION 3 #(0 1 2 3 4 5) :TEST (FUNCTION <)) 4)
912 Pass: (EQL (POSITION 3 #(0 1 2 3 4 5) :TEST (FUNCTION >)) 0)
913 Pass: (EQL (POSITION (QUOTE (A)) #((A) (B) (C)) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))) 0)
914 Pass: (NULL (POSITION (QUOTE ("a")) #(("A") ("B") ("c")) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))))
915 Pass: (EQL (POSITION (QUOTE ("a")) #(("A") ("B") ("c")) :TEST-NOT (COMPLEMENT (FUNCTION EQUALP))) 0)
916 Pass: (EQL (POSITION (QUOTE NIL) #(FIRST SECOND THIRD) :TEST-NOT (CONSTANTLY NIL)) 0)
917 Pass: (EQL (POSITION 3 #(0 1 2 3 4 5) :TEST-NOT (FUNCTION >=)) 4)
918 Pass: (EQL (POSITION 3 #(0 1 2 3 4 5) :TEST-NOT (FUNCTION <=)) 0)
919 Pass: (EQL (POSITION (QUOTE A) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)) 0)
920 Pass: (EQL (POSITION (QUOTE A) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T) 3)
921 Pass: (EQL (POSITION (QUOTE B) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)) 1)
922 Pass: (EQL (POSITION (QUOTE B) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T) 4)
923 Pass: (EQL (POSITION (QUOTE C) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)) 2)
924 Pass: (EQL (POSITION (QUOTE C) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T) 5)
925 Pass: (NULL (POSITION (QUOTE Z) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)))
926 Pass: (NULL (POSITION (QUOTE Z) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T))
927 Pass: (EQL (POSITION (QUOTE A) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T) 6)
928 Pass: (EQL (POSITION (QUOTE A) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T :END NIL) 6)
929 Pass: (EQL (POSITION (QUOTE A) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T :END 6) 3)
930 Pass: (NULL (POSITION (QUOTE A) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T :START 1 :END 3))
931 Pass: (NULL (POSITION #\c #("abc" "bcd" "cde")))
932 Pass: (EQL (POSITION #\c #("abc" "bcd" "cde") :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0))) :TEST (FUNCTION CHAR=)) 2)
933 Pass: (EQL (POSITION #\c #("abc" "bcd" "cde") :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0))) :TEST (FUNCTION CHAR>)) 0)
934 Pass: (EQL (POSITION #\c #("abc" "bcd" "cde") :START 1 :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0))) :TEST (FUNCTION CHAR>)) 1)
935 Pass: (NULL (POSITION #\z "abcABC"))
936 Pass: (EQL (POSITION #\a "abcABC") 0)
937 Pass: (EQL (POSITION #\A "abcABC") 3)
938 Pass: (EQL (POSITION #\A "abcABC" :TEST (FUNCTION CHAR-EQUAL)) 0)
939 Pass: (EQL (POSITION #\A "abcABC" :TEST (FUNCTION CHAR-EQUAL) :FROM-END T) 3)
940 Pass: (EQL (POSITION #\a "abcABC" :TEST (FUNCTION CHAR-EQUAL) :FROM-END T) 3)
941 Pass: (EQL (POSITION #\a "abcABC" :TEST (FUNCTION CHAR-EQUAL) :FROM-END T :END 4) 3)
942 Pass: (EQL (POSITION #\a "abcABC" :TEST (FUNCTION CHAR-EQUAL) :FROM-END T :END 3) 0)
943 Pass: (ZEROP (POSITION 0 #(0 1)))
944 Pass: (EQL (POSITION 1 #(0 1)) 1)
945 Pass: (NULL (POSITION 0 #(0 1) :START 1))
946 Pass: (NULL (POSITION 1 #(0 1) :END 0))
947 Pass: (NULL (POSITION 0 #(0 0 0 0 0 1) :START 5))
948 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C))) 0)
949 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) (QUOTE (A B C))) 1)
950 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) (QUOTE (A B C))) 2)
951 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A B C))))
952 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :START 1))
953 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) (QUOTE (A B C)) :START 2))
954 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) (QUOTE (A B C)) :START 3))
955 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :START 0 :END 0))
956 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :START 0 :END 0 :FROM-END T))
957 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :START 1 :END 1))
958 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :START 1 :END 1 :FROM-END T))
959 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :START 2 :END 2))
960 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :START 2 :END 2 :FROM-END T))
961 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :START 3 :END 3))
962 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :START 3 :END 3 :FROM-END T))
963 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :END NIL) 0)
964 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) (QUOTE (A B C)) :END NIL) 1)
965 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) (QUOTE (A B C)) :END NIL) 2)
966 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :END 1) 0)
967 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) (QUOTE (A B C)) :END 2) 1)
968 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) (QUOTE (A B C)) :END 3) 2)
969 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE (A B C)) :END 0))
970 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) (QUOTE (A B C)) :END 1))
971 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) (QUOTE (A B C)) :END 2))
972 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE ((A) (B) (C)))))
973 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)) 0)
974 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)) 1)
975 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)) 2)
976 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE Z)))) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)))
977 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)) 0)
978 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T) 3)
979 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)) 1)
980 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T) 4)
981 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)) 2)
982 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T) 5)
983 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE Z)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)))
984 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE Z)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T))
985 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T) 6)
986 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T :END NIL) 6)
987 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T :END 6) 3)
988 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T :START 1 :END 3))
989 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQL X #\c))) (QUOTE ("abc" "bcd" "cde"))))
990 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQL X #\c))) (QUOTE ("abc" "bcd" "cde")) :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) 2)
991 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (CHAR> #\c X))) (QUOTE ("abc" "bcd" "cde")) :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) 0)
992 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (CHAR> #\c X))) (QUOTE ("abc" "bcd" "cde")) :START 1 :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) 1)
993 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C)) 0)
994 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) #(A B C)) 1)
995 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) #(A B C)) 2)
996 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A B C)))
997 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :START 1))
998 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) #(A B C) :START 2))
999 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) #(A B C) :START 3))
1000 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :START 0 :END 0))
1001 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :START 0 :END 0 :FROM-END T))
1002 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :START 1 :END 1))
1003 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :START 1 :END 1 :FROM-END T))
1004 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :START 2 :END 2))
1005 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :START 2 :END 2 :FROM-END T))
1006 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :START 3 :END 3))
1007 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :START 3 :END 3 :FROM-END T))
1008 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :END NIL) 0)
1009 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) #(A B C) :END NIL) 1)
1010 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) #(A B C) :END NIL) 2)
1011 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :END 1) 0)
1012 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) #(A B C) :END 2) 1)
1013 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) #(A B C) :END 3) 2)
1014 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #(A B C) :END 0))
1015 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) #(A B C) :END 1))
1016 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) #(A B C) :END 2))
1017 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #((A) (B) (C))))
1018 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #((A) (B) (C)) :KEY (FUNCTION CAR)) 0)
1019 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) #((A) (B) (C)) :KEY (FUNCTION CAR)) 1)
1020 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) #((A) (B) (C)) :KEY (FUNCTION CAR)) 2)
1021 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE Z)))) #((A) (B) (C)) :KEY (FUNCTION CAR)))
1022 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)) 0)
1023 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T) 3)
1024 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)) 1)
1025 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE B)))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T) 4)
1026 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)) 2)
1027 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE C)))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T) 5)
1028 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE Z)))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)))
1029 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE Z)))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T))
1030 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T) 6)
1031 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T :END NIL) 6)
1032 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T :END 6) 3)
1033 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQ X (QUOTE A)))) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T :START 1 :END 3))
1034 Pass: (NULL (POSITION-IF (FUNCTION (LAMBDA (X) (EQL X #\c))) #("abc" "bcd" "cde")))
1035 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (EQL X #\c))) #("abc" "bcd" "cde") :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) 2)
1036 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (CHAR> #\c X))) #("abc" "bcd" "cde") :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) 0)
1037 Pass: (EQL (POSITION-IF (FUNCTION (LAMBDA (X) (CHAR> #\c X))) #("abc" "bcd" "cde") :START 1 :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) 1)
1038 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C))) 0)
1039 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) (QUOTE (A B C))) 1)
1040 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) (QUOTE (A B C))) 2)
1041 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A B C))))
1042 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :START 1))
1043 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) (QUOTE (A B C)) :START 2))
1044 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) (QUOTE (A B C)) :START 3))
1045 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :START 0 :END 0))
1046 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :START 0 :END 0 :FROM-END T))
1047 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :START 1 :END 1))
1048 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :START 1 :END 1 :FROM-END T))
1049 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :START 2 :END 2))
1050 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :START 2 :END 2 :FROM-END T))
1051 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :START 3 :END 3))
1052 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :START 3 :END 3 :FROM-END T))
1053 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :END NIL) 0)
1054 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) (QUOTE (A B C)) :END NIL) 1)
1055 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) (QUOTE (A B C)) :END NIL) 2)
1056 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :END 1) 0)
1057 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) (QUOTE (A B C)) :END 2) 1)
1058 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) (QUOTE (A B C)) :END 3) 2)
1059 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE (A B C)) :END 0))
1060 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) (QUOTE (A B C)) :END 1))
1061 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) (QUOTE (A B C)) :END 2))
1062 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE ((A) (B) (C)))))
1063 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)) 0)
1064 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)) 1)
1065 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)) 2)
1066 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE Z))))) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)))
1067 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)) 0)
1068 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T) 3)
1069 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)) 1)
1070 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T) 4)
1071 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)) 2)
1072 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T) 5)
1073 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE Z))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR)))
1074 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE Z))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C))) :KEY (FUNCTION CAR) :FROM-END T))
1075 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T) 6)
1076 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T :END NIL) 6)
1077 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T :END 6) 3)
1078 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) (QUOTE ((A) (B) (C) (A A) (B B) (C C) (A A A))) :KEY (FUNCTION CAR) :FROM-END T :START 1 :END 3))
1079 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQL X #\c)))) (QUOTE ("abc" "bcd" "cde"))))
1080 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQL X #\c)))) (QUOTE ("abc" "bcd" "cde")) :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) 2)
1081 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (CHAR> #\c X)))) (QUOTE ("abc" "bcd" "cde")) :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) 0)
1082 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (CHAR> #\c X)))) (QUOTE ("abc" "bcd" "cde")) :START 1 :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) 1)
1083 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C)) 0)
1084 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) #(A B C)) 1)
1085 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) #(A B C)) 2)
1086 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A B C)))
1087 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :START 1))
1088 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) #(A B C) :START 2))
1089 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) #(A B C) :START 3))
1090 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :START 0 :END 0))
1091 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :START 0 :END 0 :FROM-END T))
1092 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :START 1 :END 1))
1093 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :START 1 :END 1 :FROM-END T))
1094 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :START 2 :END 2))
1095 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :START 2 :END 2 :FROM-END T))
1096 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :START 3 :END 3))
1097 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :START 3 :END 3 :FROM-END T))
1098 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :END NIL) 0)
1099 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) #(A B C) :END NIL) 1)
1100 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) #(A B C) :END NIL) 2)
1101 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :END 1) 0)
1102 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) #(A B C) :END 2) 1)
1103 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) #(A B C) :END 3) 2)
1104 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #(A B C) :END 0))
1105 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) #(A B C) :END 1))
1106 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) #(A B C) :END 2))
1107 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #((A) (B) (C))))
1108 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #((A) (B) (C)) :KEY (FUNCTION CAR)) 0)
1109 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) #((A) (B) (C)) :KEY (FUNCTION CAR)) 1)
1110 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) #((A) (B) (C)) :KEY (FUNCTION CAR)) 2)
1111 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE Z))))) #((A) (B) (C)) :KEY (FUNCTION CAR)))
1112 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)) 0)
1113 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T) 3)
1114 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)) 1)
1115 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE B))))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T) 4)
1116 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)) 2)
1117 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE C))))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T) 5)
1118 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE Z))))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR)))
1119 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE Z))))) #((A) (B) (C) (A A) (B B) (C C)) :KEY (FUNCTION CAR) :FROM-END T))
1120 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T) 6)
1121 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T :END NIL) 6)
1122 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T :END 6) 3)
1123 Pass: (NULL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQ X (QUOTE A))))) #((A) (B) (C) (A A) (B B) (C C) (A A A)) :KEY (FUNCTION CAR) :FROM-END T :START 1 :END 3))
1124 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (EQL X #\c)))) #("abc" "bcd" "cde") :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) 2)
1125 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (CHAR> #\c X)))) #("abc" "bcd" "cde") :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) 0)
1126 Pass: (EQL (POSITION-IF-NOT (FUNCTION (LAMBDA (X) (NOT (CHAR> #\c X)))) #("abc" "bcd" "cde") :START 1 :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0)))) 1)
1127 Pass: (EQL (SEARCH "dog" "it's a dog's life") 7)
1128 Pass: (EQL (SEARCH (QUOTE (0 1)) (QUOTE (2 4 6 1 3 5)) :KEY (FUNCTION ODDP)) 2)
1129 Pass: (EQL (SEARCH (QUOTE NIL) (QUOTE NIL)) 0)
1130 Pass: (NULL (SEARCH (QUOTE (A B C)) (QUOTE (X Y Z))))
1131 Pass: (EQL (SEARCH (QUOTE NIL) (QUOTE (X Y Z))) 0)
1132 Pass: (EQL (SEARCH (QUOTE (A)) (QUOTE (A))) 0)
1133 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C X Y Z))) 0)
1134 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (X A B C Y Z))) 1)
1135 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (X Y A B C Z))) 2)
1136 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (X Y Z A B C))) 3)
1137 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START2 1) 3)
1138 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START2 1 :END2 NIL) 3)
1139 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 1 :START2 1 :END2 NIL) 1)
1140 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 1 :END1 NIL :START2 1 :END2 NIL) 1)
1141 Pass: (NULL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START2 0 :END2 0))
1142 Pass: (NULL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START2 1 :END2 1))
1143 Pass: (NULL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START2 2 :END2 2))
1144 Pass: (NULL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START2 3 :END2 3))
1145 Pass: (NULL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START2 4 :END2 4))
1146 Pass: (NULL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START2 5 :END2 5))
1147 Pass: (NULL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START2 6 :END2 6))
1148 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C))) 0)
1149 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :FROM-END T) 3)
1150 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START2 3 :END2 6) 3)
1151 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START2 3 :END2 6 :FROM-END T) 3)
1152 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 0 :END1 2 :START2 0 :END2 6) 0)
1153 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 0 :END1 2 :START2 0 :END2 6 :FROM-END T) 3)
1154 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 0 :END1 0 :START2 0 :END2 0) 0)
1155 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 1 :END1 1 :START2 0 :END2 0) 0)
1156 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 2 :END1 2 :START2 0 :END2 0) 0)
1157 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 3 :END1 3 :START2 0 :END2 0) 0)
1158 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 0 :END1 0 :START2 1 :END2 1) 1)
1159 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 1 :END1 1 :START2 1 :END2 1) 1)
1160 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 2 :END1 2 :START2 1 :END2 1) 1)
1161 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 3 :END1 3 :START2 1 :END2 1) 1)
1162 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 0 :END1 0 :START2 6 :END2 6) 6)
1163 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 1 :END1 1 :START2 6 :END2 6) 6)
1164 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 2 :END1 2 :START2 6 :END2 6) 6)
1165 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 3 :END1 3 :START2 6 :END2 6) 6)
1166 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 0 :END1 0 :START2 0 :END2 0 :FROM-END T) 0)
1167 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 1 :END1 1 :START2 0 :END2 0 :FROM-END T) 0)
1168 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 2 :END1 2 :START2 0 :END2 0 :FROM-END T) 0)
1169 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 3 :END1 3 :START2 0 :END2 0 :FROM-END T) 0)
1170 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 0 :END1 0 :START2 1 :END2 1 :FROM-END T) 1)
1171 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 1 :END1 1 :START2 1 :END2 1 :FROM-END T) 1)
1172 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 2 :END1 2 :START2 1 :END2 1 :FROM-END T) 1)
1173 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 3 :END1 3 :START2 1 :END2 1 :FROM-END T) 1)
1174 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 0 :END1 0 :START2 6 :END2 6 :FROM-END T) 6)
1175 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 1 :END1 1 :START2 6 :END2 6 :FROM-END T) 6)
1176 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 2 :END1 2 :START2 6 :END2 6 :FROM-END T) 6)
1177 Pass: (EQL (SEARCH (QUOTE (A B C)) (QUOTE (A B C A B C)) :START1 3 :END1 3 :START2 6 :END2 6 :FROM-END T) 6)
1178 Pass: (NULL (SEARCH (QUOTE (#\a #\b #\c)) (QUOTE (#\A #\B #\C))))
1179 Pass: (EQL (SEARCH (QUOTE (#\a #\b #\c)) (QUOTE (#\A #\B #\C)) :TEST (FUNCTION CHAR-EQUAL)) 0)
1180 Pass: (EQL (SEARCH (QUOTE (#\a #\b #\c)) (QUOTE (#\A #\B #\C)) :TEST-NOT (COMPLEMENT (FUNCTION CHAR-EQUAL))) 0)
1181 Pass: (EQL (SEARCH (QUOTE (#\a #\b)) (QUOTE (#\a #\b #\x #\y #\z))) 0)
1182 Pass: (EQL (SEARCH (QUOTE (#\a #\b)) (QUOTE (#\a #\b #\x #\y #\z)) :TEST (FUNCTION CHAR<)) 1)
1183 Pass: (EQL (SEARCH (QUOTE (#\a #\b)) (QUOTE (#\a #\b #\x #\y #\z)) :TEST-NOT (COMPLEMENT (FUNCTION CHAR<))) 1)
1184 Pass: (EQL (SEARCH (QUOTE (#\a #\b)) (QUOTE (#\a #\b #\x #\y #\z)) :TEST-NOT (COMPLEMENT (FUNCTION CHAR<)) :FROM-END T) 3)
1185 Pass: (NULL (SEARCH (QUOTE ((A) (B))) (QUOTE ((X) (Y) (Z) (A) (B) (C)))))
1186 Pass: (EQL (SEARCH (QUOTE ((A) (B))) (QUOTE ((X) (Y) (Z) (A) (B) (C))) :KEY (FUNCTION CAR)) 3)
1187 Pass: (EQL (SEARCH (QUOTE ((A) (B))) (QUOTE ((A) (B) (C) (X) (Y) (Z) (A) (B) (C))) :KEY (FUNCTION CAR)) 0)
1188 Pass: (EQL (SEARCH (QUOTE ((A) (B))) (QUOTE ((A) (B) (C) (X) (Y) (Z) (A) (B) (C))) :KEY (FUNCTION CAR) :FROM-END T) 6)
1189 Pass: (EQL (SEARCH (QUOTE ((A A) (B B))) (QUOTE ((A) (B) (C) (X) (Y) (Z) (A) (B) (C))) :KEY (FUNCTION CAR)) 0)
1190 Pass: (EQL (SEARCH (QUOTE ((A A) (B B))) (QUOTE ((A NIL) (B T) (C NIL) (X) (Y) (Z) (A 0) (B 1) (C 2))) :KEY (FUNCTION CAR) :FROM-END T) 6)
1191 Pass: (EQL (SEARCH (QUOTE (("a" A) ("b" B))) (QUOTE (("a" NIL) ("b" T) ("c" NIL) ("x") ("y") ("z") ("A" 0) ("B" 1) ("C" 2))) :START1 1 :END1 2 :START2 3 :END2 NIL :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :FROM-END T) 7)
1192 Pass: (EQL (SEARCH #() (QUOTE NIL)) 0)
1193 Pass: (NULL (SEARCH #(A B C) (QUOTE (X Y Z))))
1194 Pass: (EQL (SEARCH #() (QUOTE (X Y Z))) 0)
1195 Pass: (EQL (SEARCH #(A) (QUOTE (A))) 0)
1196 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C X Y Z))) 0)
1197 Pass: (EQL (SEARCH #(A B C) (QUOTE (X A B C Y Z))) 1)
1198 Pass: (EQL (SEARCH #(A B C) (QUOTE (X Y A B C Z))) 2)
1199 Pass: (EQL (SEARCH #(A B C) (QUOTE (X Y Z A B C))) 3)
1200 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START2 1) 3)
1201 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START2 1 :END2 NIL) 3)
1202 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 1 :START2 1 :END2 NIL) 1)
1203 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 1 :END1 NIL :START2 1 :END2 NIL) 1)
1204 Pass: (NULL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START2 0 :END2 0))
1205 Pass: (NULL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START2 1 :END2 1))
1206 Pass: (NULL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START2 2 :END2 2))
1207 Pass: (NULL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START2 3 :END2 3))
1208 Pass: (NULL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START2 4 :END2 4))
1209 Pass: (NULL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START2 5 :END2 5))
1210 Pass: (NULL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START2 6 :END2 6))
1211 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C))) 0)
1212 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :FROM-END T) 3)
1213 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START2 3 :END2 6) 3)
1214 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START2 3 :END2 6 :FROM-END T) 3)
1215 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 0 :END1 2 :START2 0 :END2 6) 0)
1216 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 0 :END1 2 :START2 0 :END2 6 :FROM-END T) 3)
1217 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 0 :END1 0 :START2 0 :END2 0) 0)
1218 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 1 :END1 1 :START2 0 :END2 0) 0)
1219 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 2 :END1 2 :START2 0 :END2 0) 0)
1220 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 3 :END1 3 :START2 0 :END2 0) 0)
1221 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 0 :END1 0 :START2 1 :END2 1) 1)
1222 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 1 :END1 1 :START2 1 :END2 1) 1)
1223 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 2 :END1 2 :START2 1 :END2 1) 1)
1224 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 3 :END1 3 :START2 1 :END2 1) 1)
1225 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 0 :END1 0 :START2 6 :END2 6) 6)
1226 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 1 :END1 1 :START2 6 :END2 6) 6)
1227 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 2 :END1 2 :START2 6 :END2 6) 6)
1228 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 3 :END1 3 :START2 6 :END2 6) 6)
1229 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 0 :END1 0 :START2 0 :END2 0 :FROM-END T) 0)
1230 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 1 :END1 1 :START2 0 :END2 0 :FROM-END T) 0)
1231 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 2 :END1 2 :START2 0 :END2 0 :FROM-END T) 0)
1232 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 3 :END1 3 :START2 0 :END2 0 :FROM-END T) 0)
1233 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 0 :END1 0 :START2 1 :END2 1 :FROM-END T) 1)
1234 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 1 :END1 1 :START2 1 :END2 1 :FROM-END T) 1)
1235 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 2 :END1 2 :START2 1 :END2 1 :FROM-END T) 1)
1236 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 3 :END1 3 :START2 1 :END2 1 :FROM-END T) 1)
1237 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 0 :END1 0 :START2 6 :END2 6 :FROM-END T) 6)
1238 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 1 :END1 1 :START2 6 :END2 6 :FROM-END T) 6)
1239 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 2 :END1 2 :START2 6 :END2 6 :FROM-END T) 6)
1240 Pass: (EQL (SEARCH #(A B C) (QUOTE (A B C A B C)) :START1 3 :END1 3 :START2 6 :END2 6 :FROM-END T) 6)
1241 Pass: (NULL (SEARCH #(#\a #\b #\c) (QUOTE (#\A #\B #\C))))
1242 Pass: (EQL (SEARCH #(#\a #\b #\c) (QUOTE (#\A #\B #\C)) :TEST (FUNCTION CHAR-EQUAL)) 0)
1243 Pass: (EQL (SEARCH #(#\a #\b #\c) (QUOTE (#\A #\B #\C)) :TEST-NOT (COMPLEMENT (FUNCTION CHAR-EQUAL))) 0)
1244 Pass: (EQL (SEARCH #(#\a #\b) (QUOTE (#\a #\b #\x #\y #\z))) 0)
1245 Pass: (EQL (SEARCH #(#\a #\b) (QUOTE (#\a #\b #\x #\y #\z)) :TEST (FUNCTION CHAR<)) 1)
1246 Pass: (EQL (SEARCH #(#\a #\b) (QUOTE (#\a #\b #\x #\y #\z)) :TEST-NOT (COMPLEMENT (FUNCTION CHAR<))) 1)
1247 Pass: (EQL (SEARCH #(#\a #\b) (QUOTE (#\a #\b #\x #\y #\z)) :TEST-NOT (COMPLEMENT (FUNCTION CHAR<)) :FROM-END T) 3)
1248 Pass: (NULL (SEARCH #((A) (B)) (QUOTE ((X) (Y) (Z) (A) (B) (C)))))
1249 Pass: (EQL (SEARCH #((A) (B)) (QUOTE ((X) (Y) (Z) (A) (B) (C))) :KEY (FUNCTION CAR)) 3)
1250 Pass: (EQL (SEARCH #((A) (B)) (QUOTE ((A) (B) (C) (X) (Y) (Z) (A) (B) (C))) :KEY (FUNCTION CAR)) 0)
1251 Pass: (EQL (SEARCH #((A) (B)) (QUOTE ((A) (B) (C) (X) (Y) (Z) (A) (B) (C))) :KEY (FUNCTION CAR) :FROM-END T) 6)
1252 Pass: (EQL (SEARCH #((A A) (B B)) (QUOTE ((A) (B) (C) (X) (Y) (Z) (A) (B) (C))) :KEY (FUNCTION CAR)) 0)
1253 Pass: (EQL (SEARCH #((A A) (B B)) (QUOTE ((A NIL) (B T) (C NIL) (X) (Y) (Z) (A 0) (B 1) (C 2))) :KEY (FUNCTION CAR) :FROM-END T) 6)
1254 Pass: (EQL (SEARCH #(("a" A) ("b" B)) (QUOTE (("a" NIL) ("b" T) ("c" NIL) ("x") ("y") ("z") ("A" 0) ("B" 1) ("C" 2))) :START1 1 :END1 2 :START2 3 :END2 NIL :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :FROM-END T) 7)
1255 Pass: (EQL (SEARCH (QUOTE NIL) #()) 0)
1256 Pass: (NULL (SEARCH (QUOTE (A B C)) #(X Y Z)))
1257 Pass: (EQL (SEARCH (QUOTE NIL) #(X Y Z)) 0)
1258 Pass: (EQL (SEARCH (QUOTE (A)) #(A)) 0)
1259 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C X Y Z)) 0)
1260 Pass: (EQL (SEARCH (QUOTE (A B C)) #(X A B C Y Z)) 1)
1261 Pass: (EQL (SEARCH (QUOTE (A B C)) #(X Y A B C Z)) 2)
1262 Pass: (EQL (SEARCH (QUOTE (A B C)) #(X Y Z A B C)) 3)
1263 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START2 1) 3)
1264 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START2 1 :END2 NIL) 3)
1265 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 1 :START2 1 :END2 NIL) 1)
1266 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 1 :END1 NIL :START2 1 :END2 NIL) 1)
1267 Pass: (NULL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START2 0 :END2 0))
1268 Pass: (NULL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START2 1 :END2 1))
1269 Pass: (NULL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START2 2 :END2 2))
1270 Pass: (NULL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START2 3 :END2 3))
1271 Pass: (NULL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START2 4 :END2 4))
1272 Pass: (NULL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START2 5 :END2 5))
1273 Pass: (NULL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START2 6 :END2 6))
1274 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C)) 0)
1275 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :FROM-END T) 3)
1276 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START2 3 :END2 6) 3)
1277 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START2 3 :END2 6 :FROM-END T) 3)
1278 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 0 :END1 2 :START2 0 :END2 6) 0)
1279 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 0 :END1 2 :START2 0 :END2 6 :FROM-END T) 3)
1280 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 0 :END1 0 :START2 0 :END2 0) 0)
1281 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 1 :END1 1 :START2 0 :END2 0) 0)
1282 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 2 :END1 2 :START2 0 :END2 0) 0)
1283 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 3 :END1 3 :START2 0 :END2 0) 0)
1284 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 0 :END1 0 :START2 1 :END2 1) 1)
1285 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 1 :END1 1 :START2 1 :END2 1) 1)
1286 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 2 :END1 2 :START2 1 :END2 1) 1)
1287 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 3 :END1 3 :START2 1 :END2 1) 1)
1288 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 0 :END1 0 :START2 6 :END2 6) 6)
1289 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 1 :END1 1 :START2 6 :END2 6) 6)
1290 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 2 :END1 2 :START2 6 :END2 6) 6)
1291 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 3 :END1 3 :START2 6 :END2 6) 6)
1292 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 0 :END1 0 :START2 0 :END2 0 :FROM-END T) 0)
1293 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 1 :END1 1 :START2 0 :END2 0 :FROM-END T) 0)
1294 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 2 :END1 2 :START2 0 :END2 0 :FROM-END T) 0)
1295 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 3 :END1 3 :START2 0 :END2 0 :FROM-END T) 0)
1296 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 0 :END1 0 :START2 1 :END2 1 :FROM-END T) 1)
1297 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 1 :END1 1 :START2 1 :END2 1 :FROM-END T) 1)
1298 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 2 :END1 2 :START2 1 :END2 1 :FROM-END T) 1)
1299 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 3 :END1 3 :START2 1 :END2 1 :FROM-END T) 1)
1300 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 0 :END1 0 :START2 6 :END2 6 :FROM-END T) 6)
1301 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 1 :END1 1 :START2 6 :END2 6 :FROM-END T) 6)
1302 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 2 :END1 2 :START2 6 :END2 6 :FROM-END T) 6)
1303 Pass: (EQL (SEARCH (QUOTE (A B C)) #(A B C A B C) :START1 3 :END1 3 :START2 6 :END2 6 :FROM-END T) 6)
1304 Pass: (NULL (SEARCH (QUOTE (#\a #\b #\c)) #(#\A #\B #\C)))
1305 Pass: (EQL (SEARCH (QUOTE (#\a #\b #\c)) #(#\A #\B #\C) :TEST (FUNCTION CHAR-EQUAL)) 0)
1306 Pass: (EQL (SEARCH (QUOTE (#\a #\b #\c)) #(#\A #\B #\C) :TEST-NOT (COMPLEMENT (FUNCTION CHAR-EQUAL))) 0)
1307 Pass: (EQL (SEARCH (QUOTE (#\a #\b)) #(#\a #\b #\x #\y #\z)) 0)
1308 Pass: (EQL (SEARCH (QUOTE (#\a #\b)) #(#\a #\b #\x #\y #\z) :TEST (FUNCTION CHAR<)) 1)
1309 Pass: (EQL (SEARCH (QUOTE (#\a #\b)) #(#\a #\b #\x #\y #\z) :TEST-NOT (COMPLEMENT (FUNCTION CHAR<))) 1)
1310 Pass: (EQL (SEARCH (QUOTE (#\a #\b)) #(#\a #\b #\x #\y #\z) :TEST-NOT (COMPLEMENT (FUNCTION CHAR<)) :FROM-END T) 3)
1311 Pass: (NULL (SEARCH (QUOTE ((A) (B))) #((X) (Y) (Z) (A) (B) (C))))
1312 Pass: (EQL (SEARCH (QUOTE ((A) (B))) #((X) (Y) (Z) (A) (B) (C)) :KEY (FUNCTION CAR)) 3)
1313 Pass: (EQL (SEARCH (QUOTE ((A) (B))) #((A) (B) (C) (X) (Y) (Z) (A) (B) (C)) :KEY (FUNCTION CAR)) 0)
1314 Pass: (EQL (SEARCH (QUOTE ((A) (B))) #((A) (B) (C) (X) (Y) (Z) (A) (B) (C)) :KEY (FUNCTION CAR) :FROM-END T) 6)
1315 Pass: (EQL (SEARCH (QUOTE ((A A) (B B))) #((A) (B) (C) (X) (Y) (Z) (A) (B) (C)) :KEY (FUNCTION CAR)) 0)
1316 Pass: (EQL (SEARCH (QUOTE ((A A) (B B))) #((A NIL) (B T) (C NIL) (X) (Y) (Z) (A 0) (B 1) (C 2)) :KEY (FUNCTION CAR) :FROM-END T) 6)
1317 Pass: (EQL (SEARCH (QUOTE (("a" A) ("b" B))) #(("a" NIL) ("b" T) ("c" NIL) ("x") ("y") ("z") ("A" 0) ("B" 1) ("C" 2)) :START1 1 :END1 2 :START2 3 :END2 NIL :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :FROM-END T) 7)
1318 Pass: (EQL (SEARCH #() #()) 0)
1319 Pass: (NULL (SEARCH #(A B C) #(X Y Z)))
1320 Pass: (EQL (SEARCH #() #(X Y Z)) 0)
1321 Pass: (EQL (SEARCH #(A) #(A)) 0)
1322 Pass: (EQL (SEARCH #(A B C) #(A B C X Y Z)) 0)
1323 Pass: (EQL (SEARCH #(A B C) #(X A B C Y Z)) 1)
1324 Pass: (EQL (SEARCH #(A B C) #(X Y A B C Z)) 2)
1325 Pass: (EQL (SEARCH #(A B C) #(X Y Z A B C)) 3)
1326 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START2 1) 3)
1327 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START2 1 :END2 NIL) 3)
1328 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 1 :START2 1 :END2 NIL) 1)
1329 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 1 :END1 NIL :START2 1 :END2 NIL) 1)
1330 Pass: (NULL (SEARCH #(A B C) #(A B C A B C) :START2 0 :END2 0))
1331 Pass: (NULL (SEARCH #(A B C) #(A B C A B C) :START2 1 :END2 1))
1332 Pass: (NULL (SEARCH #(A B C) #(A B C A B C) :START2 2 :END2 2))
1333 Pass: (NULL (SEARCH #(A B C) #(A B C A B C) :START2 3 :END2 3))
1334 Pass: (NULL (SEARCH #(A B C) #(A B C A B C) :START2 4 :END2 4))
1335 Pass: (NULL (SEARCH #(A B C) #(A B C A B C) :START2 5 :END2 5))
1336 Pass: (NULL (SEARCH #(A B C) #(A B C A B C) :START2 6 :END2 6))
1337 Pass: (EQL (SEARCH #(A B C) #(A B C A B C)) 0)
1338 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :FROM-END T) 3)
1339 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START2 3 :END2 6) 3)
1340 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START2 3 :END2 6 :FROM-END T) 3)
1341 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 0 :END1 2 :START2 0 :END2 6) 0)
1342 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 0 :END1 2 :START2 0 :END2 6 :FROM-END T) 3)
1343 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 0 :END1 0 :START2 0 :END2 0) 0)
1344 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 1 :END1 1 :START2 0 :END2 0) 0)
1345 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 2 :END1 2 :START2 0 :END2 0) 0)
1346 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 3 :END1 3 :START2 0 :END2 0) 0)
1347 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 0 :END1 0 :START2 1 :END2 1) 1)
1348 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 1 :END1 1 :START2 1 :END2 1) 1)
1349 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 2 :END1 2 :START2 1 :END2 1) 1)
1350 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 3 :END1 3 :START2 1 :END2 1) 1)
1351 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 0 :END1 0 :START2 6 :END2 6) 6)
1352 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 1 :END1 1 :START2 6 :END2 6) 6)
1353 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 2 :END1 2 :START2 6 :END2 6) 6)
1354 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 3 :END1 3 :START2 6 :END2 6) 6)
1355 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 0 :END1 0 :START2 0 :END2 0 :FROM-END T) 0)
1356 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 1 :END1 1 :START2 0 :END2 0 :FROM-END T) 0)
1357 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 2 :END1 2 :START2 0 :END2 0 :FROM-END T) 0)
1358 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 3 :END1 3 :START2 0 :END2 0 :FROM-END T) 0)
1359 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 0 :END1 0 :START2 1 :END2 1 :FROM-END T) 1)
1360 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 1 :END1 1 :START2 1 :END2 1 :FROM-END T) 1)
1361 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 2 :END1 2 :START2 1 :END2 1 :FROM-END T) 1)
1362 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 3 :END1 3 :START2 1 :END2 1 :FROM-END T) 1)
1363 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 0 :END1 0 :START2 6 :END2 6 :FROM-END T) 6)
1364 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 1 :END1 1 :START2 6 :END2 6 :FROM-END T) 6)
1365 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 2 :END1 2 :START2 6 :END2 6 :FROM-END T) 6)
1366 Pass: (EQL (SEARCH #(A B C) #(A B C A B C) :START1 3 :END1 3 :START2 6 :END2 6 :FROM-END T) 6)
1367 Pass: (NULL (SEARCH #(#\a #\b #\c) #(#\A #\B #\C)))
1368 Pass: (EQL (SEARCH #(#\a #\b #\c) #(#\A #\B #\C) :TEST (FUNCTION CHAR-EQUAL)) 0)
1369 Pass: (EQL (SEARCH #(#\a #\b #\c) #(#\A #\B #\C) :TEST-NOT (COMPLEMENT (FUNCTION CHAR-EQUAL))) 0)
1370 Pass: (EQL (SEARCH #(#\a #\b) #(#\a #\b #\x #\y #\z)) 0)
1371 Pass: (EQL (SEARCH #(#\a #\b) #(#\a #\b #\x #\y #\z) :TEST (FUNCTION CHAR<)) 1)
1372 Pass: (EQL (SEARCH #(#\a #\b) #(#\a #\b #\x #\y #\z) :TEST-NOT (COMPLEMENT (FUNCTION CHAR<))) 1)
1373 Pass: (EQL (SEARCH #(#\a #\b) #(#\a #\b #\x #\y #\z) :TEST-NOT (COMPLEMENT (FUNCTION CHAR<)) :FROM-END T) 3)
1374 Pass: (NULL (SEARCH #((A) (B)) #((X) (Y) (Z) (A) (B) (C))))
1375 Pass: (EQL (SEARCH #((A) (B)) #((X) (Y) (Z) (A) (B) (C)) :KEY (FUNCTION CAR)) 3)
1376 Pass: (EQL (SEARCH #((A) (B)) #((A) (B) (C) (X) (Y) (Z) (A) (B) (C)) :KEY (FUNCTION CAR)) 0)
1377 Pass: (EQL (SEARCH #((A) (B)) #((A) (B) (C) (X) (Y) (Z) (A) (B) (C)) :KEY (FUNCTION CAR) :FROM-END T) 6)
1378 Pass: (EQL (SEARCH #((A A) (B B)) #((A) (B) (C) (X) (Y) (Z) (A) (B) (C)) :KEY (FUNCTION CAR)) 0)
1379 Pass: (EQL (SEARCH #((A A) (B B)) #((A NIL) (B T) (C NIL) (X) (Y) (Z) (A 0) (B 1) (C 2)) :KEY (FUNCTION CAR) :FROM-END T) 6)
1380 Pass: (EQL (SEARCH #(("a" A) ("b" B)) #(("a" NIL) ("b" T) ("c" NIL) ("x") ("y") ("z") ("A" 0) ("B" 1) ("C" 2)) :START1 1 :END1 2 :START2 3 :END2 NIL :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :FROM-END T) 7)
1381 Pass: (NULL (SEARCH "peace" "LOVE&PEACE"))
1382 Pass: (EQL (SEARCH "peace" "LOVE&PEACE" :TEST (FUNCTION CHAR-EQUAL)) 5)
1383 Pass: (EQL (SEARCH (CONCATENATE (QUOTE SIMPLE-VECTOR) "peace") (CONCATENATE (QUOTE LIST) "LOVE&PEACE") :TEST (FUNCTION CHAR-EQUAL)) 5)
1384 Pass: (EQL (SEARCH (CONCATENATE (QUOTE LIST) "peace") (CONCATENATE (QUOTE VECTOR) "LOVE&PEACE") :TEST (FUNCTION CHAR-EQUAL)) 5)
1385 Pass: (EQL (SEARCH (CONCATENATE (QUOTE VECTOR) "peace") (CONCATENATE (QUOTE VECTOR) "LOVE&PEACE") :TEST (FUNCTION CHAR-EQUAL)) 5)
1386 Pass: (EQL (SEARCH #(1 0) #(0 1 0 1 0 1)) 1)
1387 Pass: (EQL (SEARCH #(1 0) #(0 1 0 1 0 1) :FROM-END T) 3)
1388 Pass: (NULL (SEARCH "PeAcE" "LoVe&pEaCe"))
1389 Pass: (EQL (SEARCH "PeAcE" "LoVe&pEaCe" :KEY (FUNCTION CHAR-UPCASE)) 5)
1390 Pass: (EQL (SEARCH "abc" "abc xyz abc" :FROM-END T) 8)
1391 Pass: (EQL (SEARCH "abc" "abc xyz abc xyz abc xyz abc" :START2 8 :END2 19) 8)
1392 Pass: (EQL (SEARCH "abc" "abc xyz abc xyz abc xyz abc" :FROM-END T :START2 8 :END2 19) 16)
1393 Pass: (EQL (MISMATCH "abcd" "ABCDE" :TEST (FUNCTION CHAR-EQUAL)) 4)
1394 Pass: (EQL (MISMATCH (QUOTE (3 2 1 1 2 3)) (QUOTE (1 2 3)) :FROM-END T) 3)
1395 Pass: (NULL (MISMATCH (QUOTE (1 2 3)) (QUOTE (2 3 4)) :TEST-NOT (FUNCTION EQ) :KEY (FUNCTION ODDP)))
1396 Pass: (NULL (MISMATCH (QUOTE (1 2 3 4 5 6)) (QUOTE (3 4 5 6 7)) :START1 2 :END2 4))
1397 Pass: (NULL (MISMATCH (QUOTE NIL) (QUOTE NIL)))
1398 Pass: (EQL (MISMATCH (QUOTE (A B C)) (QUOTE (X Y Z))) 0)
1399 Pass: (EQL (MISMATCH (QUOTE NIL) (QUOTE (X Y Z))) 0)
1400 Pass: (EQL (MISMATCH (QUOTE (X Y Z)) (QUOTE NIL)) 0)
1401 Pass: (NULL (MISMATCH (QUOTE (A)) (QUOTE (A))))
1402 Pass: (EQL (MISMATCH (QUOTE (A B C X Y Z)) (QUOTE (A B C))) 3)
1403 Pass: (NULL (MISMATCH (QUOTE (A B C)) (QUOTE (A B C))))
1404 Pass: (EQL (MISMATCH (QUOTE (A B C D E F)) (QUOTE (A B C))) 3)
1405 Pass: (EQL (MISMATCH (QUOTE (A B C)) (QUOTE (A B C D E F))) 3)
1406 Pass: (EQL (MISMATCH (QUOTE (A B C)) (QUOTE (A B X))) 2)
1407 Pass: (EQL (MISMATCH (QUOTE (A B C)) (QUOTE (A X C))) 1)
1408 Pass: (EQL (MISMATCH (QUOTE (A B C)) (QUOTE (X B C))) 0)
1409 Pass: (EQL (MISMATCH (QUOTE (X Y Z A B C X Y Z)) (QUOTE (A B C)) :START1 3) 6)
1410 Pass: (EQL (MISMATCH (QUOTE (X Y Z A B C X Y Z)) (QUOTE (A B C)) :START1 3 :END1 NIL) 6)
1411 Pass: (EQL (MISMATCH (QUOTE (X Y Z A B C X Y Z)) (QUOTE (A B C)) :START1 3 :END1 4) 4)
1412 Pass: (EQL (MISMATCH (QUOTE (X Y Z A B C X Y Z)) (QUOTE (A B C)) :START1 3 :END1 3) 3)
1413 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) (QUOTE NIL) :START1 0 :END1 0))
1414 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) (QUOTE NIL) :START1 1 :END1 1))
1415 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) (QUOTE NIL) :START1 2 :END1 2))
1416 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) (QUOTE NIL) :START1 3 :END1 3))
1417 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) (QUOTE NIL) :START1 0 :END1 0 :START2 0 :END2 0))
1418 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) (QUOTE NIL) :START1 1 :END1 1 :START2 1 :END2 1))
1419 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) (QUOTE NIL) :START1 2 :END1 2 :START2 2 :END2 2))
1420 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) (QUOTE NIL) :START1 3 :END1 3 :START2 3 :END2 3))
1421 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) (QUOTE NIL) :START1 0 :END1 0 :START2 3 :END2 3))
1422 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) (QUOTE NIL) :START1 1 :END1 1 :START2 2 :END2 2))
1423 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) (QUOTE NIL) :START1 2 :END1 2 :START2 1 :END2 1))
1424 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) (QUOTE NIL) :START1 3 :END1 3 :START2 0 :END2 0))
1425 Pass: (EQL (MISMATCH (QUOTE (X Y Z)) (QUOTE (A B C)) :START1 0 :END1 0) 0)
1426 Pass: (EQL (MISMATCH (QUOTE (X Y Z)) (QUOTE (A B C)) :START1 1 :END1 1) 1)
1427 Pass: (EQL (MISMATCH (QUOTE (X Y Z)) (QUOTE (A B C)) :START1 2 :END1 2) 2)
1428 Pass: (EQL (MISMATCH (QUOTE (X Y Z)) (QUOTE (A B C)) :START1 3 :END1 3) 3)
1429 Pass: (EQL (MISMATCH (QUOTE (X Y Z)) (QUOTE (X Y Z)) :START1 0 :END1 1) 1)
1430 Pass: (EQL (MISMATCH (QUOTE (X Y Z)) (QUOTE (X Y Z)) :START1 0 :END1 2) 2)
1431 Pass: (EQL (MISMATCH (QUOTE (X Y Z)) (QUOTE (X Y Z Z)) :START1 0 :END1 3) 3)
1432 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) (QUOTE (X Y Z)) :START1 0 :END1 3))
1433 Pass: (EQL (MISMATCH (QUOTE (A B C X Y Z)) (QUOTE (X Y Z A B C))) 0)
1434 Pass: (EQL (MISMATCH (QUOTE (A B C X Y Z)) (QUOTE (X Y Z A B C)) :START1 3) 6)
1435 Pass: (EQL (MISMATCH (QUOTE (A B C X Y Z A B C)) (QUOTE (X Y Z A B C X Y Z)) :START1 3) 9)
1436 Pass: (EQL (MISMATCH (QUOTE (A B C X Y Z A B C)) (QUOTE (X Y Z A B C X Y Z)) :START1 6) 6)
1437 Pass: (EQL (MISMATCH (QUOTE (A B C X Y Z A B C)) (QUOTE (X Y Z A B C X Y Z)) :START1 6 :START2 3) 9)
1438 Pass: (EQL (MISMATCH (QUOTE (A B C X Y Z A B C)) (QUOTE (X Y Z A B C X Y Z)) :START1 0 :START2 3) 6)
1439 Pass: (EQL (MISMATCH (QUOTE (A B C)) (QUOTE (A B C X Y Z))) 3)
1440 Pass: (EQL (MISMATCH (QUOTE (A B C)) (QUOTE (X A B C Y Z))) 0)
1441 Pass: (EQL (MISMATCH (QUOTE (A B C)) (QUOTE (X A B C Y Z)) :START2 1) 3)
1442 Pass: (EQL (MISMATCH (QUOTE (A B C)) (QUOTE (X A B C Y Z)) :START2 1 :END2 NIL) 3)
1443 Pass: (NULL (MISMATCH (QUOTE (A B C)) (QUOTE (X A B C Y Z)) :START2 1 :END2 4))
1444 Pass: (EQL (MISMATCH (QUOTE (A B C D E)) (QUOTE (C D))) 0)
1445 Pass: (EQL (MISMATCH (QUOTE (A B C D E)) (QUOTE (C D)) :START1 2) 4)
1446 Pass: (EQL (MISMATCH (QUOTE (A B C D E)) (QUOTE (C D)) :START1 2 :END1 3) 3)
1447 Pass: (EQL (MISMATCH (QUOTE (A B C D E)) (QUOTE (C D)) :START1 2 :START2 1) 2)
1448 Pass: (EQL (MISMATCH (QUOTE (A B C D E)) (QUOTE (C D)) :START1 3 :START2 1) 4)
1449 Pass: (EQL (MISMATCH (QUOTE (A B C D E)) (QUOTE (C D)) :START1 2 :END2 1) 3)
1450 Pass: (NULL (MISMATCH (QUOTE (A B C D)) (QUOTE (A B C D)) :START1 1 :END1 2 :START2 1 :END2 2))
1451 Pass: (NULL (MISMATCH (QUOTE (A B C D)) (QUOTE (A B C D)) :START1 1 :END1 3 :START2 1 :END2 3))
1452 Pass: (NULL (MISMATCH (QUOTE (A B C D)) (QUOTE (A B C D)) :START1 1 :END1 4 :START2 1 :END2 4))
1453 Pass: (EQL (MISMATCH (QUOTE (A B C D)) (QUOTE (A B C D)) :START1 1 :END1 NIL :START2 1 :END2 1) 1)
1454 Pass: (EQL (MISMATCH (QUOTE (A B C D)) (QUOTE (A B C D)) :START1 1 :END1 NIL :START2 1 :END2 2) 2)
1455 Pass: (EQL (MISMATCH (QUOTE (A B C D)) (QUOTE (A B C D)) :START1 1 :END1 NIL :START2 1 :END2 3) 3)
1456 Pass: (NULL (MISMATCH (QUOTE (A B C D)) (QUOTE (A B C D)) :START1 1 :END1 NIL :START2 1 :END2 4))
1457 Pass: (EQL (MISMATCH (QUOTE (A B C D)) (QUOTE (A B C D)) :START1 1 :END1 1 :START2 1) 1)
1458 Pass: (EQL (MISMATCH (QUOTE (A B C D)) (QUOTE (A B C D)) :START1 1 :END1 2 :START2 1) 2)
1459 Pass: (EQL (MISMATCH (QUOTE (A B C D)) (QUOTE (A B C D)) :START1 1 :END1 3 :START2 1) 3)
1460 Pass: (NULL (MISMATCH (QUOTE (A B C D)) (QUOTE (A B C D)) :START1 1 :END1 4 :START2 1))
1461 Pass: (NULL (MISMATCH (QUOTE (A B C)) (QUOTE (A B C)) :FROM-END T))
1462 Pass: (EQL (MISMATCH (QUOTE (A B C D)) (QUOTE (A B C)) :FROM-END T) 4)
1463 Pass: (EQL (MISMATCH (QUOTE (A B C)) (QUOTE (C)) :FROM-END T) 2)
1464 Pass: (EQL (MISMATCH (QUOTE (A B C)) (QUOTE (Z A B C)) :FROM-END T) 0)
1465 Pass: (EQL (MISMATCH (QUOTE (A B C)) (QUOTE (X Y Z A B C)) :FROM-END T) 0)
1466 Pass: (EQL (MISMATCH (QUOTE (X Y Z A B C)) (QUOTE (A B C)) :FROM-END T) 3)
1467 Pass: (EQL (MISMATCH (QUOTE (X Y Z A B C)) (QUOTE (A B C)) :END1 3 :FROM-END T) 3)
1468 Pass: (EQL (MISMATCH (QUOTE (X Y Z A B C)) (QUOTE (A B C)) :END1 5 :FROM-END T) 5)
1469 Pass: (EQL (MISMATCH (QUOTE (X Y Z A B C X Y Z)) (QUOTE (A B C)) :END1 6 :FROM-END T) 3)
1470 Pass: (EQL (MISMATCH (QUOTE (X Y Z A B C X Y Z)) (QUOTE (A B C)) :START1 2 :END1 6 :FROM-END T) 3)
1471 Pass: (EQL (MISMATCH (QUOTE (X Y Z A B C X Y Z)) (QUOTE (A B C)) :FROM-END T :START1 2 :END1 5 :START2 1 :END2 2) 4)
1472 Pass: (EQL (MISMATCH (QUOTE (X Y Z A B C X Y Z)) (QUOTE (A B C)) :START1 2 :END1 5 :START2 1 :END2 2) 2)
1473 Pass: (EQL (MISMATCH (QUOTE ((A) (B) (C))) (QUOTE ((A) (B) (C)))) 0)
1474 Pass: (NULL (MISMATCH (QUOTE ((A) (B) (C))) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)))
1475 Pass: (NULL (MISMATCH (QUOTE ((A) (B) (C))) (QUOTE ((A) (B) (C))) :TEST (FUNCTION EQUAL)))
1476 Pass: (EQL (MISMATCH (QUOTE (#(A) #(B) #(C))) (QUOTE (#(A) #(B) #(C)))) 0)
1477 Pass: (NULL (MISMATCH (QUOTE (#(A) #(B) #(C))) (QUOTE (#(A) #(B) #(C))) :TEST (FUNCTION EQUALP)))
1478 Pass: (EQL (MISMATCH (QUOTE ((A) (B) (C) (D))) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)) 3)
1479 Pass: (EQL (MISMATCH (QUOTE ((A) (B) (C))) (QUOTE ((A) (B) (C) (D))) :KEY (FUNCTION CAR)) 3)
1480 Pass: (EQL (MISMATCH (QUOTE (#\a #\b #\c)) (QUOTE (#\A #\B #\C))) 0)
1481 Pass: (NULL (MISMATCH (QUOTE (#\a #\b #\c)) (QUOTE (#\A #\B #\C)) :KEY (FUNCTION CHAR-UPCASE)))
1482 Pass: (NULL (MISMATCH (QUOTE (#\a #\b #\c)) (QUOTE (#\A #\B #\C)) :KEY (FUNCTION CHAR-DOWNCASE)))
1483 Pass: (NULL (MISMATCH (QUOTE (#\a #\b #\c)) (QUOTE (#\A #\B #\C)) :KEY (FUNCTION CHAR-UPCASE) :START1 1 :END1 2 :START2 1 :END2 2))
1484 Pass: (NULL (MISMATCH (QUOTE (#\a #\b #\c)) (QUOTE (#\A #\B #\C)) :KEY (FUNCTION CHAR-UPCASE) :START1 2 :START2 2))
1485 Pass: (EQL (MISMATCH (QUOTE ((A B C) (B C D) (D E F))) (QUOTE ((B B C) (C C D) (E E F)))) 0)
1486 Pass: (EQL (MISMATCH (QUOTE ((A B C) (B C D) (D E F))) (QUOTE ((B B C) (C C D) (E E F))) :KEY (FUNCTION CDR)) 0)
1487 Pass: (NULL (MISMATCH (QUOTE ((A B C) (B C D) (D E F))) (QUOTE ((B B C) (C C D) (E E F))) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL)))
1488 Pass: (EQL (MISMATCH (QUOTE ((A B C) (B C D) (D E F) (E F G))) (QUOTE ((B B C) (C C D) (E E F))) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL)) 3)
1489 Pass: (EQL (MISMATCH (QUOTE ((A B C) (B C D) (D E F) (E F G))) (QUOTE ((B B C) (C C D) (E E F))) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL) :FROM-END T) 4)
1490 Pass: (EQL (MISMATCH (QUOTE ((A A A) (A B C) (B C D) (D E F))) (QUOTE ((B B C) (C C D) (E E F))) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL) :FROM-END T) 1)
1491 Pass: (NULL (MISMATCH (QUOTE ((A A A) (A B C) (B C D) (D E F) (E F G))) (QUOTE ((B B C) (C C D) (E E F))) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL) :FROM-END T :START1 1 :END1 4))
1492 Pass: (EQL (MISMATCH (QUOTE ((A A A) (A B C) (B C D) (D E F) (E F G))) (QUOTE ((B B C) (C C D) (E E F))) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL) :FROM-END T :START1 1) 5)
1493 Pass: (EQL (MISMATCH (QUOTE ((A A A) (A B C) (B C D) (D E F) (E F G))) (QUOTE ((B B C) (C C D) (E E F))) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL) :FROM-END T :END1 3 :START2 1 :END2 2) 2)
1494 Pass: (NULL (MISMATCH #() (QUOTE NIL)))
1495 Pass: (EQL (MISMATCH #(A B C) (QUOTE (X Y Z))) 0)
1496 Pass: (EQL (MISMATCH #() (QUOTE (X Y Z))) 0)
1497 Pass: (EQL (MISMATCH #(X Y Z) (QUOTE NIL)) 0)
1498 Pass: (NULL (MISMATCH #(A) (QUOTE (A))))
1499 Pass: (EQL (MISMATCH #(A B C X Y Z) (QUOTE (A B C))) 3)
1500 Pass: (NULL (MISMATCH #(A B C) (QUOTE (A B C))))
1501 Pass: (EQL (MISMATCH #(A B C D E F) (QUOTE (A B C))) 3)
1502 Pass: (EQL (MISMATCH #(A B C) (QUOTE (A B C D E F))) 3)
1503 Pass: (EQL (MISMATCH #(A B C) (QUOTE (A B X))) 2)
1504 Pass: (EQL (MISMATCH #(A B C) (QUOTE (A X C))) 1)
1505 Pass: (EQL (MISMATCH #(A B C) (QUOTE (X B C))) 0)
1506 Pass: (EQL (MISMATCH #(X Y Z A B C X Y Z) (QUOTE (A B C)) :START1 3) 6)
1507 Pass: (EQL (MISMATCH #(X Y Z A B C X Y Z) (QUOTE (A B C)) :START1 3 :END1 NIL) 6)
1508 Pass: (EQL (MISMATCH #(X Y Z A B C X Y Z) (QUOTE (A B C)) :START1 3 :END1 4) 4)
1509 Pass: (EQL (MISMATCH #(X Y Z A B C X Y Z) (QUOTE (A B C)) :START1 3 :END1 3) 3)
1510 Pass: (NULL (MISMATCH #(X Y Z) (QUOTE NIL) :START1 0 :END1 0))
1511 Pass: (NULL (MISMATCH #(X Y Z) (QUOTE NIL) :START1 1 :END1 1))
1512 Pass: (NULL (MISMATCH #(X Y Z) (QUOTE NIL) :START1 2 :END1 2))
1513 Pass: (NULL (MISMATCH #(X Y Z) (QUOTE NIL) :START1 3 :END1 3))
1514 Pass: (NULL (MISMATCH #(X Y Z) (QUOTE NIL) :START1 0 :END1 0 :START2 0 :END2 0))
1515 Pass: (NULL (MISMATCH #(X Y Z) (QUOTE NIL) :START1 1 :END1 1 :START2 1 :END2 1))
1516 Pass: (NULL (MISMATCH #(X Y Z) (QUOTE NIL) :START1 2 :END1 2 :START2 2 :END2 2))
1517 Pass: (NULL (MISMATCH #(X Y Z) (QUOTE NIL) :START1 3 :END1 3 :START2 3 :END2 3))
1518 Pass: (NULL (MISMATCH #(X Y Z) (QUOTE NIL) :START1 0 :END1 0 :START2 3 :END2 3))
1519 Pass: (NULL (MISMATCH #(X Y Z) (QUOTE NIL) :START1 1 :END1 1 :START2 2 :END2 2))
1520 Pass: (NULL (MISMATCH #(X Y Z) (QUOTE NIL) :START1 2 :END1 2 :START2 1 :END2 1))
1521 Pass: (NULL (MISMATCH #(X Y Z) (QUOTE NIL) :START1 3 :END1 3 :START2 0 :END2 0))
1522 Pass: (EQL (MISMATCH #(X Y Z) (QUOTE (A B C)) :START1 0 :END1 0) 0)
1523 Pass: (EQL (MISMATCH #(X Y Z) (QUOTE (A B C)) :START1 1 :END1 1) 1)
1524 Pass: (EQL (MISMATCH #(X Y Z) (QUOTE (A B C)) :START1 2 :END1 2) 2)
1525 Pass: (EQL (MISMATCH #(X Y Z) (QUOTE (A B C)) :START1 3 :END1 3) 3)
1526 Pass: (EQL (MISMATCH #(X Y Z) (QUOTE (X Y Z)) :START1 0 :END1 1) 1)
1527 Pass: (EQL (MISMATCH #(X Y Z) (QUOTE (X Y Z)) :START1 0 :END1 2) 2)
1528 Pass: (EQL (MISMATCH #(X Y Z) (QUOTE (X Y Z Z)) :START1 0 :END1 3) 3)
1529 Pass: (NULL (MISMATCH #(X Y Z) (QUOTE (X Y Z)) :START1 0 :END1 3))
1530 Pass: (EQL (MISMATCH #(A B C X Y Z) (QUOTE (X Y Z A B C))) 0)
1531 Pass: (EQL (MISMATCH #(A B C X Y Z) (QUOTE (X Y Z A B C)) :START1 3) 6)
1532 Pass: (EQL (MISMATCH #(A B C X Y Z A B C) (QUOTE (X Y Z A B C X Y Z)) :START1 3) 9)
1533 Pass: (EQL (MISMATCH #(A B C X Y Z A B C) (QUOTE (X Y Z A B C X Y Z)) :START1 6) 6)
1534 Pass: (EQL (MISMATCH #(A B C X Y Z A B C) (QUOTE (X Y Z A B C X Y Z)) :START1 6 :START2 3) 9)
1535 Pass: (EQL (MISMATCH #(A B C X Y Z A B C) (QUOTE (X Y Z A B C X Y Z)) :START1 0 :START2 3) 6)
1536 Pass: (EQL (MISMATCH #(A B C) (QUOTE (A B C X Y Z))) 3)
1537 Pass: (EQL (MISMATCH #(A B C) (QUOTE (X A B C Y Z))) 0)
1538 Pass: (EQL (MISMATCH #(A B C) (QUOTE (X A B C Y Z)) :START2 1) 3)
1539 Pass: (EQL (MISMATCH #(A B C) (QUOTE (X A B C Y Z)) :START2 1 :END2 NIL) 3)
1540 Pass: (NULL (MISMATCH #(A B C) (QUOTE (X A B C Y Z)) :START2 1 :END2 4))
1541 Pass: (EQL (MISMATCH #(A B C D E) (QUOTE (C D))) 0)
1542 Pass: (EQL (MISMATCH #(A B C D E) (QUOTE (C D)) :START1 2) 4)
1543 Pass: (EQL (MISMATCH #(A B C D E) (QUOTE (C D)) :START1 2 :END1 3) 3)
1544 Pass: (EQL (MISMATCH #(A B C D E) (QUOTE (C D)) :START1 2 :START2 1) 2)
1545 Pass: (EQL (MISMATCH #(A B C D E) (QUOTE (C D)) :START1 3 :START2 1) 4)
1546 Pass: (EQL (MISMATCH #(A B C D E) (QUOTE (C D)) :START1 2 :END2 1) 3)
1547 Pass: (NULL (MISMATCH #(A B C D) (QUOTE (A B C D)) :START1 1 :END1 2 :START2 1 :END2 2))
1548 Pass: (NULL (MISMATCH #(A B C D) (QUOTE (A B C D)) :START1 1 :END1 3 :START2 1 :END2 3))
1549 Pass: (NULL (MISMATCH #(A B C D) (QUOTE (A B C D)) :START1 1 :END1 4 :START2 1 :END2 4))
1550 Pass: (EQL (MISMATCH #(A B C D) (QUOTE (A B C D)) :START1 1 :END1 NIL :START2 1 :END2 1) 1)
1551 Pass: (EQL (MISMATCH #(A B C D) (QUOTE (A B C D)) :START1 1 :END1 NIL :START2 1 :END2 2) 2)
1552 Pass: (EQL (MISMATCH #(A B C D) (QUOTE (A B C D)) :START1 1 :END1 NIL :START2 1 :END2 3) 3)
1553 Pass: (NULL (MISMATCH #(A B C D) (QUOTE (A B C D)) :START1 1 :END1 NIL :START2 1 :END2 4))
1554 Pass: (EQL (MISMATCH #(A B C D) (QUOTE (A B C D)) :START1 1 :END1 1 :START2 1) 1)
1555 Pass: (EQL (MISMATCH #(A B C D) (QUOTE (A B C D)) :START1 1 :END1 2 :START2 1) 2)
1556 Pass: (EQL (MISMATCH #(A B C D) (QUOTE (A B C D)) :START1 1 :END1 3 :START2 1) 3)
1557 Pass: (NULL (MISMATCH #(A B C D) (QUOTE (A B C D)) :START1 1 :END1 4 :START2 1))
1558 Pass: (NULL (MISMATCH #(A B C) (QUOTE (A B C)) :FROM-END T))
1559 Pass: (EQL (MISMATCH #(A B C D) (QUOTE (A B C)) :FROM-END T) 4)
1560 Pass: (EQL (MISMATCH #(A B C) (QUOTE (C)) :FROM-END T) 2)
1561 Pass: (EQL (MISMATCH #(A B C) (QUOTE (Z A B C)) :FROM-END T) 0)
1562 Pass: (EQL (MISMATCH #(A B C) (QUOTE (X Y Z A B C)) :FROM-END T) 0)
1563 Pass: (EQL (MISMATCH #(X Y Z A B C) (QUOTE (A B C)) :FROM-END T) 3)
1564 Pass: (EQL (MISMATCH #(X Y Z A B C) (QUOTE (A B C)) :END1 3 :FROM-END T) 3)
1565 Pass: (EQL (MISMATCH #(X Y Z A B C) (QUOTE (A B C)) :END1 5 :FROM-END T) 5)
1566 Pass: (EQL (MISMATCH #(X Y Z A B C X Y Z) (QUOTE (A B C)) :END1 6 :FROM-END T) 3)
1567 Pass: (EQL (MISMATCH #(X Y Z A B C X Y Z) (QUOTE (A B C)) :START1 2 :END1 6 :FROM-END T) 3)
1568 Pass: (EQL (MISMATCH #(X Y Z A B C X Y Z) (QUOTE (A B C)) :FROM-END T :START1 2 :END1 5 :START2 1 :END2 2) 4)
1569 Pass: (EQL (MISMATCH #(X Y Z A B C X Y Z) (QUOTE (A B C)) :START1 2 :END1 5 :START2 1 :END2 2) 2)
1570 Pass: (EQL (MISMATCH #((A) (B) (C)) (QUOTE ((A) (B) (C)))) 0)
1571 Pass: (NULL (MISMATCH #((A) (B) (C)) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)))
1572 Pass: (NULL (MISMATCH #((A) (B) (C)) (QUOTE ((A) (B) (C))) :TEST (FUNCTION EQUAL)))
1573 Pass: (EQL (MISMATCH #(#(A) #(B) #(C)) (QUOTE (#(A) #(B) #(C)))) 0)
1574 Pass: (NULL (MISMATCH #(#(A) #(B) #(C)) (QUOTE (#(A) #(B) #(C))) :TEST (FUNCTION EQUALP)))
1575 Pass: (EQL (MISMATCH #((A) (B) (C) (D)) (QUOTE ((A) (B) (C))) :KEY (FUNCTION CAR)) 3)
1576 Pass: (EQL (MISMATCH #((A) (B) (C)) (QUOTE ((A) (B) (C) (D))) :KEY (FUNCTION CAR)) 3)
1577 Pass: (EQL (MISMATCH #(#\a #\b #\c) (QUOTE (#\A #\B #\C))) 0)
1578 Pass: (NULL (MISMATCH #(#\a #\b #\c) (QUOTE (#\A #\B #\C)) :KEY (FUNCTION CHAR-UPCASE)))
1579 Pass: (NULL (MISMATCH #(#\a #\b #\c) (QUOTE (#\A #\B #\C)) :KEY (FUNCTION CHAR-DOWNCASE)))
1580 Pass: (NULL (MISMATCH #(#\a #\b #\c) (QUOTE (#\A #\B #\C)) :KEY (FUNCTION CHAR-UPCASE) :START1 1 :END1 2 :START2 1 :END2 2))
1581 Pass: (NULL (MISMATCH #(#\a #\b #\c) (QUOTE (#\A #\B #\C)) :KEY (FUNCTION CHAR-UPCASE) :START1 2 :START2 2))
1582 Pass: (EQL (MISMATCH #((A B C) (B C D) (D E F)) (QUOTE ((B B C) (C C D) (E E F)))) 0)
1583 Pass: (EQL (MISMATCH #((A B C) (B C D) (D E F)) (QUOTE ((B B C) (C C D) (E E F))) :KEY (FUNCTION CDR)) 0)
1584 Pass: (NULL (MISMATCH #((A B C) (B C D) (D E F)) (QUOTE ((B B C) (C C D) (E E F))) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL)))
1585 Pass: (EQL (MISMATCH #((A B C) (B C D) (D E F) (E F G)) (QUOTE ((B B C) (C C D) (E E F))) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL)) 3)
1586 Pass: (EQL (MISMATCH #((A B C) (B C D) (D E F) (E F G)) (QUOTE ((B B C) (C C D) (E E F))) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL) :FROM-END T) 4)
1587 Pass: (EQL (MISMATCH #((A A A) (A B C) (B C D) (D E F)) (QUOTE ((B B C) (C C D) (E E F))) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL) :FROM-END T) 1)
1588 Pass: (NULL (MISMATCH #((A A A) (A B C) (B C D) (D E F) (E F G)) (QUOTE ((B B C) (C C D) (E E F))) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL) :FROM-END T :START1 1 :END1 4))
1589 Pass: (EQL (MISMATCH #((A A A) (A B C) (B C D) (D E F) (E F G)) (QUOTE ((B B C) (C C D) (E E F))) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL) :FROM-END T :START1 1) 5)
1590 Pass: (EQL (MISMATCH #((A A A) (A B C) (B C D) (D E F) (E F G)) (QUOTE ((B B C) (C C D) (E E F))) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL) :FROM-END T :END1 3 :START2 1 :END2 2) 2)
1591 Pass: (NULL (MISMATCH (QUOTE NIL) #()))
1592 Pass: (EQL (MISMATCH (QUOTE (A B C)) #(X Y Z)) 0)
1593 Pass: (EQL (MISMATCH (QUOTE NIL) #(X Y Z)) 0)
1594 Pass: (EQL (MISMATCH (QUOTE (X Y Z)) #()) 0)
1595 Pass: (NULL (MISMATCH (QUOTE (A)) #(A)))
1596 Pass: (EQL (MISMATCH (QUOTE (A B C X Y Z)) #(A B C)) 3)
1597 Pass: (NULL (MISMATCH (QUOTE (A B C)) #(A B C)))
1598 Pass: (EQL (MISMATCH (QUOTE (A B C D E F)) #(A B C)) 3)
1599 Pass: (EQL (MISMATCH (QUOTE (A B C)) #(A B C D E F)) 3)
1600 Pass: (EQL (MISMATCH (QUOTE (A B C)) #(A B X)) 2)
1601 Pass: (EQL (MISMATCH (QUOTE (A B C)) #(A X C)) 1)
1602 Pass: (EQL (MISMATCH (QUOTE (A B C)) #(X B C)) 0)
1603 Pass: (EQL (MISMATCH (QUOTE (X Y Z A B C X Y Z)) #(A B C) :START1 3) 6)
1604 Pass: (EQL (MISMATCH (QUOTE (X Y Z A B C X Y Z)) #(A B C) :START1 3 :END1 NIL) 6)
1605 Pass: (EQL (MISMATCH (QUOTE (X Y Z A B C X Y Z)) #(A B C) :START1 3 :END1 4) 4)
1606 Pass: (EQL (MISMATCH (QUOTE (X Y Z A B C X Y Z)) #(A B C) :START1 3 :END1 3) 3)
1607 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) #() :START1 0 :END1 0))
1608 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) #() :START1 1 :END1 1))
1609 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) #() :START1 2 :END1 2))
1610 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) #() :START1 3 :END1 3))
1611 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) #() :START1 0 :END1 0 :START2 0 :END2 0))
1612 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) #() :START1 1 :END1 1 :START2 1 :END2 1))
1613 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) #() :START1 2 :END1 2 :START2 2 :END2 2))
1614 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) #() :START1 3 :END1 3 :START2 3 :END2 3))
1615 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) #() :START1 0 :END1 0 :START2 3 :END2 3))
1616 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) #() :START1 1 :END1 1 :START2 2 :END2 2))
1617 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) #() :START1 2 :END1 2 :START2 1 :END2 1))
1618 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) #() :START1 3 :END1 3 :START2 0 :END2 0))
1619 Pass: (EQL (MISMATCH (QUOTE (X Y Z)) #(A B C) :START1 0 :END1 0) 0)
1620 Pass: (EQL (MISMATCH (QUOTE (X Y Z)) #(A B C) :START1 1 :END1 1) 1)
1621 Pass: (EQL (MISMATCH (QUOTE (X Y Z)) #(A B C) :START1 2 :END1 2) 2)
1622 Pass: (EQL (MISMATCH (QUOTE (X Y Z)) #(A B C) :START1 3 :END1 3) 3)
1623 Pass: (EQL (MISMATCH (QUOTE (X Y Z)) #(X Y Z) :START1 0 :END1 1) 1)
1624 Pass: (EQL (MISMATCH (QUOTE (X Y Z)) #(X Y Z) :START1 0 :END1 2) 2)
1625 Pass: (EQL (MISMATCH (QUOTE (X Y Z)) #(X Y Z Z) :START1 0 :END1 3) 3)
1626 Pass: (NULL (MISMATCH (QUOTE (X Y Z)) #(X Y Z) :START1 0 :END1 3))
1627 Pass: (EQL (MISMATCH (QUOTE (A B C X Y Z)) #(X Y Z A B C)) 0)
1628 Pass: (EQL (MISMATCH (QUOTE (A B C X Y Z)) #(X Y Z A B C) :START1 3) 6)
1629 Pass: (EQL (MISMATCH (QUOTE (A B C X Y Z A B C)) #(X Y Z A B C X Y Z) :START1 3) 9)
1630 Pass: (EQL (MISMATCH (QUOTE (A B C X Y Z A B C)) #(X Y Z A B C X Y Z) :START1 6) 6)
1631 Pass: (EQL (MISMATCH (QUOTE (A B C X Y Z A B C)) #(X Y Z A B C X Y Z) :START1 6 :START2 3) 9)
1632 Pass: (EQL (MISMATCH (QUOTE (A B C X Y Z A B C)) #(X Y Z A B C X Y Z) :START1 0 :START2 3) 6)
1633 Pass: (EQL (MISMATCH (QUOTE (A B C)) #(A B C X Y Z)) 3)
1634 Pass: (EQL (MISMATCH (QUOTE (A B C)) #(X A B C Y Z)) 0)
1635 Pass: (EQL (MISMATCH (QUOTE (A B C)) #(X A B C Y Z) :START2 1) 3)
1636 Pass: (EQL (MISMATCH (QUOTE (A B C)) #(X A B C Y Z) :START2 1 :END2 NIL) 3)
1637 Pass: (NULL (MISMATCH (QUOTE (A B C)) #(X A B C Y Z) :START2 1 :END2 4))
1638 Pass: (EQL (MISMATCH (QUOTE (A B C D E)) #(C D)) 0)
1639 Pass: (EQL (MISMATCH (QUOTE (A B C D E)) #(C D) :START1 2) 4)
1640 Pass: (EQL (MISMATCH (QUOTE (A B C D E)) #(C D) :START1 2 :END1 3) 3)
1641 Pass: (EQL (MISMATCH (QUOTE (A B C D E)) #(C D) :START1 2 :START2 1) 2)
1642 Pass: (EQL (MISMATCH (QUOTE (A B C D E)) #(C D) :START1 3 :START2 1) 4)
1643 Pass: (EQL (MISMATCH (QUOTE (A B C D E)) #(C D) :START1 2 :END2 1) 3)
1644 Pass: (NULL (MISMATCH (QUOTE (A B C D)) #(A B C D) :START1 1 :END1 2 :START2 1 :END2 2))
1645 Pass: (NULL (MISMATCH (QUOTE (A B C D)) #(A B C D) :START1 1 :END1 3 :START2 1 :END2 3))
1646 Pass: (NULL (MISMATCH (QUOTE (A B C D)) #(A B C D) :START1 1 :END1 4 :START2 1 :END2 4))
1647 Pass: (EQL (MISMATCH (QUOTE (A B C D)) #(A B C D) :START1 1 :END1 NIL :START2 1 :END2 1) 1)
1648 Pass: (EQL (MISMATCH (QUOTE (A B C D)) #(A B C D) :START1 1 :END1 NIL :START2 1 :END2 2) 2)
1649 Pass: (EQL (MISMATCH (QUOTE (A B C D)) #(A B C D) :START1 1 :END1 NIL :START2 1 :END2 3) 3)
1650 Pass: (NULL (MISMATCH (QUOTE (A B C D)) #(A B C D) :START1 1 :END1 NIL :START2 1 :END2 4))
1651 Pass: (EQL (MISMATCH (QUOTE (A B C D)) #(A B C D) :START1 1 :END1 1 :START2 1) 1)
1652 Pass: (EQL (MISMATCH (QUOTE (A B C D)) #(A B C D) :START1 1 :END1 2 :START2 1) 2)
1653 Pass: (EQL (MISMATCH (QUOTE (A B C D)) #(A B C D) :START1 1 :END1 3 :START2 1) 3)
1654 Pass: (NULL (MISMATCH (QUOTE (A B C D)) #(A B C D) :START1 1 :END1 4 :START2 1))
1655 Pass: (NULL (MISMATCH (QUOTE (A B C)) #(A B C) :FROM-END T))
1656 Pass: (EQL (MISMATCH (QUOTE (A B C D)) #(A B C) :FROM-END T) 4)
1657 Pass: (EQL (MISMATCH (QUOTE (A B C)) #(C) :FROM-END T) 2)
1658 Pass: (EQL (MISMATCH (QUOTE (A B C)) #(Z A B C) :FROM-END T) 0)
1659 Pass: (EQL (MISMATCH (QUOTE (A B C)) #(X Y Z A B C) :FROM-END T) 0)
1660 Pass: (EQL (MISMATCH (QUOTE (X Y Z A B C)) #(A B C) :FROM-END T) 3)
1661 Pass: (EQL (MISMATCH (QUOTE (X Y Z A B C)) #(A B C) :END1 3 :FROM-END T) 3)
1662 Pass: (EQL (MISMATCH (QUOTE (X Y Z A B C)) #(A B C) :END1 5 :FROM-END T) 5)
1663 Pass: (EQL (MISMATCH (QUOTE (X Y Z A B C X Y Z)) #(A B C) :END1 6 :FROM-END T) 3)
1664 Pass: (EQL (MISMATCH (QUOTE (X Y Z A B C X Y Z)) #(A B C) :START1 2 :END1 6 :FROM-END T) 3)
1665 Pass: (EQL (MISMATCH (QUOTE (X Y Z A B C X Y Z)) #(A B C) :FROM-END T :START1 2 :END1 5 :START2 1 :END2 2) 4)
1666 Pass: (EQL (MISMATCH (QUOTE (X Y Z A B C X Y Z)) #(A B C) :START1 2 :END1 5 :START2 1 :END2 2) 2)
1667 Pass: (EQL (MISMATCH (QUOTE ((A) (B) (C))) #((A) (B) (C))) 0)
1668 Pass: (NULL (MISMATCH (QUOTE ((A) (B) (C))) #((A) (B) (C)) :KEY (FUNCTION CAR)))
1669 Pass: (NULL (MISMATCH (QUOTE ((A) (B) (C))) #((A) (B) (C)) :TEST (FUNCTION EQUAL)))
1670 Pass: (EQL (MISMATCH (QUOTE (#(A) #(B) #(C))) #(#(A) #(B) #(C))) 0)
1671 Pass: (NULL (MISMATCH (QUOTE (#(A) #(B) #(C))) #(#(A) #(B) #(C)) :TEST (FUNCTION EQUALP)))
1672 Pass: (EQL (MISMATCH (QUOTE ((A) (B) (C) (D))) #((A) (B) (C)) :KEY (FUNCTION CAR)) 3)
1673 Pass: (EQL (MISMATCH (QUOTE ((A) (B) (C))) #((A) (B) (C) (D)) :KEY (FUNCTION CAR)) 3)
1674 Pass: (EQL (MISMATCH (QUOTE (#\a #\b #\c)) #(#\A #\B #\C)) 0)
1675 Pass: (NULL (MISMATCH (QUOTE (#\a #\b #\c)) #(#\A #\B #\C) :KEY (FUNCTION CHAR-UPCASE)))
1676 Pass: (NULL (MISMATCH (QUOTE (#\a #\b #\c)) #(#\A #\B #\C) :KEY (FUNCTION CHAR-DOWNCASE)))
1677 Pass: (NULL (MISMATCH (QUOTE (#\a #\b #\c)) #(#\A #\B #\C) :KEY (FUNCTION CHAR-UPCASE) :START1 1 :END1 2 :START2 1 :END2 2))
1678 Pass: (NULL (MISMATCH (QUOTE (#\a #\b #\c)) #(#\A #\B #\C) :KEY (FUNCTION CHAR-UPCASE) :START1 2 :START2 2))
1679 Pass: (EQL (MISMATCH (QUOTE ((A B C) (B C D) (D E F))) #((B B C) (C C D) (E E F))) 0)
1680 Pass: (EQL (MISMATCH (QUOTE ((A B C) (B C D) (D E F))) #((B B C) (C C D) (E E F)) :KEY (FUNCTION CDR)) 0)
1681 Pass: (NULL (MISMATCH (QUOTE ((A B C) (B C D) (D E F))) #((B B C) (C C D) (E E F)) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL)))
1682 Pass: (EQL (MISMATCH (QUOTE ((A B C) (B C D) (D E F) (E F G))) #((B B C) (C C D) (E E F)) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL)) 3)
1683 Pass: (EQL (MISMATCH (QUOTE ((A B C) (B C D) (D E F) (E F G))) #((B B C) (C C D) (E E F)) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL) :FROM-END T) 4)
1684 Pass: (EQL (MISMATCH (QUOTE ((A A A) (A B C) (B C D) (D E F))) #((B B C) (C C D) (E E F)) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL) :FROM-END T) 1)
1685 Pass: (NULL (MISMATCH (QUOTE ((A A A) (A B C) (B C D) (D E F) (E F G))) #((B B C) (C C D) (E E F)) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL) :FROM-END T :START1 1 :END1 4))
1686 Pass: (EQL (MISMATCH (QUOTE ((A A A) (A B C) (B C D) (D E F) (E F G))) #((B B C) (C C D) (E E F)) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL) :FROM-END T :START1 1) 5)
1687 Pass: (EQL (MISMATCH (QUOTE ((A A A) (A B C) (B C D) (D E F) (E F G))) #((B B C) (C C D) (E E F)) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL) :FROM-END T :END1 3 :START2 1 :END2 2) 2)
1688 Pass: (NULL (MISMATCH #() #()))
1689 Pass: (EQL (MISMATCH #(A B C) #(X Y Z)) 0)
1690 Pass: (EQL (MISMATCH #() #(X Y Z)) 0)
1691 Pass: (EQL (MISMATCH #(X Y Z) #()) 0)
1692 Pass: (NULL (MISMATCH #(A) #(A)))
1693 Pass: (EQL (MISMATCH #(A B C X Y Z) #(A B C)) 3)
1694 Pass: (NULL (MISMATCH #(A B C) #(A B C)))
1695 Pass: (EQL (MISMATCH #(A B C D E F) #(A B C)) 3)
1696 Pass: (EQL (MISMATCH #(A B C) #(A B C D E F)) 3)
1697 Pass: (EQL (MISMATCH #(A B C) #(A B X)) 2)
1698 Pass: (EQL (MISMATCH #(A B C) #(A X C)) 1)
1699 Pass: (EQL (MISMATCH #(A B C) #(X B C)) 0)
1700 Pass: (EQL (MISMATCH #(X Y Z A B C X Y Z) #(A B C) :START1 3) 6)
1701 Pass: (EQL (MISMATCH #(X Y Z A B C X Y Z) #(A B C) :START1 3 :END1 NIL) 6)
1702 Pass: (EQL (MISMATCH #(X Y Z A B C X Y Z) #(A B C) :START1 3 :END1 4) 4)
1703 Pass: (EQL (MISMATCH #(X Y Z A B C X Y Z) #(A B C) :START1 3 :END1 3) 3)
1704 Pass: (NULL (MISMATCH #(X Y Z) #() :START1 0 :END1 0))
1705 Pass: (NULL (MISMATCH #(X Y Z) #() :START1 1 :END1 1))
1706 Pass: (NULL (MISMATCH #(X Y Z) #() :START1 2 :END1 2))
1707 Pass: (NULL (MISMATCH #(X Y Z) #() :START1 3 :END1 3))
1708 Pass: (NULL (MISMATCH #(X Y Z) #() :START1 0 :END1 0 :START2 0 :END2 0))
1709 Pass: (NULL (MISMATCH #(X Y Z) #() :START1 1 :END1 1 :START2 1 :END2 1))
1710 Pass: (NULL (MISMATCH #(X Y Z) #() :START1 2 :END1 2 :START2 2 :END2 2))
1711 Pass: (NULL (MISMATCH #(X Y Z) #() :START1 3 :END1 3 :START2 3 :END2 3))
1712 Pass: (NULL (MISMATCH #(X Y Z) #() :START1 0 :END1 0 :START2 3 :END2 3))
1713 Pass: (NULL (MISMATCH #(X Y Z) #() :START1 1 :END1 1 :START2 2 :END2 2))
1714 Pass: (NULL (MISMATCH #(X Y Z) #() :START1 2 :END1 2 :START2 1 :END2 1))
1715 Pass: (NULL (MISMATCH #(X Y Z) #() :START1 3 :END1 3 :START2 0 :END2 0))
1716 Pass: (EQL (MISMATCH #(X Y Z) #(A B C) :START1 0 :END1 0) 0)
1717 Pass: (EQL (MISMATCH #(X Y Z) #(A B C) :START1 1 :END1 1) 1)
1718 Pass: (EQL (MISMATCH #(X Y Z) #(A B C) :START1 2 :END1 2) 2)
1719 Pass: (EQL (MISMATCH #(X Y Z) #(A B C) :START1 3 :END1 3) 3)
1720 Pass: (EQL (MISMATCH #(X Y Z) #(X Y Z) :START1 0 :END1 1) 1)
1721 Pass: (EQL (MISMATCH #(X Y Z) #(X Y Z) :START1 0 :END1 2) 2)
1722 Pass: (EQL (MISMATCH #(X Y Z) #(X Y Z Z) :START1 0 :END1 3) 3)
1723 Pass: (NULL (MISMATCH #(X Y Z) #(X Y Z) :START1 0 :END1 3))
1724 Pass: (EQL (MISMATCH #(A B C X Y Z) #(X Y Z A B C)) 0)
1725 Pass: (EQL (MISMATCH #(A B C X Y Z) #(X Y Z A B C) :START1 3) 6)
1726 Pass: (EQL (MISMATCH #(A B C X Y Z A B C) #(X Y Z A B C X Y Z) :START1 3) 9)
1727 Pass: (EQL (MISMATCH #(A B C X Y Z A B C) #(X Y Z A B C X Y Z) :START1 6) 6)
1728 Pass: (EQL (MISMATCH #(A B C X Y Z A B C) #(X Y Z A B C X Y Z) :START1 6 :START2 3) 9)
1729 Pass: (EQL (MISMATCH #(A B C X Y Z A B C) #(X Y Z A B C X Y Z) :START1 0 :START2 3) 6)
1730 Pass: (EQL (MISMATCH #(A B C) #(A B C X Y Z)) 3)
1731 Pass: (EQL (MISMATCH #(A B C) #(X A B C Y Z)) 0)
1732 Pass: (EQL (MISMATCH #(A B C) #(X A B C Y Z) :START2 1) 3)
1733 Pass: (EQL (MISMATCH #(A B C) #(X A B C Y Z) :START2 1 :END2 NIL) 3)
1734 Pass: (NULL (MISMATCH #(A B C) #(X A B C Y Z) :START2 1 :END2 4))
1735 Pass: (EQL (MISMATCH #(A B C D E) #(C D)) 0)
1736 Pass: (EQL (MISMATCH #(A B C D E) #(C D) :START1 2) 4)
1737 Pass: (EQL (MISMATCH #(A B C D E) #(C D) :START1 2 :END1 3) 3)
1738 Pass: (EQL (MISMATCH #(A B C D E) #(C D) :START1 2 :START2 1) 2)
1739 Pass: (EQL (MISMATCH #(A B C D E) #(C D) :START1 3 :START2 1) 4)
1740 Pass: (EQL (MISMATCH #(A B C D E) #(C D) :START1 2 :END2 1) 3)
1741 Pass: (NULL (MISMATCH #(A B C D) #(A B C D) :START1 1 :END1 2 :START2 1 :END2 2))
1742 Pass: (NULL (MISMATCH #(A B C D) #(A B C D) :START1 1 :END1 3 :START2 1 :END2 3))
1743 Pass: (NULL (MISMATCH #(A B C D) #(A B C D) :START1 1 :END1 4 :START2 1 :END2 4))
1744 Pass: (EQL (MISMATCH #(A B C D) #(A B C D) :START1 1 :END1 NIL :START2 1 :END2 1) 1)
1745 Pass: (EQL (MISMATCH #(A B C D) #(A B C D) :START1 1 :END1 NIL :START2 1 :END2 2) 2)
1746 Pass: (EQL (MISMATCH #(A B C D) #(A B C D) :START1 1 :END1 NIL :START2 1 :END2 3) 3)
1747 Pass: (NULL (MISMATCH #(A B C D) #(A B C D) :START1 1 :END1 NIL :START2 1 :END2 4))
1748 Pass: (EQL (MISMATCH #(A B C D) #(A B C D) :START1 1 :END1 1 :START2 1) 1)
1749 Pass: (EQL (MISMATCH #(A B C D) #(A B C D) :START1 1 :END1 2 :START2 1) 2)
1750 Pass: (EQL (MISMATCH #(A B C D) #(A B C D) :START1 1 :END1 3 :START2 1) 3)
1751 Pass: (NULL (MISMATCH #(A B C D) #(A B C D) :START1 1 :END1 4 :START2 1))
1752 Pass: (NULL (MISMATCH #(A B C) #(A B C) :FROM-END T))
1753 Pass: (EQL (MISMATCH #(A B C D) #(A B C) :FROM-END T) 4)
1754 Pass: (EQL (MISMATCH #(A B C) #(C) :FROM-END T) 2)
1755 Pass: (EQL (MISMATCH #(A B C) #(Z A B C) :FROM-END T) 0)
1756 Pass: (EQL (MISMATCH #(A B C) #(X Y Z A B C) :FROM-END T) 0)
1757 Pass: (EQL (MISMATCH #(X Y Z A B C) #(A B C) :FROM-END T) 3)
1758 Pass: (EQL (MISMATCH #(X Y Z A B C) #(A B C) :END1 3 :FROM-END T) 3)
1759 Pass: (EQL (MISMATCH #(X Y Z A B C) #(A B C) :END1 5 :FROM-END T) 5)
1760 Pass: (EQL (MISMATCH #(X Y Z A B C X Y Z) #(A B C) :END1 6 :FROM-END T) 3)
1761 Pass: (EQL (MISMATCH #(X Y Z A B C X Y Z) #(A B C) :START1 2 :END1 6 :FROM-END T) 3)
1762 Pass: (EQL (MISMATCH #(X Y Z A B C X Y Z) #(A B C) :FROM-END T :START1 2 :END1 5 :START2 1 :END2 2) 4)
1763 Pass: (EQL (MISMATCH #(X Y Z A B C X Y Z) #(A B C) :START1 2 :END1 5 :START2 1 :END2 2) 2)
1764 Pass: (EQL (MISMATCH #((A) (B) (C)) #((A) (B) (C))) 0)
1765 Pass: (NULL (MISMATCH #((A) (B) (C)) #((A) (B) (C)) :KEY (FUNCTION CAR)))
1766 Pass: (NULL (MISMATCH #((A) (B) (C)) #((A) (B) (C)) :TEST (FUNCTION EQUAL)))
1767 Pass: (EQL (MISMATCH #(#(A) #(B) #(C)) #(#(A) #(B) #(C))) 0)
1768 Pass: (NULL (MISMATCH #(#(A) #(B) #(C)) #(#(A) #(B) #(C)) :TEST (FUNCTION EQUALP)))
1769 Pass: (EQL (MISMATCH #((A) (B) (C) (D)) #((A) (B) (C)) :KEY (FUNCTION CAR)) 3)
1770 Pass: (EQL (MISMATCH #((A) (B) (C)) #((A) (B) (C) (D)) :KEY (FUNCTION CAR)) 3)
1771 Pass: (EQL (MISMATCH #(#\a #\b #\c) #(#\A #\B #\C)) 0)
1772 Pass: (NULL (MISMATCH #(#\a #\b #\c) #(#\A #\B #\C) :KEY (FUNCTION CHAR-UPCASE)))
1773 Pass: (NULL (MISMATCH #(#\a #\b #\c) #(#\A #\B #\C) :KEY (FUNCTION CHAR-DOWNCASE)))
1774 Pass: (NULL (MISMATCH #(#\a #\b #\c) #(#\A #\B #\C) :KEY (FUNCTION CHAR-UPCASE) :START1 1 :END1 2 :START2 1 :END2 2))
1775 Pass: (NULL (MISMATCH #(#\a #\b #\c) #(#\A #\B #\C) :KEY (FUNCTION CHAR-UPCASE) :START1 2 :START2 2))
1776 Pass: (EQL (MISMATCH #((A B C) (B C D) (D E F)) #((B B C) (C C D) (E E F))) 0)
1777 Pass: (EQL (MISMATCH #((A B C) (B C D) (D E F)) #((B B C) (C C D) (E E F)) :KEY (FUNCTION CDR)) 0)
1778 Pass: (NULL (MISMATCH #((A B C) (B C D) (D E F)) #((B B C) (C C D) (E E F)) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL)))
1779 Pass: (EQL (MISMATCH #((A B C) (B C D) (D E F) (E F G)) #((B B C) (C C D) (E E F)) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL)) 3)
1780 Pass: (EQL (MISMATCH #((A B C) (B C D) (D E F) (E F G)) #((B B C) (C C D) (E E F)) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL) :FROM-END T) 4)
1781 Pass: (EQL (MISMATCH #((A A A) (A B C) (B C D) (D E F)) #((B B C) (C C D) (E E F)) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL) :FROM-END T) 1)
1782 Pass: (NULL (MISMATCH #((A A A) (A B C) (B C D) (D E F) (E F G)) #((B B C) (C C D) (E E F)) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL) :FROM-END T :START1 1 :END1 4))
1783 Pass: (EQL (MISMATCH #((A A A) (A B C) (B C D) (D E F) (E F G)) #((B B C) (C C D) (E E F)) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL) :FROM-END T :START1 1) 5)
1784 Pass: (EQL (MISMATCH #((A A A) (A B C) (B C D) (D E F) (E F G)) #((B B C) (C C D) (E E F)) :KEY (FUNCTION CDR) :TEST (FUNCTION EQUAL) :FROM-END T :END1 3 :START2 1 :END2 2) 2)
1785 Pass: (EQL (MISMATCH "abc" "xyz") 0)
1786 Pass: (NULL (MISMATCH "" ""))
1787 Pass: (NULL (MISMATCH "a" "a"))
1788 Pass: (NULL (MISMATCH "abc" "abc"))
1789 Pass: (NULL (MISMATCH "abc" "ABC" :KEY (FUNCTION CHAR-DOWNCASE)))
1790 Pass: (NULL (MISMATCH "abc" "ABC" :TEST (FUNCTION CHAR-EQUAL)))
1791 Pass: (EQL (MISMATCH "abcde" "abc") 3)
1792 Pass: (EQL (MISMATCH "abc" "abcde") 3)
1793 Pass: (EQL (MISMATCH "abc" "abxyz") 2)
1794 Pass: (EQL (MISMATCH "abcde" "abx") 2)
1795 Pass: (NULL (MISMATCH "abc" "abc" :FROM-END T))
1796 Pass: (EQL (MISMATCH "abcxyz" "xyzxyz" :FROM-END T) 3)
1797 Pass: (EQL (MISMATCH "abcxyz" "xyz" :FROM-END T) 3)
1798 Pass: (EQL (MISMATCH "xyz" "abcxyz" :FROM-END T) 0)
1799 Pass: (EQL (MISMATCH "ayz" "abcxyz" :FROM-END T) 1)
1800 Pass: (NULL (MISMATCH "abc" "xyz" :TEST (FUNCTION CHAR<)))
1801 Pass: (EQL (MISMATCH "abc" "xyz" :TEST (FUNCTION CHAR>)) 0)
1802 Pass: (EQL (MISMATCH "abcxyz" "abcdefg") 3)
1803 Pass: (EQL (MISMATCH "1xyz" "22xyz" :FROM-END T) 1)
1804 Pass: (NULL (MISMATCH #(0 1 0 1 0 1) #(0 1 0 1 0 1)))
1805 Pass: (EQL (MISMATCH #(0 1 0) #(1 0 1)) 0)
1806 Pass: (EQL (MISMATCH #(0 1 0) #(1 0 1) :FROM-END T) 3)
1807 Pass: (EQL (MISMATCH #(0 1 0 1) #(0 1 0 1 0 1)) 4)
1808 Pass: (EQL (MISMATCH #(0 1 0 1 0 1) #(0 1 0 1)) 4)
1809 Pass: (EQL (MISMATCH #(0 1 0 1 0 0) #(0 1 0 1 1 1)) 4)
1810 Pass: (NULL (MISMATCH #(0 1 0 1) #(0 1 0 1) :FROM-END T))
1811 Pass: (EQL (MISMATCH #(0 0 1 0 1) #(0 1 0 1) :FROM-END T) 1)
1812 Pass: (EQL (MISMATCH #(0 1 0 1) #(0 0 1 0 1) :FROM-END T) 0)
1813 Pass: (EQL (MISMATCH #(0 0 1 0 1) #(1 0 1 0 1) :FROM-END T) 1)
1814 Pass: (EQUAL (REPLACE "abcdefghij" "0123456789" :START1 4 :END1 7 :START2 4) "abcd456hij")
1815 Pass: (LET ((LST (COPY-SEQ "012345678"))) (AND (EQUAL (REPLACE LST LST :START1 2 :START2 0) "010123456") (EQUAL LST "010123456")))
1816 Pass: (LET* ((LIST0 (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (LIST (REPLACE LIST0 (QUOTE (X Y Z))))) (AND (EQ LIST0 LIST) (EQUAL LIST0 (QUOTE (X Y Z D E)))))
1817 Pass: (LET* ((LIST0 (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (LIST (REPLACE LIST0 (QUOTE (X Y Z)) :START1 1))) (AND (EQ LIST0 LIST) (EQUAL LIST0 (QUOTE (A X Y Z E)))))
1818 Pass: (LET* ((LIST0 (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (LIST (REPLACE LIST0 (QUOTE (X Y Z)) :START1 1 :END1 NIL))) (AND (EQ LIST0 LIST) (EQUAL LIST0 (QUOTE (A X Y Z E)))))
1819 Pass: (LET* ((LIST0 (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (LIST (REPLACE LIST0 (QUOTE (X Y Z)) :START1 1 :START2 1))) (AND (EQ LIST0 LIST) (EQUAL LIST0 (QUOTE (A Y Z D E)))))
1820 Pass: (LET* ((LIST0 (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (LIST (REPLACE LIST0 (QUOTE (X Y Z)) :START1 1 :START2 1 :END2 NIL))) (AND (EQ LIST0 LIST) (EQUAL LIST0 (QUOTE (A Y Z D E)))))
1821 Pass: (LET* ((LIST0 (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (LIST (REPLACE LIST0 (QUOTE (X Y Z)) :START1 1 :END1 NIL :START2 1 :END2 NIL))) (AND (EQ LIST0 LIST) (EQUAL LIST0 (QUOTE (A Y Z D E)))))
1822 Pass: (LET* ((LIST0 (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (LIST (REPLACE LIST0 (QUOTE (X Y Z)) :START1 1 :END1 2 :START2 1))) (AND (EQ LIST0 LIST) (EQUAL LIST0 (QUOTE (A Y C D E)))))
1823 Pass: (LET* ((LIST0 (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (LIST (REPLACE LIST0 (QUOTE (X Y Z)) :START1 1 :END1 1))) (AND (EQ LIST0 LIST) (EQUAL LIST0 (QUOTE (A B C D E)))))
1824 Pass: (LET* ((LIST0 (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (LIST (REPLACE LIST0 (QUOTE (X Y Z)) :START1 2 :END1 2))) (AND (EQ LIST0 LIST) (EQUAL LIST0 (QUOTE (A B C D E)))))
1825 Pass: (LET* ((LIST0 (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (LIST (REPLACE LIST0 (QUOTE (X Y Z)) :START1 3 :END1 3))) (AND (EQ LIST0 LIST) (EQUAL LIST0 (QUOTE (A B C D E)))))
1826 Pass: (LET* ((LIST0 (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (LIST (REPLACE LIST0 (QUOTE (X Y Z)) :START1 4 :END1 4))) (AND (EQ LIST0 LIST) (EQUAL LIST0 (QUOTE (A B C D E)))))
1827 Pass: (LET* ((LIST0 (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (LIST (REPLACE LIST0 (QUOTE (X Y Z)) :START1 5 :END1 5))) (AND (EQ LIST0 LIST) (EQUAL LIST0 (QUOTE (A B C D E)))))
1828 Pass: (NULL (REPLACE NIL NIL))
1829 Pass: (NULL (REPLACE NIL (QUOTE (A B C))))
1830 Pass: (LET* ((LIST0 (LIST (QUOTE A) (QUOTE B) (QUOTE C))) (LIST (REPLACE LIST0 (QUOTE NIL)))) (AND (EQ LIST0 LIST) (EQUAL LIST0 (QUOTE (A B C)))))
1831 Pass: (LET* ((LIST0 (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (LIST (REPLACE LIST0 LIST0))) (AND (EQ LIST0 LIST) (EQUAL LIST0 (QUOTE (A B C D E)))))
1832 Pass: (LET* ((LIST0 (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (LIST (REPLACE LIST0 LIST0 :START1 3))) (AND (EQ LIST0 LIST) (EQUAL LIST0 (QUOTE (A B C A B)))))
1833 Pass: (LET* ((LIST0 (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (LIST (REPLACE LIST0 LIST0 :START1 1))) (AND (EQ LIST0 LIST) (EQUAL LIST0 (QUOTE (A A B C D)))))
1834 Pass: (LET* ((LIST0 (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (LIST (REPLACE LIST0 LIST0 :START1 1 :END1 3))) (AND (EQ LIST0 LIST) (EQUAL LIST0 (QUOTE (A A B D E)))))
1835 Pass: (LET* ((LIST0 (LIST (QUOTE A) (QUOTE B) (QUOTE C))) (LIST (REPLACE LIST0 (QUOTE (X Y Z))))) (AND (EQ LIST0 LIST) (EQUAL LIST0 (QUOTE (X Y Z)))))
1836 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 (QUOTE (X Y Z))))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(X Y Z D E))))
1837 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 (QUOTE (X Y Z)) :START1 1))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A X Y Z E))))
1838 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 (QUOTE (X Y Z)) :START1 1 :END1 NIL))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A X Y Z E))))
1839 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 (QUOTE (X Y Z)) :START1 1 :START2 1))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A Y Z D E))))
1840 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 (QUOTE (X Y Z)) :START1 1 :START2 1 :END2 NIL))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A Y Z D E))))
1841 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 (QUOTE (X Y Z)) :START1 1 :END1 NIL :START2 1 :END2 NIL))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A Y Z D E))))
1842 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 (QUOTE (X Y Z)) :START1 1 :END1 2 :START2 1))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A Y C D E))))
1843 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 (QUOTE (X Y Z)) :START1 1 :END1 1))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A B C D E))))
1844 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 (QUOTE (X Y Z)) :START1 2 :END1 2))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A B C D E))))
1845 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 (QUOTE (X Y Z)) :START1 3 :END1 3))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A B C D E))))
1846 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 (QUOTE (X Y Z)) :START1 4 :END1 4))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A B C D E))))
1847 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 (QUOTE (X Y Z)) :START1 5 :END1 5))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A B C D E))))
1848 Pass: (NULL (REPLACE NIL #()))
1849 Pass: (NULL (REPLACE NIL #(A B C)))
1850 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C))) (VECTOR (REPLACE VECTOR0 (QUOTE NIL)))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A B C))))
1851 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 VECTOR0))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A B C D E))))
1852 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 VECTOR0 :START1 3))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A B C A B))))
1853 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 VECTOR0 :START1 1))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A A B C D))))
1854 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 VECTOR0 :START1 1 :END1 3))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A A B D E))))
1855 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C))) (VECTOR (REPLACE VECTOR0 (QUOTE (X Y Z))))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(X Y Z))))
1856 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 #(X Y Z)))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(X Y Z D E))))
1857 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 #(X Y Z) :START1 1))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A X Y Z E))))
1858 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 #(X Y Z) :START1 1 :END1 NIL))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A X Y Z E))))
1859 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 #(X Y Z) :START1 1 :START2 1))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A Y Z D E))))
1860 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 #(X Y Z) :START1 1 :START2 1 :END2 NIL))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A Y Z D E))))
1861 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 #(X Y Z) :START1 1 :END1 NIL :START2 1 :END2 NIL))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A Y Z D E))))
1862 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 #(X Y Z) :START1 1 :END1 2 :START2 1))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A Y C D E))))
1863 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 #(X Y Z) :START1 1 :END1 1))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A B C D E))))
1864 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 #(X Y Z) :START1 2 :END1 2))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A B C D E))))
1865 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 #(X Y Z) :START1 3 :END1 3))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A B C D E))))
1866 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 #(X Y Z) :START1 4 :END1 4))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A B C D E))))
1867 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 #(X Y Z) :START1 5 :END1 5))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A B C D E))))
1868 Pass: (NULL (REPLACE NIL #()))
1869 Pass: (NULL (REPLACE NIL #(A B C)))
1870 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C))) (VECTOR (REPLACE VECTOR0 #()))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A B C))))
1871 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 VECTOR0))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A B C D E))))
1872 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 VECTOR0 :START1 3))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A B C A B))))
1873 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 VECTOR0 :START1 1))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A A B C D))))
1874 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE D) (QUOTE E))) (VECTOR (REPLACE VECTOR0 VECTOR0 :START1 1 :END1 3))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(A A B D E))))
1875 Pass: (LET* ((VECTOR0 (VECTOR (QUOTE A) (QUOTE B) (QUOTE C))) (VECTOR (REPLACE VECTOR0 #(X Y Z)))) (AND (EQ VECTOR0 VECTOR) (EQUALP VECTOR0 #(X Y Z))))
1876 Pass: (LET* ((STR0 (COPY-SEQ "abc")) (STR (REPLACE STR0 "xyz"))) (AND (EQ STR0 STR) (EQUALP STR0 "xyz")))
1877 Pass: (LET* ((STR0 (COPY-SEQ "")) (STR (REPLACE STR0 ""))) (AND (EQ STR0 STR) (EQUALP STR0 "")))
1878 Pass: (LET* ((STR0 (COPY-SEQ "")) (STR (REPLACE STR0 "xyz"))) (AND (EQ STR0 STR) (EQUALP STR0 "")))
1879 Pass: (LET* ((STR0 (COPY-SEQ "abc")) (STR (REPLACE STR0 ""))) (AND (EQ STR0 STR) (EQUALP STR0 "abc")))
1880 Pass: (LET* ((STR0 (COPY-SEQ "abcdef")) (STR (REPLACE STR0 "xyz" :START1 3))) (AND (EQ STR0 STR) (EQUALP STR0 "abcxyz")))
1881 Pass: (LET* ((STR0 (COPY-SEQ "abcdef")) (STR (REPLACE STR0 "xyz" :START1 4 :START2 1))) (AND (EQ STR0 STR) (EQUALP STR0 "abcdyz")))
1882 Pass: (LET* ((STR0 (COPY-SEQ "abcdef")) (STR (REPLACE STR0 "xyz" :START1 1 :END1 2 :START2 1))) (AND (EQ STR0 STR) (EQUALP STR0 "aycdef")))
1883 Pass: (LET* ((STR0 (COPY-SEQ "abcdef")) (STR (REPLACE STR0 "xyz" :START1 1 :START2 1 :END2 2))) (AND (EQ STR0 STR) (EQUALP STR0 "aycdef")))
1884 Pass: (LET* ((STR0 (COPY-SEQ "abcdef")) (STR (REPLACE STR0 STR0 :START1 1))) (AND (EQ STR0 STR) (EQUALP STR0 "aabcde")))
1885 Pass: (LET* ((BV0 (COPY-SEQ #(0 0 0 0))) (BV (REPLACE BV0 #(1 0 1 0)))) (AND (EQ BV0 BV) (EQUALP BV0 #(1 0 1 0))))
1886 Pass: (LET* ((BV0 (COPY-SEQ #())) (BV (REPLACE BV0 #(1 0 1 0)))) (AND (EQ BV0 BV) (EQUALP BV0 #())))
1887 Pass: (LET* ((BV0 (COPY-SEQ #(0 0 0 0))) (BV (REPLACE BV0 #()))) (AND (EQ BV0 BV) (EQUALP BV0 #(0 0 0 0))))
1888 Pass: (LET* ((BV0 (COPY-SEQ #(0 0 0 0))) (BV (REPLACE BV0 #(1 1 1 1) :START1 2))) (AND (EQ BV0 BV) (EQUALP BV0 #(0 0 1 1))))
1889 Pass: (LET* ((BV0 (COPY-SEQ #(1 0 0 1))) (BV (REPLACE BV0 #(0 1 1 0) :START1 1 :END1 3 :START2 1 :END2 3))) (AND (EQ BV0 BV) (EQUALP BV0 #(1 1 1 1))))
1890 Pass: (LET* ((BV0 (COPY-SEQ #(1 0 1 0))) (BV (REPLACE BV0 BV0 :START1 1))) (AND (EQ BV0 BV) (EQUALP BV0 #(1 1 0 1))))
1891 Pass: (EQUAL (SUBSTITUTE #\. #\  "0 2 4 6") "0.2.4.6")
1892 Pass: (EQUAL (SUBSTITUTE 9 4 (QUOTE (1 2 4 1 3 4 5))) (QUOTE (1 2 9 1 3 9 5)))
1893 Pass: (EQUAL (SUBSTITUTE 9 4 (QUOTE (1 2 4 1 3 4 5)) :COUNT 1) (QUOTE (1 2 9 1 3 4 5)))
1894 Pass: (EQUAL (SUBSTITUTE 9 4 (QUOTE (1 2 4 1 3 4 5)) :COUNT 1 :FROM-END T) (QUOTE (1 2 4 1 3 9 5)))
1895 Pass: (EQUAL (SUBSTITUTE 9 3 (QUOTE (1 2 4 1 3 4 5)) :TEST (FUNCTION >)) (QUOTE (9 9 4 9 3 4 5)))
1896 Pass: (EQUAL (SUBSTITUTE-IF 0 (FUNCTION EVENP) (QUOTE ((1) (2) (3) (4))) :START 2 :KEY (FUNCTION CAR)) (QUOTE ((1) (2) (3) 0)))
1897 Pass: (EQUAL (SUBSTITUTE-IF 9 (FUNCTION ODDP) (QUOTE (1 2 4 1 3 4 5))) (QUOTE (9 2 4 9 9 4 9)))
1898 Pass: (EQUAL (SUBSTITUTE-IF 9 (FUNCTION EVENP) (QUOTE (1 2 4 1 3 4 5)) :COUNT 1 :FROM-END T) (QUOTE (1 2 4 1 3 9 5)))
1899 Pass: (LET ((SOME-THINGS (LIST (QUOTE A) (QUOTE CAR) (QUOTE B) (QUOTE CDR) (QUOTE C)))) (AND (EQUAL (NSUBSTITUTE-IF "function was here" (FUNCTION FBOUNDP) SOME-THINGS :COUNT 1 :FROM-END T) (QUOTE (A CAR B "function was here" C))) (EQUAL SOME-THINGS (QUOTE (A CAR B "function was here" C)))))
1900 Pass: (LET ((ALPHA-TESTER (COPY-SEQ "ab "))) (AND (EQUAL (NSUBSTITUTE-IF-NOT #\z (FUNCTION ALPHA-CHAR-P) ALPHA-TESTER) "abz") (EQUAL ALPHA-TESTER "abz")))
1901 Pass: (EQUAL (SUBSTITUTE (QUOTE A) (QUOTE X) (QUOTE (X Y Z))) (QUOTE (A Y Z)))
1902 Pass: (EQUAL (SUBSTITUTE (QUOTE B) (QUOTE Y) (QUOTE (X Y Z))) (QUOTE (X B Z)))
1903 Pass: (EQUAL (SUBSTITUTE (QUOTE C) (QUOTE Z) (QUOTE (X Y Z))) (QUOTE (X Y C)))
1904 Pass: (EQUAL (SUBSTITUTE (QUOTE A) (QUOTE P) (QUOTE (X Y Z))) (QUOTE (X Y Z)))
1905 Pass: (EQUAL (SUBSTITUTE (QUOTE A) (QUOTE X) (QUOTE NIL)) (QUOTE NIL))
1906 Pass: (EQUAL (SUBSTITUTE #\x #\b (QUOTE (#\a #\b #\c #\d #\e)) :TEST (FUNCTION CHAR<)) (QUOTE (#\a #\b #\x #\x #\x)))
1907 Pass: (EQUAL (SUBSTITUTE #\x #\b (QUOTE (#\a #\b #\c #\d #\e)) :TEST-NOT (COMPLEMENT (FUNCTION CHAR<))) (QUOTE (#\a #\b #\x #\x #\x)))
1908 Pass: (EQUAL (SUBSTITUTE (QUOTE (A)) (QUOTE X) (QUOTE ((X) (Y) (Z))) :KEY (FUNCTION CAR)) (QUOTE ((A) (Y) (Z))))
1909 Pass: (EQUAL (SUBSTITUTE (QUOTE C) (QUOTE B) (QUOTE (A B A B A B A B))) (QUOTE (A C A C A C A C)))
1910 Pass: (EQUAL (SUBSTITUTE (QUOTE A) (QUOTE B) (QUOTE (B B B))) (QUOTE (A A A)))
1911 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F))) (QUOTE (A Z B Z C Z D Z E Z F)))
1912 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :COUNT NIL) (QUOTE (A Z B Z C Z D Z E Z F)))
1913 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :COUNT 0) (QUOTE (A X B X C X D X E X F)))
1914 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :COUNT -100) (QUOTE (A X B X C X D X E X F)))
1915 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :COUNT 1) (QUOTE (A Z B X C X D X E X F)))
1916 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :COUNT 2) (QUOTE (A Z B Z C X D X E X F)))
1917 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :COUNT 3) (QUOTE (A Z B Z C Z D X E X F)))
1918 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :COUNT 4) (QUOTE (A Z B Z C Z D Z E X F)))
1919 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :COUNT 5) (QUOTE (A Z B Z C Z D Z E Z F)))
1920 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :COUNT 6) (QUOTE (A Z B Z C Z D Z E Z F)))
1921 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :COUNT 7) (QUOTE (A Z B Z C Z D Z E Z F)))
1922 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :COUNT NIL :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
1923 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :COUNT 0 :FROM-END T) (QUOTE (A X B X C X D X E X F)))
1924 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :COUNT -100 :FROM-END T) (QUOTE (A X B X C X D X E X F)))
1925 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :COUNT 1 :FROM-END T) (QUOTE (A X B X C X D X E Z F)))
1926 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :COUNT 2 :FROM-END T) (QUOTE (A X B X C X D Z E Z F)))
1927 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :COUNT 3 :FROM-END T) (QUOTE (A X B X C Z D Z E Z F)))
1928 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :COUNT 4 :FROM-END T) (QUOTE (A X B Z C Z D Z E Z F)))
1929 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :COUNT 5 :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
1930 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :COUNT 6 :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
1931 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :COUNT 7 :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
1932 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :START 2 :COUNT 1) (QUOTE (A X B Z C X D X E X F)))
1933 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :START 2 :END NIL :COUNT 1) (QUOTE (A X B Z C X D X E X F)))
1934 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :START 2 :END 6 :COUNT 100) (QUOTE (A X B Z C Z D X E X F)))
1935 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :START 2 :END 11 :COUNT 100) (QUOTE (A X B Z C Z D Z E Z F)))
1936 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :START 2 :END 8 :COUNT 10) (QUOTE (A X B Z C Z D Z E X F)))
1937 Pass: (EQUAL (SUBSTITUTE (QUOTE Z) (QUOTE X) (QUOTE (A X B X C X D X E X F)) :START 2 :END 8 :COUNT 2 :FROM-END T) (QUOTE (A X B X C Z D Z E X F)))
1938 Pass: (EQUAL (SUBSTITUTE #\z #\c (QUOTE (#\a #\b #\c #\d #\e #\f)) :TEST (FUNCTION CHAR<)) (QUOTE (#\a #\b #\c #\z #\z #\z)))
1939 Pass: (EQUAL (SUBSTITUTE #\z #\c (QUOTE (#\a #\b #\c #\d #\e #\f)) :TEST-NOT (COMPLEMENT (FUNCTION CHAR<))) (QUOTE (#\a #\b #\c #\z #\z #\z)))
1940 Pass: (EQUAL (SUBSTITUTE "peace" "war" (QUOTE ("love" "hate" "war" "peace")) :TEST (FUNCTION EQUAL)) (QUOTE ("love" "hate" "peace" "peace")))
1941 Pass: (EQUAL (SUBSTITUTE "peace" "war" (QUOTE ("love" "hate" "war" "peace")) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))) (QUOTE ("love" "hate" "peace" "peace")))
1942 Pass: (EQUAL (SUBSTITUTE "peace" "war" (QUOTE ("war" "War" "WAr" "WAR")) :TEST (FUNCTION STRING-EQUAL)) (QUOTE ("peace" "peace" "peace" "peace")))
1943 Pass: (EQUAL (SUBSTITUTE "peace" "war" (QUOTE ("war" "War" "WAr" "WAR")) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL))) (QUOTE ("peace" "peace" "peace" "peace")))
1944 Pass: (EQUAL (SUBSTITUTE "peace" "WAR" (QUOTE ("war" "War" "WAr" "WAR")) :TEST (FUNCTION STRING=)) (QUOTE ("war" "War" "WAr" "peace")))
1945 Pass: (EQUAL (SUBSTITUTE "peace" "WAR" (QUOTE ("war" "War" "WAr" "WAR")) :TEST-NOT (COMPLEMENT (FUNCTION STRING=))) (QUOTE ("war" "War" "WAr" "peace")))
1946 Pass: (EQUAL (SUBSTITUTE "peace" "WAR" (QUOTE ("war" "War" "WAr" "WAR")) :TEST (FUNCTION STRING=) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("peace" "peace" "peace" "peace")))
1947 Pass: (EQUAL (SUBSTITUTE "peace" "WAR" (QUOTE ("war" "War" "WAr" "WAR")) :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("peace" "peace" "peace" "peace")))
1948 Pass: (EQUAL (SUBSTITUTE "peace" "WAR" (QUOTE ("war" "War" "WAr" "WAR")) :START 1 :END 2 :TEST (FUNCTION STRING=) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "WAr" "WAR")))
1949 Pass: (EQUAL (SUBSTITUTE "peace" "WAR" (QUOTE ("war" "War" "WAr" "WAR")) :START 1 :END 2 :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "WAr" "WAR")))
1950 Pass: (EQUAL (SUBSTITUTE "peace" "WAR" (QUOTE ("war" "War" "WAr" "WAR")) :START 1 :END NIL :TEST (FUNCTION STRING=) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace")))
1951 Pass: (EQUAL (SUBSTITUTE "peace" "WAR" (QUOTE ("war" "War" "WAr" "WAR")) :START 1 :END NIL :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace")))
1952 Pass: (EQUAL (SUBSTITUTE "peace" "war" (QUOTE ("war" "War" "WAr" "WAR")) :TEST (FUNCTION STRING=) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR")))
1953 Pass: (EQUAL (SUBSTITUTE "peace" "war" (QUOTE ("war" "War" "WAr" "WAR")) :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR")))
1954 Pass: (EQUAL (SUBSTITUTE "peace" "WAR" (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 1 :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "WAr" "WAR" "war" "War" "WAr" "WAR")))
1955 Pass: (EQUAL (SUBSTITUTE "peace" "WAR" (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 2 :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "WAR" "war" "War" "WAr" "WAR")))
1956 Pass: (EQUAL (SUBSTITUTE "peace" "WAR" (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 2 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR" "war" "peace" "peace" "WAR")))
1957 Pass: (EQUAL (SUBSTITUTE "peace" "WAR" (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 0 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")))
1958 Pass: (EQUAL (SUBSTITUTE "peace" "WAR" (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT -2 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")))
1959 Pass: (EQUAL (SUBSTITUTE "peace" "WAR" (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT NIL :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
1960 Pass: (EQUAL (SUBSTITUTE "peace" "WAR" (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 6 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
1961 Pass: (EQUAL (SUBSTITUTE "peace" "WAR" (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 7 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
1962 Pass: (EQUAL (SUBSTITUTE "peace" "WAR" (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 100 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
1963 Pass: (EQUALP (SUBSTITUTE (QUOTE A) (QUOTE X) #(X Y Z)) #(A Y Z))
1964 Pass: (EQUALP (SUBSTITUTE (QUOTE B) (QUOTE Y) #(X Y Z)) #(X B Z))
1965 Pass: (EQUALP (SUBSTITUTE (QUOTE C) (QUOTE Z) #(X Y Z)) #(X Y C))
1966 Pass: (EQUALP (SUBSTITUTE (QUOTE A) (QUOTE P) #(X Y Z)) #(X Y Z))
1967 Pass: (EQUALP (SUBSTITUTE (QUOTE A) (QUOTE X) #()) #())
1968 Pass: (EQUALP (SUBSTITUTE #\x #\b #(#\a #\b #\c #\d #\e) :TEST (FUNCTION CHAR<)) #(#\a #\b #\x #\x #\x))
1969 Pass: (EQUALP (SUBSTITUTE #\x #\b #(#\a #\b #\c #\d #\e) :TEST-NOT (COMPLEMENT (FUNCTION CHAR<))) #(#\a #\b #\x #\x #\x))
1970 Pass: (EQUALP (SUBSTITUTE (QUOTE (A)) (QUOTE X) #((X) (Y) (Z)) :KEY (FUNCTION CAR)) #((A) (Y) (Z)))
1971 Pass: (EQUALP (SUBSTITUTE (QUOTE C) (QUOTE B) #(A B A B A B A B)) #(A C A C A C A C))
1972 Pass: (EQUALP (SUBSTITUTE (QUOTE A) (QUOTE B) #(B B B)) #(A A A))
1973 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F)) #(A Z B Z C Z D Z E Z F))
1974 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :COUNT NIL) #(A Z B Z C Z D Z E Z F))
1975 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :COUNT 0) #(A X B X C X D X E X F))
1976 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :COUNT -100) #(A X B X C X D X E X F))
1977 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :COUNT 1) #(A Z B X C X D X E X F))
1978 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :COUNT 2) #(A Z B Z C X D X E X F))
1979 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :COUNT 3) #(A Z B Z C Z D X E X F))
1980 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :COUNT 4) #(A Z B Z C Z D Z E X F))
1981 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :COUNT 5) #(A Z B Z C Z D Z E Z F))
1982 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :COUNT 6) #(A Z B Z C Z D Z E Z F))
1983 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :COUNT 7) #(A Z B Z C Z D Z E Z F))
1984 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :COUNT NIL :FROM-END T) #(A Z B Z C Z D Z E Z F))
1985 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :COUNT 0 :FROM-END T) #(A X B X C X D X E X F))
1986 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :COUNT -100 :FROM-END T) #(A X B X C X D X E X F))
1987 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :COUNT 1 :FROM-END T) #(A X B X C X D X E Z F))
1988 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :COUNT 2 :FROM-END T) #(A X B X C X D Z E Z F))
1989 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :COUNT 3 :FROM-END T) #(A X B X C Z D Z E Z F))
1990 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :COUNT 4 :FROM-END T) #(A X B Z C Z D Z E Z F))
1991 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :COUNT 5 :FROM-END T) #(A Z B Z C Z D Z E Z F))
1992 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :COUNT 6 :FROM-END T) #(A Z B Z C Z D Z E Z F))
1993 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :COUNT 7 :FROM-END T) #(A Z B Z C Z D Z E Z F))
1994 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :START 2 :COUNT 1) #(A X B Z C X D X E X F))
1995 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :START 2 :END NIL :COUNT 1) #(A X B Z C X D X E X F))
1996 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :START 2 :END 6 :COUNT 100) #(A X B Z C Z D X E X F))
1997 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :START 2 :END 11 :COUNT 100) #(A X B Z C Z D Z E Z F))
1998 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :START 2 :END 8 :COUNT 10) #(A X B Z C Z D Z E X F))
1999 Pass: (EQUALP (SUBSTITUTE (QUOTE Z) (QUOTE X) #(A X B X C X D X E X F) :START 2 :END 8 :COUNT 2 :FROM-END T) #(A X B X C Z D Z E X F))
2000 Pass: (EQUALP (SUBSTITUTE #\z #\c #(#\a #\b #\c #\d #\e #\f) :TEST (FUNCTION CHAR<)) #(#\a #\b #\c #\z #\z #\z))
2001 Pass: (EQUALP (SUBSTITUTE #\z #\c #(#\a #\b #\c #\d #\e #\f) :TEST-NOT (COMPLEMENT (FUNCTION CHAR<))) #(#\a #\b #\c #\z #\z #\z))
2002 Pass: (EQUALP (SUBSTITUTE "peace" "war" #("love" "hate" "war" "peace") :TEST (FUNCTION EQUAL)) #("love" "hate" "peace" "peace"))
2003 Pass: (EQUALP (SUBSTITUTE "peace" "war" #("love" "hate" "war" "peace") :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))) #("love" "hate" "peace" "peace"))
2004 Pass: (EQUALP (SUBSTITUTE "peace" "war" #("war" "War" "WAr" "WAR") :TEST (FUNCTION STRING-EQUAL)) #("peace" "peace" "peace" "peace"))
2005 Pass: (EQUALP (SUBSTITUTE "peace" "war" #("war" "War" "WAr" "WAR") :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL))) #("peace" "peace" "peace" "peace"))
2006 Pass: (EQUALP (SUBSTITUTE "peace" "WAR" #("war" "War" "WAr" "WAR") :TEST (FUNCTION STRING=)) #("war" "War" "WAr" "peace"))
2007 Pass: (EQUALP (SUBSTITUTE "peace" "WAR" #("war" "War" "WAr" "WAR") :TEST-NOT (COMPLEMENT (FUNCTION STRING=))) #("war" "War" "WAr" "peace"))
2008 Pass: (EQUALP (SUBSTITUTE "peace" "WAR" #("war" "War" "WAr" "WAR") :TEST (FUNCTION STRING=) :KEY (FUNCTION STRING-UPCASE)) #("peace" "peace" "peace" "peace"))
2009 Pass: (EQUALP (SUBSTITUTE "peace" "WAR" #("war" "War" "WAr" "WAR") :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("peace" "peace" "peace" "peace"))
2010 Pass: (EQUALP (SUBSTITUTE "peace" "WAR" #("war" "War" "WAr" "WAR") :START 1 :END 2 :TEST (FUNCTION STRING=) :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "WAr" "WAR"))
2011 Pass: (EQUALP (SUBSTITUTE "peace" "WAR" #("war" "War" "WAr" "WAR") :START 1 :END 2 :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "WAr" "WAR"))
2012 Pass: (EQUALP (SUBSTITUTE "peace" "WAR" #("war" "War" "WAr" "WAR") :START 1 :END NIL :TEST (FUNCTION STRING=) :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace"))
2013 Pass: (EQUALP (SUBSTITUTE "peace" "WAR" #("war" "War" "WAr" "WAR") :START 1 :END NIL :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace"))
2014 Pass: (EQUALP (SUBSTITUTE "peace" "war" #("war" "War" "WAr" "WAR") :TEST (FUNCTION STRING=) :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR"))
2015 Pass: (EQUALP (SUBSTITUTE "peace" "war" #("war" "War" "WAr" "WAR") :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR"))
2016 Pass: (EQUALP (SUBSTITUTE "peace" "WAR" #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT 1 :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "WAr" "WAR" "war" "War" "WAr" "WAR"))
2017 Pass: (EQUALP (SUBSTITUTE "peace" "WAR" #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT 2 :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "WAR" "war" "War" "WAr" "WAR"))
2018 Pass: (EQUALP (SUBSTITUTE "peace" "WAR" #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT 2 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR" "war" "peace" "peace" "WAR"))
2019 Pass: (EQUALP (SUBSTITUTE "peace" "WAR" #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT 0 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))
2020 Pass: (EQUALP (SUBSTITUTE "peace" "WAR" #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT -2 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))
2021 Pass: (EQUALP (SUBSTITUTE "peace" "WAR" #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT NIL :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2022 Pass: (EQUALP (SUBSTITUTE "peace" "WAR" #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT 6 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2023 Pass: (EQUALP (SUBSTITUTE "peace" "WAR" #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT 7 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2024 Pass: (EQUALP (SUBSTITUTE "peace" "WAR" #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT 100 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2025 Pass: (STRING= (SUBSTITUTE #\A #\a "abcabc") "AbcAbc")
2026 Pass: (STRING= (SUBSTITUTE #\A #\a "") "")
2027 Pass: (STRING= (SUBSTITUTE #\A #\a "xyz") "xyz")
2028 Pass: (STRING= (SUBSTITUTE #\A #\a "aaaaaaaaaa" :START 5 :END NIL) "aaaaaAAAAA")
2029 Pass: (STRING= (SUBSTITUTE #\x #\5 "0123456789" :TEST (FUNCTION CHAR<)) "012345xxxx")
2030 Pass: (STRING= (SUBSTITUTE #\x #\5 "0123456789" :TEST (FUNCTION CHAR>)) "xxxxx56789")
2031 Pass: (STRING= (SUBSTITUTE #\x #\D "abcdefg" :KEY (FUNCTION CHAR-UPCASE) :TEST (FUNCTION CHAR>)) "xxxdefg")
2032 Pass: (STRING= (SUBSTITUTE #\x #\D "abcdefg" :START 1 :END 2 :KEY (FUNCTION CHAR-UPCASE) :TEST (FUNCTION CHAR>)) "axcdefg")
2033 Pass: (STRING= (SUBSTITUTE #\A #\a "aaaaaaaaaa" :COUNT 2) "AAaaaaaaaa")
2034 Pass: (STRING= (SUBSTITUTE #\A #\a "aaaaaaaaaa" :COUNT -1) "aaaaaaaaaa")
2035 Pass: (STRING= (SUBSTITUTE #\A #\a "aaaaaaaaaa" :COUNT 0) "aaaaaaaaaa")
2036 Pass: (STRING= (SUBSTITUTE #\A #\a "aaaaaaaaaa" :COUNT NIL) "AAAAAAAAAA")
2037 Pass: (STRING= (SUBSTITUTE #\A #\a "aaaaaaaaaa" :COUNT 100) "AAAAAAAAAA")
2038 Pass: (STRING= (SUBSTITUTE #\A #\a "aaaaaaaaaa" :COUNT 9) "AAAAAAAAAa")
2039 Pass: (STRING= (SUBSTITUTE #\A #\a "aaaaaaaaaa" :COUNT 9 :FROM-END T) "aAAAAAAAAA")
2040 Pass: (STRING= (SUBSTITUTE #\A #\a "aaaaaaaaaa" :START 2 :END 8 :COUNT 3) "aaAAAaaaaa")
2041 Pass: (STRING= (SUBSTITUTE #\A #\a "aaaaaaaaaa" :START 2 :END 8 :FROM-END T :COUNT 3) "aaaaaAAAaa")
2042 Pass: (STRING= (SUBSTITUTE #\x #\A "aaaaaaaaaa" :START 2 :END 8 :FROM-END T :COUNT 3) "aaaaaaaaaa")
2043 Pass: (STRING= (SUBSTITUTE #\X #\A "aaaaaaaaaa" :START 2 :END 8 :FROM-END T :KEY (FUNCTION CHAR-UPCASE) :COUNT 3) "aaaaaXXXaa")
2044 Pass: (STRING= (SUBSTITUTE #\X #\D "abcdefghij" :START 2 :END 8 :FROM-END T :KEY (FUNCTION CHAR-UPCASE) :TEST (FUNCTION CHAR<) :COUNT 3) "abcdeXXXij")
2045 Pass: (EQUALP (SUBSTITUTE 0 1 #(1 1 1 1)) #(0 0 0 0))
2046 Pass: (EQUALP (SUBSTITUTE 0 1 #(1 1 1 1) :START 1 :END NIL) #(1 0 0 0))
2047 Pass: (EQUALP (SUBSTITUTE 0 1 #(1 1 1 1) :START 1 :END 3) #(1 0 0 1))
2048 Pass: (EQUALP (SUBSTITUTE 0 1 #(1 1 1 1 1 1 1 1) :START 1 :END 7) #(1 0 0 0 0 0 0 1))
2049 Pass: (EQUALP (SUBSTITUTE 0 1 #(1 1 1 1 1 1 1 1) :START 1 :END 7 :COUNT 3) #(1 0 0 0 1 1 1 1))
2050 Pass: (EQUALP (SUBSTITUTE 0 1 #(1 1 1 1 1 1 1 1) :START 1 :END 7 :COUNT 3 :FROM-END T) #(1 1 1 1 0 0 0 1))
2051 Pass: (EQUALP (SUBSTITUTE 1 1 #(1 0 1 0 1 0 1 0) :START 1 :END 7 :COUNT 3 :FROM-END T :KEY (FUNCTION (LAMBDA (X) (IF (ZEROP X) 1 0)))) #(1 1 1 1 1 1 1 0))
2052 Pass: (EQUALP (SUBSTITUTE 1 1 #(1 0 1 0 1 0 1 0) :START 1 :END 7 :COUNT 3 :FROM-END T :KEY (FUNCTION (LAMBDA (X) (IF (ZEROP X) 1 0))) :TEST (FUNCTION >=)) #(1 0 1 0 1 1 1 0))
2053 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE A) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (X Y Z))) (QUOTE (A Y Z)))
2054 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE B) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE Y)))) (QUOTE (X Y Z))) (QUOTE (X B Z)))
2055 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE C) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE Z)))) (QUOTE (X Y Z))) (QUOTE (X Y C)))
2056 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE A) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE P)))) (QUOTE (X Y Z))) (QUOTE (X Y Z)))
2057 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE A) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE NIL)) (QUOTE NIL))
2058 Pass: (EQUAL (SUBSTITUTE-IF #\x (FUNCTION (LAMBDA (ARG) (CHAR< #\b ARG))) (QUOTE (#\a #\b #\c #\d #\e))) (QUOTE (#\a #\b #\x #\x #\x)))
2059 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE (A)) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE ((X) (Y) (Z))) :KEY (FUNCTION CAR)) (QUOTE ((A) (Y) (Z))))
2060 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE C) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE B)))) (QUOTE (A B A B A B A B))) (QUOTE (A C A C A C A C)))
2061 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE A) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE B)))) (QUOTE (B B B))) (QUOTE (A A A)))
2062 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F))) (QUOTE (A Z B Z C Z D Z E Z F)))
2063 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :COUNT NIL) (QUOTE (A Z B Z C Z D Z E Z F)))
2064 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :COUNT 0) (QUOTE (A X B X C X D X E X F)))
2065 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :COUNT -100) (QUOTE (A X B X C X D X E X F)))
2066 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :COUNT 1) (QUOTE (A Z B X C X D X E X F)))
2067 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :COUNT 2) (QUOTE (A Z B Z C X D X E X F)))
2068 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :COUNT 3) (QUOTE (A Z B Z C Z D X E X F)))
2069 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :COUNT 4) (QUOTE (A Z B Z C Z D Z E X F)))
2070 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :COUNT 5) (QUOTE (A Z B Z C Z D Z E Z F)))
2071 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :COUNT 6) (QUOTE (A Z B Z C Z D Z E Z F)))
2072 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :COUNT 7) (QUOTE (A Z B Z C Z D Z E Z F)))
2073 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :COUNT NIL :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
2074 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :COUNT 0 :FROM-END T) (QUOTE (A X B X C X D X E X F)))
2075 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :COUNT -100 :FROM-END T) (QUOTE (A X B X C X D X E X F)))
2076 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :COUNT 1 :FROM-END T) (QUOTE (A X B X C X D X E Z F)))
2077 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :COUNT 2 :FROM-END T) (QUOTE (A X B X C X D Z E Z F)))
2078 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :COUNT 3 :FROM-END T) (QUOTE (A X B X C Z D Z E Z F)))
2079 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :COUNT 4 :FROM-END T) (QUOTE (A X B Z C Z D Z E Z F)))
2080 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :COUNT 5 :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
2081 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :COUNT 6 :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
2082 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :COUNT 7 :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
2083 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :START 2 :COUNT 1) (QUOTE (A X B Z C X D X E X F)))
2084 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :START 2 :END NIL :COUNT 1) (QUOTE (A X B Z C X D X E X F)))
2085 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :START 2 :END 6 :COUNT 100) (QUOTE (A X B Z C Z D X E X F)))
2086 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :START 2 :END 11 :COUNT 100) (QUOTE (A X B Z C Z D Z E Z F)))
2087 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :START 2 :END 8 :COUNT 10) (QUOTE (A X B Z C Z D Z E X F)))
2088 Pass: (EQUAL (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (QUOTE (A X B X C X D X E X F)) :START 2 :END 8 :COUNT 2 :FROM-END T) (QUOTE (A X B X C Z D Z E X F)))
2089 Pass: (EQUAL (SUBSTITUTE-IF #\z (FUNCTION (LAMBDA (ARG) (CHAR< #\c ARG))) (QUOTE (#\a #\b #\c #\d #\e #\f))) (QUOTE (#\a #\b #\c #\z #\z #\z)))
2090 Pass: (EQUAL (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (EQUAL "war" ARG))) (QUOTE ("love" "hate" "war" "peace"))) (QUOTE ("love" "hate" "peace" "peace")))
2091 Pass: (EQUAL (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING-EQUAL "war" ARG))) (QUOTE ("war" "War" "WAr" "WAR"))) (QUOTE ("peace" "peace" "peace" "peace")))
2092 Pass: (EQUAL (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (QUOTE ("war" "War" "WAr" "WAR")) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("peace" "peace" "peace" "peace")))
2093 Pass: (EQUAL (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (QUOTE ("war" "War" "WAr" "WAR")) :START 1 :END 2 :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "WAr" "WAR")))
2094 Pass: (EQUAL (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (QUOTE ("war" "War" "WAr" "WAR")) :START 1 :END NIL :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace")))
2095 Pass: (EQUAL (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "war" ARG))) (QUOTE ("war" "War" "WAr" "WAR")) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR")))
2096 Pass: (EQUAL (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 1 :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "WAr" "WAR" "war" "War" "WAr" "WAR")))
2097 Pass: (EQUAL (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 2 :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "WAR" "war" "War" "WAr" "WAR")))
2098 Pass: (EQUAL (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 2 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR" "war" "peace" "peace" "WAR")))
2099 Pass: (EQUAL (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 0 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")))
2100 Pass: (EQUAL (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT -2 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")))
2101 Pass: (EQUAL (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT NIL :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
2102 Pass: (EQUAL (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 6 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
2103 Pass: (EQUAL (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 7 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
2104 Pass: (EQUAL (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 100 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
2105 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE A) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(X Y Z)) #(A Y Z))
2106 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE B) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE Y)))) #(X Y Z)) #(X B Z))
2107 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE C) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE Z)))) #(X Y Z)) #(X Y C))
2108 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE A) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE P)))) #(X Y Z)) #(X Y Z))
2109 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE A) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #()) #())
2110 Pass: (EQUALP (SUBSTITUTE-IF #\x (FUNCTION (LAMBDA (ARG) (CHAR< #\b ARG))) #(#\a #\b #\c #\d #\e)) #(#\a #\b #\x #\x #\x))
2111 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE (A)) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #((X) (Y) (Z)) :KEY (FUNCTION CAR)) #((A) (Y) (Z)))
2112 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE C) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE B)))) #(A B A B A B A B)) #(A C A C A C A C))
2113 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE A) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE B)))) #(B B B)) #(A A A))
2114 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F)) #(A Z B Z C Z D Z E Z F))
2115 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :COUNT NIL) #(A Z B Z C Z D Z E Z F))
2116 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :COUNT 0) #(A X B X C X D X E X F))
2117 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :COUNT -100) #(A X B X C X D X E X F))
2118 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :COUNT 1) #(A Z B X C X D X E X F))
2119 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :COUNT 2) #(A Z B Z C X D X E X F))
2120 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :COUNT 3) #(A Z B Z C Z D X E X F))
2121 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :COUNT 4) #(A Z B Z C Z D Z E X F))
2122 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :COUNT 5) #(A Z B Z C Z D Z E Z F))
2123 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :COUNT 6) #(A Z B Z C Z D Z E Z F))
2124 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :COUNT 7) #(A Z B Z C Z D Z E Z F))
2125 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :COUNT NIL :FROM-END T) #(A Z B Z C Z D Z E Z F))
2126 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :COUNT 0 :FROM-END T) #(A X B X C X D X E X F))
2127 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :COUNT -100 :FROM-END T) #(A X B X C X D X E X F))
2128 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :COUNT 1 :FROM-END T) #(A X B X C X D X E Z F))
2129 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :COUNT 2 :FROM-END T) #(A X B X C X D Z E Z F))
2130 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :COUNT 3 :FROM-END T) #(A X B X C Z D Z E Z F))
2131 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :COUNT 4 :FROM-END T) #(A X B Z C Z D Z E Z F))
2132 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :COUNT 5 :FROM-END T) #(A Z B Z C Z D Z E Z F))
2133 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :COUNT 6 :FROM-END T) #(A Z B Z C Z D Z E Z F))
2134 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :COUNT 7 :FROM-END T) #(A Z B Z C Z D Z E Z F))
2135 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :START 2 :COUNT 1) #(A X B Z C X D X E X F))
2136 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :START 2 :END NIL :COUNT 1) #(A X B Z C X D X E X F))
2137 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :START 2 :END 6 :COUNT 100) #(A X B Z C Z D X E X F))
2138 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :START 2 :END 11 :COUNT 100) #(A X B Z C Z D Z E Z F))
2139 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :START 2 :END 8 :COUNT 10) #(A X B Z C Z D Z E X F))
2140 Pass: (EQUALP (SUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) #(A X B X C X D X E X F) :START 2 :END 8 :COUNT 2 :FROM-END T) #(A X B X C Z D Z E X F))
2141 Pass: (EQUALP (SUBSTITUTE-IF #\z (FUNCTION (LAMBDA (ARG) (CHAR< #\c ARG))) #(#\a #\b #\c #\d #\e #\f)) #(#\a #\b #\c #\z #\z #\z))
2142 Pass: (EQUALP (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (EQUAL "war" ARG))) #("love" "hate" "war" "peace")) #("love" "hate" "peace" "peace"))
2143 Pass: (EQUALP (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING-EQUAL "war" ARG))) #("war" "War" "WAr" "WAR")) #("peace" "peace" "peace" "peace"))
2144 Pass: (EQUALP (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) #("war" "War" "WAr" "WAR") :KEY (FUNCTION STRING-UPCASE)) #("peace" "peace" "peace" "peace"))
2145 Pass: (EQUALP (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) #("war" "War" "WAr" "WAR") :START 1 :END 2 :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "WAr" "WAR"))
2146 Pass: (EQUALP (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) #("war" "War" "WAr" "WAR") :START 1 :END NIL :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace"))
2147 Pass: (EQUALP (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "war" ARG))) #("war" "War" "WAr" "WAR") :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR"))
2148 Pass: (EQUALP (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT 1 :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "WAr" "WAR" "war" "War" "WAr" "WAR"))
2149 Pass: (EQUALP (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT 2 :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "WAR" "war" "War" "WAr" "WAR"))
2150 Pass: (EQUALP (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT 2 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR" "war" "peace" "peace" "WAR"))
2151 Pass: (EQUALP (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT 0 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))
2152 Pass: (EQUALP (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT -2 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))
2153 Pass: (EQUALP (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT NIL :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2154 Pass: (EQUALP (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT 6 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2155 Pass: (EQUALP (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT 7 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2156 Pass: (EQUALP (SUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT 100 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2157 Pass: (STRING= (SUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) "abcabc") "AbcAbc")
2158 Pass: (STRING= (SUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) "") "")
2159 Pass: (STRING= (SUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) "xyz") "xyz")
2160 Pass: (STRING= (SUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) "aaaaaaaaaa" :START 5 :END NIL) "aaaaaAAAAA")
2161 Pass: (STRING= (SUBSTITUTE-IF #\x (FUNCTION (LAMBDA (ARG) (CHAR< #\5 ARG))) "0123456789") "012345xxxx")
2162 Pass: (STRING= (SUBSTITUTE-IF #\x (FUNCTION (LAMBDA (ARG) (CHAR> #\5 ARG))) "0123456789") "xxxxx56789")
2163 Pass: (STRING= (SUBSTITUTE-IF #\x (FUNCTION (LAMBDA (ARG) (CHAR> #\D ARG))) "abcdefg" :KEY (FUNCTION CHAR-UPCASE)) "xxxdefg")
2164 Pass: (STRING= (SUBSTITUTE-IF #\x (FUNCTION (LAMBDA (ARG) (CHAR> #\D ARG))) "abcdefg" :START 1 :END 2 :KEY (FUNCTION CHAR-UPCASE)) "axcdefg")
2165 Pass: (STRING= (SUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) "aaaaaaaaaa" :COUNT 2) "AAaaaaaaaa")
2166 Pass: (STRING= (SUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) "aaaaaaaaaa" :COUNT -1) "aaaaaaaaaa")
2167 Pass: (STRING= (SUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) "aaaaaaaaaa" :COUNT 0) "aaaaaaaaaa")
2168 Pass: (STRING= (SUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) "aaaaaaaaaa" :COUNT NIL) "AAAAAAAAAA")
2169 Pass: (STRING= (SUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) "aaaaaaaaaa" :COUNT 100) "AAAAAAAAAA")
2170 Pass: (STRING= (SUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) "aaaaaaaaaa" :COUNT 9) "AAAAAAAAAa")
2171 Pass: (STRING= (SUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) "aaaaaaaaaa" :COUNT 9 :FROM-END T) "aAAAAAAAAA")
2172 Pass: (STRING= (SUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) "aaaaaaaaaa" :START 2 :END 8 :COUNT 3) "aaAAAaaaaa")
2173 Pass: (STRING= (SUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) "aaaaaaaaaa" :START 2 :END 8 :FROM-END T :COUNT 3) "aaaaaAAAaa")
2174 Pass: (STRING= (SUBSTITUTE-IF #\x (FUNCTION (LAMBDA (ARG) (EQL #\A ARG))) "aaaaaaaaaa" :START 2 :END 8 :FROM-END T :COUNT 3) "aaaaaaaaaa")
2175 Pass: (STRING= (SUBSTITUTE-IF #\X (FUNCTION (LAMBDA (ARG) (EQL #\A ARG))) "aaaaaaaaaa" :START 2 :END 8 :FROM-END T :KEY (FUNCTION CHAR-UPCASE) :COUNT 3) "aaaaaXXXaa")
2176 Pass: (STRING= (SUBSTITUTE-IF #\X (FUNCTION (LAMBDA (ARG) (CHAR< #\D ARG))) "abcdefghij" :START 2 :END 8 :FROM-END T :KEY (FUNCTION CHAR-UPCASE) :COUNT 3) "abcdeXXXij")
2177 Pass: (EQUALP (SUBSTITUTE-IF 0 (FUNCTION (LAMBDA (ARG) (= 1 ARG))) #(1 1 1 1)) #(0 0 0 0))
2178 Pass: (EQUALP (SUBSTITUTE-IF 0 (FUNCTION (LAMBDA (ARG) (= 1 ARG))) #(1 1 1 1) :START 1 :END NIL) #(1 0 0 0))
2179 Pass: (EQUALP (SUBSTITUTE-IF 0 (FUNCTION (LAMBDA (ARG) (= 1 ARG))) #(1 1 1 1) :START 1 :END 3) #(1 0 0 1))
2180 Pass: (EQUALP (SUBSTITUTE-IF 0 (FUNCTION (LAMBDA (ARG) (= 1 ARG))) #(1 1 1 1 1 1 1 1) :START 1 :END 7) #(1 0 0 0 0 0 0 1))
2181 Pass: (EQUALP (SUBSTITUTE-IF 0 (FUNCTION (LAMBDA (ARG) (= 1 ARG))) #(1 1 1 1 1 1 1 1) :START 1 :END 7 :COUNT 3) #(1 0 0 0 1 1 1 1))
2182 Pass: (EQUALP (SUBSTITUTE-IF 0 (FUNCTION (LAMBDA (ARG) (= 1 ARG))) #(1 1 1 1 1 1 1 1) :START 1 :END 7 :COUNT 3 :FROM-END T) #(1 1 1 1 0 0 0 1))
2183 Pass: (EQUALP (SUBSTITUTE-IF 1 (FUNCTION (LAMBDA (ARG) (= 1 ARG))) #(1 0 1 0 1 0 1 0) :START 1 :END 7 :COUNT 3 :FROM-END T :KEY (FUNCTION (LAMBDA (X) (IF (ZEROP X) 1 0)))) #(1 1 1 1 1 1 1 0))
2184 Pass: (EQUALP (SUBSTITUTE-IF 1 (FUNCTION (LAMBDA (ARG) (>= 1 ARG))) #(1 0 1 0 1 0 1 0) :START 1 :END 7 :COUNT 3 :FROM-END T :KEY (FUNCTION (LAMBDA (X) (IF (ZEROP X) 1 0)))) #(1 0 1 0 1 1 1 0))
2185 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (X Y Z))) (QUOTE (A Y Z)))
2186 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE B) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE Y))))) (QUOTE (X Y Z))) (QUOTE (X B Z)))
2187 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE C) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE Z))))) (QUOTE (X Y Z))) (QUOTE (X Y C)))
2188 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE P))))) (QUOTE (X Y Z))) (QUOTE (X Y Z)))
2189 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE NIL)) (QUOTE NIL))
2190 Pass: (EQUAL (SUBSTITUTE-IF-NOT #\x (FUNCTION (LAMBDA (ARG) (NOT (CHAR< #\b ARG)))) (QUOTE (#\a #\b #\c #\d #\e))) (QUOTE (#\a #\b #\x #\x #\x)))
2191 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE (A)) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE ((X) (Y) (Z))) :KEY (FUNCTION CAR)) (QUOTE ((A) (Y) (Z))))
2192 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE C) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE B))))) (QUOTE (A B A B A B A B))) (QUOTE (A C A C A C A C)))
2193 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE B))))) (QUOTE (B B B))) (QUOTE (A A A)))
2194 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F))) (QUOTE (A Z B Z C Z D Z E Z F)))
2195 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :COUNT NIL) (QUOTE (A Z B Z C Z D Z E Z F)))
2196 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :COUNT 0) (QUOTE (A X B X C X D X E X F)))
2197 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :COUNT -100) (QUOTE (A X B X C X D X E X F)))
2198 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :COUNT 1) (QUOTE (A Z B X C X D X E X F)))
2199 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :COUNT 2) (QUOTE (A Z B Z C X D X E X F)))
2200 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :COUNT 3) (QUOTE (A Z B Z C Z D X E X F)))
2201 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :COUNT 4) (QUOTE (A Z B Z C Z D Z E X F)))
2202 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :COUNT 5) (QUOTE (A Z B Z C Z D Z E Z F)))
2203 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :COUNT 6) (QUOTE (A Z B Z C Z D Z E Z F)))
2204 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :COUNT 7) (QUOTE (A Z B Z C Z D Z E Z F)))
2205 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :COUNT NIL :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
2206 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :COUNT 0 :FROM-END T) (QUOTE (A X B X C X D X E X F)))
2207 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :COUNT -100 :FROM-END T) (QUOTE (A X B X C X D X E X F)))
2208 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :COUNT 1 :FROM-END T) (QUOTE (A X B X C X D X E Z F)))
2209 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :COUNT 2 :FROM-END T) (QUOTE (A X B X C X D Z E Z F)))
2210 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :COUNT 3 :FROM-END T) (QUOTE (A X B X C Z D Z E Z F)))
2211 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :COUNT 4 :FROM-END T) (QUOTE (A X B Z C Z D Z E Z F)))
2212 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :COUNT 5 :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
2213 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :COUNT 6 :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
2214 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :COUNT 7 :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
2215 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :START 2 :COUNT 1) (QUOTE (A X B Z C X D X E X F)))
2216 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :START 2 :END NIL :COUNT 1) (QUOTE (A X B Z C X D X E X F)))
2217 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :START 2 :END 6 :COUNT 100) (QUOTE (A X B Z C Z D X E X F)))
2218 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :START 2 :END 11 :COUNT 100) (QUOTE (A X B Z C Z D Z E Z F)))
2219 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :START 2 :END 8 :COUNT 10) (QUOTE (A X B Z C Z D Z E X F)))
2220 Pass: (EQUAL (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (QUOTE (A X B X C X D X E X F)) :START 2 :END 8 :COUNT 2 :FROM-END T) (QUOTE (A X B X C Z D Z E X F)))
2221 Pass: (EQUAL (SUBSTITUTE-IF-NOT #\z (FUNCTION (LAMBDA (ARG) (NOT (CHAR< #\c ARG)))) (QUOTE (#\a #\b #\c #\d #\e #\f))) (QUOTE (#\a #\b #\c #\z #\z #\z)))
2222 Pass: (EQUAL (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (EQUAL "war" ARG)))) (QUOTE ("love" "hate" "war" "peace"))) (QUOTE ("love" "hate" "peace" "peace")))
2223 Pass: (EQUAL (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL "war" ARG)))) (QUOTE ("war" "War" "WAr" "WAR"))) (QUOTE ("peace" "peace" "peace" "peace")))
2224 Pass: (EQUAL (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (QUOTE ("war" "War" "WAr" "WAR")) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("peace" "peace" "peace" "peace")))
2225 Pass: (EQUAL (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (QUOTE ("war" "War" "WAr" "WAR")) :START 1 :END 2 :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "WAr" "WAR")))
2226 Pass: (EQUAL (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (QUOTE ("war" "War" "WAr" "WAR")) :START 1 :END NIL :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace")))
2227 Pass: (EQUAL (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "war" ARG)))) (QUOTE ("war" "War" "WAr" "WAR")) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR")))
2228 Pass: (EQUAL (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 1 :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "WAr" "WAR" "war" "War" "WAr" "WAR")))
2229 Pass: (EQUAL (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 2 :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "WAR" "war" "War" "WAr" "WAR")))
2230 Pass: (EQUAL (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 2 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR" "war" "peace" "peace" "WAR")))
2231 Pass: (EQUAL (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 0 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")))
2232 Pass: (EQUAL (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT -2 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")))
2233 Pass: (EQUAL (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT NIL :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
2234 Pass: (EQUAL (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 6 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
2235 Pass: (EQUAL (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 7 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
2236 Pass: (EQUAL (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 100 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
2237 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(X Y Z)) #(A Y Z))
2238 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE B) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE Y))))) #(X Y Z)) #(X B Z))
2239 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE C) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE Z))))) #(X Y Z)) #(X Y C))
2240 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE P))))) #(X Y Z)) #(X Y Z))
2241 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #()) #())
2242 Pass: (EQUALP (SUBSTITUTE-IF-NOT #\x (FUNCTION (LAMBDA (ARG) (NOT (CHAR< #\b ARG)))) #(#\a #\b #\c #\d #\e)) #(#\a #\b #\x #\x #\x))
2243 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE (A)) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #((X) (Y) (Z)) :KEY (FUNCTION CAR)) #((A) (Y) (Z)))
2244 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE C) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE B))))) #(A B A B A B A B)) #(A C A C A C A C))
2245 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE B))))) #(B B B)) #(A A A))
2246 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F)) #(A Z B Z C Z D Z E Z F))
2247 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :COUNT NIL) #(A Z B Z C Z D Z E Z F))
2248 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :COUNT 0) #(A X B X C X D X E X F))
2249 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :COUNT -100) #(A X B X C X D X E X F))
2250 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :COUNT 1) #(A Z B X C X D X E X F))
2251 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :COUNT 2) #(A Z B Z C X D X E X F))
2252 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :COUNT 3) #(A Z B Z C Z D X E X F))
2253 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :COUNT 4) #(A Z B Z C Z D Z E X F))
2254 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :COUNT 5) #(A Z B Z C Z D Z E Z F))
2255 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :COUNT 6) #(A Z B Z C Z D Z E Z F))
2256 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :COUNT 7) #(A Z B Z C Z D Z E Z F))
2257 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :COUNT NIL :FROM-END T) #(A Z B Z C Z D Z E Z F))
2258 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :COUNT 0 :FROM-END T) #(A X B X C X D X E X F))
2259 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :COUNT -100 :FROM-END T) #(A X B X C X D X E X F))
2260 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :COUNT 1 :FROM-END T) #(A X B X C X D X E Z F))
2261 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :COUNT 2 :FROM-END T) #(A X B X C X D Z E Z F))
2262 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :COUNT 3 :FROM-END T) #(A X B X C Z D Z E Z F))
2263 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :COUNT 4 :FROM-END T) #(A X B Z C Z D Z E Z F))
2264 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :COUNT 5 :FROM-END T) #(A Z B Z C Z D Z E Z F))
2265 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :COUNT 6 :FROM-END T) #(A Z B Z C Z D Z E Z F))
2266 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :COUNT 7 :FROM-END T) #(A Z B Z C Z D Z E Z F))
2267 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :START 2 :COUNT 1) #(A X B Z C X D X E X F))
2268 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :START 2 :END NIL :COUNT 1) #(A X B Z C X D X E X F))
2269 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :START 2 :END 6 :COUNT 100) #(A X B Z C Z D X E X F))
2270 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :START 2 :END 11 :COUNT 100) #(A X B Z C Z D Z E Z F))
2271 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :START 2 :END 8 :COUNT 10) #(A X B Z C Z D Z E X F))
2272 Pass: (EQUALP (SUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) #(A X B X C X D X E X F) :START 2 :END 8 :COUNT 2 :FROM-END T) #(A X B X C Z D Z E X F))
2273 Pass: (EQUALP (SUBSTITUTE-IF-NOT #\z (FUNCTION (LAMBDA (ARG) (NOT (CHAR< #\c ARG)))) #(#\a #\b #\c #\d #\e #\f)) #(#\a #\b #\c #\z #\z #\z))
2274 Pass: (EQUALP (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (EQUAL "war" ARG)))) #("love" "hate" "war" "peace")) #("love" "hate" "peace" "peace"))
2275 Pass: (EQUALP (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL "war" ARG)))) #("war" "War" "WAr" "WAR")) #("peace" "peace" "peace" "peace"))
2276 Pass: (EQUALP (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) #("war" "War" "WAr" "WAR") :KEY (FUNCTION STRING-UPCASE)) #("peace" "peace" "peace" "peace"))
2277 Pass: (EQUALP (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) #("war" "War" "WAr" "WAR") :START 1 :END 2 :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "WAr" "WAR"))
2278 Pass: (EQUALP (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) #("war" "War" "WAr" "WAR") :START 1 :END NIL :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace"))
2279 Pass: (EQUALP (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "war" ARG)))) #("war" "War" "WAr" "WAR") :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR"))
2280 Pass: (EQUALP (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT 1 :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "WAr" "WAR" "war" "War" "WAr" "WAR"))
2281 Pass: (EQUALP (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT 2 :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "WAR" "war" "War" "WAr" "WAR"))
2282 Pass: (EQUALP (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT 2 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR" "war" "peace" "peace" "WAR"))
2283 Pass: (EQUALP (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT 0 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))
2284 Pass: (EQUALP (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT -2 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))
2285 Pass: (EQUALP (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT NIL :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2286 Pass: (EQUALP (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT 6 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2287 Pass: (EQUALP (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT 7 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2288 Pass: (EQUALP (SUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR") :START 1 :END 7 :COUNT 100 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2289 Pass: (STRING= (SUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) "abcabc") "AbcAbc")
2290 Pass: (STRING= (SUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) "") "")
2291 Pass: (STRING= (SUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) "xyz") "xyz")
2292 Pass: (STRING= (SUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) "aaaaaaaaaa" :START 5 :END NIL) "aaaaaAAAAA")
2293 Pass: (STRING= (SUBSTITUTE-IF-NOT #\x (FUNCTION (LAMBDA (ARG) (NOT (CHAR< #\5 ARG)))) "0123456789") "012345xxxx")
2294 Pass: (STRING= (SUBSTITUTE-IF-NOT #\x (FUNCTION (LAMBDA (ARG) (NOT (CHAR> #\5 ARG)))) "0123456789") "xxxxx56789")
2295 Pass: (STRING= (SUBSTITUTE-IF-NOT #\x (FUNCTION (LAMBDA (ARG) (NOT (CHAR> #\D ARG)))) "abcdefg" :KEY (FUNCTION CHAR-UPCASE)) "xxxdefg")
2296 Pass: (STRING= (SUBSTITUTE-IF-NOT #\x (FUNCTION (LAMBDA (ARG) (NOT (CHAR> #\D ARG)))) "abcdefg" :START 1 :END 2 :KEY (FUNCTION CHAR-UPCASE)) "axcdefg")
2297 Pass: (STRING= (SUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) "aaaaaaaaaa" :COUNT 2) "AAaaaaaaaa")
2298 Pass: (STRING= (SUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) "aaaaaaaaaa" :COUNT -1) "aaaaaaaaaa")
2299 Pass: (STRING= (SUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) "aaaaaaaaaa" :COUNT 0) "aaaaaaaaaa")
2300 Pass: (STRING= (SUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) "aaaaaaaaaa" :COUNT NIL) "AAAAAAAAAA")
2301 Pass: (STRING= (SUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) "aaaaaaaaaa" :COUNT 100) "AAAAAAAAAA")
2302 Pass: (STRING= (SUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) "aaaaaaaaaa" :COUNT 9) "AAAAAAAAAa")
2303 Pass: (STRING= (SUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) "aaaaaaaaaa" :COUNT 9 :FROM-END T) "aAAAAAAAAA")
2304 Pass: (STRING= (SUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) "aaaaaaaaaa" :START 2 :END 8 :COUNT 3) "aaAAAaaaaa")
2305 Pass: (STRING= (SUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) "aaaaaaaaaa" :START 2 :END 8 :FROM-END T :COUNT 3) "aaaaaAAAaa")
2306 Pass: (STRING= (SUBSTITUTE-IF-NOT #\x (FUNCTION (LAMBDA (ARG) (NOT (EQL #\A ARG)))) "aaaaaaaaaa" :START 2 :END 8 :FROM-END T :COUNT 3) "aaaaaaaaaa")
2307 Pass: (STRING= (SUBSTITUTE-IF-NOT #\X (FUNCTION (LAMBDA (ARG) (NOT (EQL #\A ARG)))) "aaaaaaaaaa" :START 2 :END 8 :FROM-END T :KEY (FUNCTION CHAR-UPCASE) :COUNT 3) "aaaaaXXXaa")
2308 Pass: (STRING= (SUBSTITUTE-IF-NOT #\X (FUNCTION (LAMBDA (ARG) (NOT (CHAR< #\D ARG)))) "abcdefghij" :START 2 :END 8 :FROM-END T :KEY (FUNCTION CHAR-UPCASE) :COUNT 3) "abcdeXXXij")
2309 Pass: (EQUALP (SUBSTITUTE-IF-NOT 0 (FUNCTION (LAMBDA (ARG) (NOT (= 1 ARG)))) #(1 1 1 1)) #(0 0 0 0))
2310 Pass: (EQUALP (SUBSTITUTE-IF-NOT 0 (FUNCTION (LAMBDA (ARG) (NOT (= 1 ARG)))) #(1 1 1 1) :START 1 :END NIL) #(1 0 0 0))
2311 Pass: (EQUALP (SUBSTITUTE-IF-NOT 0 (FUNCTION (LAMBDA (ARG) (NOT (= 1 ARG)))) #(1 1 1 1) :START 1 :END 3) #(1 0 0 1))
2312 Pass: (EQUALP (SUBSTITUTE-IF-NOT 0 (FUNCTION (LAMBDA (ARG) (NOT (= 1 ARG)))) #(1 1 1 1 1 1 1 1) :START 1 :END 7) #(1 0 0 0 0 0 0 1))
2313 Pass: (EQUALP (SUBSTITUTE-IF-NOT 0 (FUNCTION (LAMBDA (ARG) (NOT (= 1 ARG)))) #(1 1 1 1 1 1 1 1) :START 1 :END 7 :COUNT 3) #(1 0 0 0 1 1 1 1))
2314 Pass: (EQUALP (SUBSTITUTE-IF-NOT 0 (FUNCTION (LAMBDA (ARG) (NOT (= 1 ARG)))) #(1 1 1 1 1 1 1 1) :START 1 :END 7 :COUNT 3 :FROM-END T) #(1 1 1 1 0 0 0 1))
2315 Pass: (EQUALP (SUBSTITUTE-IF-NOT 1 (FUNCTION (LAMBDA (ARG) (NOT (= 1 ARG)))) #(1 0 1 0 1 0 1 0) :START 1 :END 7 :COUNT 3 :FROM-END T :KEY (FUNCTION (LAMBDA (X) (IF (ZEROP X) 1 0)))) #(1 1 1 1 1 1 1 0))
2316 Pass: (EQUALP (SUBSTITUTE-IF-NOT 1 (FUNCTION (LAMBDA (ARG) (NOT (>= 1 ARG)))) #(1 0 1 0 1 0 1 0) :START 1 :END 7 :COUNT 3 :FROM-END T :KEY (FUNCTION (LAMBDA (X) (IF (ZEROP X) 1 0)))) #(1 0 1 0 1 1 1 0))
2317 Pass: (EQUAL (NSUBSTITUTE (QUOTE A) (QUOTE X) (COPY-SEQ (QUOTE (X Y Z)))) (QUOTE (A Y Z)))
2318 Pass: (EQUAL (NSUBSTITUTE (QUOTE B) (QUOTE Y) (COPY-SEQ (QUOTE (X Y Z)))) (QUOTE (X B Z)))
2319 Pass: (EQUAL (NSUBSTITUTE (QUOTE C) (QUOTE Z) (COPY-SEQ (QUOTE (X Y Z)))) (QUOTE (X Y C)))
2320 Pass: (EQUAL (NSUBSTITUTE (QUOTE A) (QUOTE P) (COPY-SEQ (QUOTE (X Y Z)))) (QUOTE (X Y Z)))
2321 Pass: (EQUAL (NSUBSTITUTE (QUOTE A) (QUOTE X) (COPY-SEQ (QUOTE NIL))) (QUOTE NIL))
2322 Pass: (EQUAL (NSUBSTITUTE #\x #\b (COPY-SEQ (QUOTE (#\a #\b #\c #\d #\e))) :TEST (FUNCTION CHAR<)) (QUOTE (#\a #\b #\x #\x #\x)))
2323 Pass: (EQUAL (NSUBSTITUTE #\x #\b (COPY-SEQ (QUOTE (#\a #\b #\c #\d #\e))) :TEST-NOT (COMPLEMENT (FUNCTION CHAR<))) (QUOTE (#\a #\b #\x #\x #\x)))
2324 Pass: (EQUAL (NSUBSTITUTE (QUOTE (A)) (QUOTE X) (COPY-SEQ (QUOTE ((X) (Y) (Z)))) :KEY (FUNCTION CAR)) (QUOTE ((A) (Y) (Z))))
2325 Pass: (EQUAL (NSUBSTITUTE (QUOTE C) (QUOTE B) (COPY-SEQ (QUOTE (A B A B A B A B)))) (QUOTE (A C A C A C A C)))
2326 Pass: (EQUAL (NSUBSTITUTE (QUOTE A) (QUOTE B) (COPY-SEQ (QUOTE (B B B)))) (QUOTE (A A A)))
2327 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F)))) (QUOTE (A Z B Z C Z D Z E Z F)))
2328 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT NIL) (QUOTE (A Z B Z C Z D Z E Z F)))
2329 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 0) (QUOTE (A X B X C X D X E X F)))
2330 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT -100) (QUOTE (A X B X C X D X E X F)))
2331 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 1) (QUOTE (A Z B X C X D X E X F)))
2332 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 2) (QUOTE (A Z B Z C X D X E X F)))
2333 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 3) (QUOTE (A Z B Z C Z D X E X F)))
2334 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 4) (QUOTE (A Z B Z C Z D Z E X F)))
2335 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 5) (QUOTE (A Z B Z C Z D Z E Z F)))
2336 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 6) (QUOTE (A Z B Z C Z D Z E Z F)))
2337 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 7) (QUOTE (A Z B Z C Z D Z E Z F)))
2338 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT NIL :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
2339 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 0 :FROM-END T) (QUOTE (A X B X C X D X E X F)))
2340 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT -100 :FROM-END T) (QUOTE (A X B X C X D X E X F)))
2341 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 1 :FROM-END T) (QUOTE (A X B X C X D X E Z F)))
2342 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 2 :FROM-END T) (QUOTE (A X B X C X D Z E Z F)))
2343 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 3 :FROM-END T) (QUOTE (A X B X C Z D Z E Z F)))
2344 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 4 :FROM-END T) (QUOTE (A X B Z C Z D Z E Z F)))
2345 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 5 :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
2346 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 6 :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
2347 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 7 :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
2348 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :START 2 :COUNT 1) (QUOTE (A X B Z C X D X E X F)))
2349 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :START 2 :END NIL :COUNT 1) (QUOTE (A X B Z C X D X E X F)))
2350 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :START 2 :END 6 :COUNT 100) (QUOTE (A X B Z C Z D X E X F)))
2351 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :START 2 :END 11 :COUNT 100) (QUOTE (A X B Z C Z D Z E Z F)))
2352 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :START 2 :END 8 :COUNT 10) (QUOTE (A X B Z C Z D Z E X F)))
2353 Pass: (EQUAL (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :START 2 :END 8 :COUNT 2 :FROM-END T) (QUOTE (A X B X C Z D Z E X F)))
2354 Pass: (EQUAL (NSUBSTITUTE #\z #\c (COPY-SEQ (QUOTE (#\a #\b #\c #\d #\e #\f))) :TEST (FUNCTION CHAR<)) (QUOTE (#\a #\b #\c #\z #\z #\z)))
2355 Pass: (EQUAL (NSUBSTITUTE #\z #\c (COPY-SEQ (QUOTE (#\a #\b #\c #\d #\e #\f))) :TEST-NOT (COMPLEMENT (FUNCTION CHAR<))) (QUOTE (#\a #\b #\c #\z #\z #\z)))
2356 Pass: (EQUAL (NSUBSTITUTE "peace" "war" (COPY-SEQ (QUOTE ("love" "hate" "war" "peace"))) :TEST (FUNCTION EQUAL)) (QUOTE ("love" "hate" "peace" "peace")))
2357 Pass: (EQUAL (NSUBSTITUTE "peace" "war" (COPY-SEQ (QUOTE ("love" "hate" "war" "peace"))) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))) (QUOTE ("love" "hate" "peace" "peace")))
2358 Pass: (EQUAL (NSUBSTITUTE "peace" "war" (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR"))) :TEST (FUNCTION STRING-EQUAL)) (QUOTE ("peace" "peace" "peace" "peace")))
2359 Pass: (EQUAL (NSUBSTITUTE "peace" "war" (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR"))) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL))) (QUOTE ("peace" "peace" "peace" "peace")))
2360 Pass: (EQUAL (NSUBSTITUTE "peace" "WAR" (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR"))) :TEST (FUNCTION STRING=)) (QUOTE ("war" "War" "WAr" "peace")))
2361 Pass: (EQUAL (NSUBSTITUTE "peace" "WAR" (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR"))) :TEST-NOT (COMPLEMENT (FUNCTION STRING=))) (QUOTE ("war" "War" "WAr" "peace")))
2362 Pass: (EQUAL (NSUBSTITUTE "peace" "WAR" (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR"))) :TEST (FUNCTION STRING=) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("peace" "peace" "peace" "peace")))
2363 Pass: (EQUAL (NSUBSTITUTE "peace" "WAR" (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR"))) :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("peace" "peace" "peace" "peace")))
2364 Pass: (EQUAL (NSUBSTITUTE "peace" "WAR" (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR"))) :START 1 :END 2 :TEST (FUNCTION STRING=) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "WAr" "WAR")))
2365 Pass: (EQUAL (NSUBSTITUTE "peace" "WAR" (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR"))) :START 1 :END 2 :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "WAr" "WAR")))
2366 Pass: (EQUAL (NSUBSTITUTE "peace" "WAR" (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR"))) :START 1 :END NIL :TEST (FUNCTION STRING=) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace")))
2367 Pass: (EQUAL (NSUBSTITUTE "peace" "WAR" (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR"))) :START 1 :END NIL :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace")))
2368 Pass: (EQUAL (NSUBSTITUTE "peace" "war" (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR"))) :TEST (FUNCTION STRING=) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR")))
2369 Pass: (EQUAL (NSUBSTITUTE "peace" "war" (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR"))) :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR")))
2370 Pass: (EQUAL (NSUBSTITUTE "peace" "WAR" (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT 1 :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "WAr" "WAR" "war" "War" "WAr" "WAR")))
2371 Pass: (EQUAL (NSUBSTITUTE "peace" "WAR" (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT 2 :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "WAR" "war" "War" "WAr" "WAR")))
2372 Pass: (EQUAL (NSUBSTITUTE "peace" "WAR" (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT 2 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR" "war" "peace" "peace" "WAR")))
2373 Pass: (EQUAL (NSUBSTITUTE "peace" "WAR" (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT 0 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")))
2374 Pass: (EQUAL (NSUBSTITUTE "peace" "WAR" (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT -2 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")))
2375 Pass: (EQUAL (NSUBSTITUTE "peace" "WAR" (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT NIL :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
2376 Pass: (EQUAL (NSUBSTITUTE "peace" "WAR" (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT 6 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
2377 Pass: (EQUAL (NSUBSTITUTE "peace" "WAR" (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT 7 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
2378 Pass: (EQUAL (NSUBSTITUTE "peace" "WAR" (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT 100 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
2379 Pass: (EQUALP (NSUBSTITUTE (QUOTE A) (QUOTE X) (COPY-SEQ #(X Y Z))) #(A Y Z))
2380 Pass: (EQUALP (NSUBSTITUTE (QUOTE B) (QUOTE Y) (COPY-SEQ #(X Y Z))) #(X B Z))
2381 Pass: (EQUALP (NSUBSTITUTE (QUOTE C) (QUOTE Z) (COPY-SEQ #(X Y Z))) #(X Y C))
2382 Pass: (EQUALP (NSUBSTITUTE (QUOTE A) (QUOTE P) (COPY-SEQ #(X Y Z))) #(X Y Z))
2383 Pass: (EQUALP (NSUBSTITUTE (QUOTE A) (QUOTE X) (COPY-SEQ #())) #())
2384 Pass: (EQUALP (NSUBSTITUTE #\x #\b (COPY-SEQ #(#\a #\b #\c #\d #\e)) :TEST (FUNCTION CHAR<)) #(#\a #\b #\x #\x #\x))
2385 Pass: (EQUALP (NSUBSTITUTE #\x #\b (COPY-SEQ #(#\a #\b #\c #\d #\e)) :TEST-NOT (COMPLEMENT (FUNCTION CHAR<))) #(#\a #\b #\x #\x #\x))
2386 Pass: (EQUALP (NSUBSTITUTE (QUOTE (A)) (QUOTE X) (COPY-SEQ #((X) (Y) (Z))) :KEY (FUNCTION CAR)) #((A) (Y) (Z)))
2387 Pass: (EQUALP (NSUBSTITUTE (QUOTE C) (QUOTE B) (COPY-SEQ #(A B A B A B A B))) #(A C A C A C A C))
2388 Pass: (EQUALP (NSUBSTITUTE (QUOTE A) (QUOTE B) (COPY-SEQ #(B B B))) #(A A A))
2389 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F))) #(A Z B Z C Z D Z E Z F))
2390 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT NIL) #(A Z B Z C Z D Z E Z F))
2391 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 0) #(A X B X C X D X E X F))
2392 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT -100) #(A X B X C X D X E X F))
2393 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 1) #(A Z B X C X D X E X F))
2394 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 2) #(A Z B Z C X D X E X F))
2395 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 3) #(A Z B Z C Z D X E X F))
2396 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 4) #(A Z B Z C Z D Z E X F))
2397 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 5) #(A Z B Z C Z D Z E Z F))
2398 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 6) #(A Z B Z C Z D Z E Z F))
2399 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 7) #(A Z B Z C Z D Z E Z F))
2400 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT NIL :FROM-END T) #(A Z B Z C Z D Z E Z F))
2401 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 0 :FROM-END T) #(A X B X C X D X E X F))
2402 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT -100 :FROM-END T) #(A X B X C X D X E X F))
2403 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 1 :FROM-END T) #(A X B X C X D X E Z F))
2404 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 2 :FROM-END T) #(A X B X C X D Z E Z F))
2405 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 3 :FROM-END T) #(A X B X C Z D Z E Z F))
2406 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 4 :FROM-END T) #(A X B Z C Z D Z E Z F))
2407 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 5 :FROM-END T) #(A Z B Z C Z D Z E Z F))
2408 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 6 :FROM-END T) #(A Z B Z C Z D Z E Z F))
2409 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 7 :FROM-END T) #(A Z B Z C Z D Z E Z F))
2410 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :START 2 :COUNT 1) #(A X B Z C X D X E X F))
2411 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :START 2 :END NIL :COUNT 1) #(A X B Z C X D X E X F))
2412 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :START 2 :END 6 :COUNT 100) #(A X B Z C Z D X E X F))
2413 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :START 2 :END 11 :COUNT 100) #(A X B Z C Z D Z E Z F))
2414 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :START 2 :END 8 :COUNT 10) #(A X B Z C Z D Z E X F))
2415 Pass: (EQUALP (NSUBSTITUTE (QUOTE Z) (QUOTE X) (COPY-SEQ #(A X B X C X D X E X F)) :START 2 :END 8 :COUNT 2 :FROM-END T) #(A X B X C Z D Z E X F))
2416 Pass: (EQUALP (NSUBSTITUTE #\z #\c (COPY-SEQ #(#\a #\b #\c #\d #\e #\f)) :TEST (FUNCTION CHAR<)) #(#\a #\b #\c #\z #\z #\z))
2417 Pass: (EQUALP (NSUBSTITUTE #\z #\c (COPY-SEQ #(#\a #\b #\c #\d #\e #\f)) :TEST-NOT (COMPLEMENT (FUNCTION CHAR<))) #(#\a #\b #\c #\z #\z #\z))
2418 Pass: (EQUALP (NSUBSTITUTE "peace" "war" (COPY-SEQ #("love" "hate" "war" "peace")) :TEST (FUNCTION EQUAL)) #("love" "hate" "peace" "peace"))
2419 Pass: (EQUALP (NSUBSTITUTE "peace" "war" (COPY-SEQ #("love" "hate" "war" "peace")) :TEST-NOT (COMPLEMENT (FUNCTION EQUAL))) #("love" "hate" "peace" "peace"))
2420 Pass: (EQUALP (NSUBSTITUTE "peace" "war" (COPY-SEQ #("war" "War" "WAr" "WAR")) :TEST (FUNCTION STRING-EQUAL)) #("peace" "peace" "peace" "peace"))
2421 Pass: (EQUALP (NSUBSTITUTE "peace" "war" (COPY-SEQ #("war" "War" "WAr" "WAR")) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL))) #("peace" "peace" "peace" "peace"))
2422 Pass: (EQUALP (NSUBSTITUTE "peace" "WAR" (COPY-SEQ #("war" "War" "WAr" "WAR")) :TEST (FUNCTION STRING=)) #("war" "War" "WAr" "peace"))
2423 Pass: (EQUALP (NSUBSTITUTE "peace" "WAR" (COPY-SEQ #("war" "War" "WAr" "WAR")) :TEST-NOT (COMPLEMENT (FUNCTION STRING=))) #("war" "War" "WAr" "peace"))
2424 Pass: (EQUALP (NSUBSTITUTE "peace" "WAR" (COPY-SEQ #("war" "War" "WAr" "WAR")) :TEST (FUNCTION STRING=) :KEY (FUNCTION STRING-UPCASE)) #("peace" "peace" "peace" "peace"))
2425 Pass: (EQUALP (NSUBSTITUTE "peace" "WAR" (COPY-SEQ #("war" "War" "WAr" "WAR")) :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("peace" "peace" "peace" "peace"))
2426 Pass: (EQUALP (NSUBSTITUTE "peace" "WAR" (COPY-SEQ #("war" "War" "WAr" "WAR")) :START 1 :END 2 :TEST (FUNCTION STRING=) :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "WAr" "WAR"))
2427 Pass: (EQUALP (NSUBSTITUTE "peace" "WAR" (COPY-SEQ #("war" "War" "WAr" "WAR")) :START 1 :END 2 :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "WAr" "WAR"))
2428 Pass: (EQUALP (NSUBSTITUTE "peace" "WAR" (COPY-SEQ #("war" "War" "WAr" "WAR")) :START 1 :END NIL :TEST (FUNCTION STRING=) :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace"))
2429 Pass: (EQUALP (NSUBSTITUTE "peace" "WAR" (COPY-SEQ #("war" "War" "WAr" "WAR")) :START 1 :END NIL :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace"))
2430 Pass: (EQUALP (NSUBSTITUTE "peace" "war" (COPY-SEQ #("war" "War" "WAr" "WAR")) :TEST (FUNCTION STRING=) :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR"))
2431 Pass: (EQUALP (NSUBSTITUTE "peace" "war" (COPY-SEQ #("war" "War" "WAr" "WAR")) :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR"))
2432 Pass: (EQUALP (NSUBSTITUTE "peace" "WAR" (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 1 :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "WAr" "WAR" "war" "War" "WAr" "WAR"))
2433 Pass: (EQUALP (NSUBSTITUTE "peace" "WAR" (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 2 :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "WAR" "war" "War" "WAr" "WAR"))
2434 Pass: (EQUALP (NSUBSTITUTE "peace" "WAR" (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 2 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR" "war" "peace" "peace" "WAR"))
2435 Pass: (EQUALP (NSUBSTITUTE "peace" "WAR" (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 0 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))
2436 Pass: (EQUALP (NSUBSTITUTE "peace" "WAR" (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT -2 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))
2437 Pass: (EQUALP (NSUBSTITUTE "peace" "WAR" (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT NIL :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2438 Pass: (EQUALP (NSUBSTITUTE "peace" "WAR" (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 6 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2439 Pass: (EQUALP (NSUBSTITUTE "peace" "WAR" (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 7 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2440 Pass: (EQUALP (NSUBSTITUTE "peace" "WAR" (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 100 :FROM-END T :TEST-NOT (COMPLEMENT (FUNCTION STRING=)) :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2441 Pass: (STRING= (NSUBSTITUTE #\A #\a (COPY-SEQ "abcabc")) "AbcAbc")
2442 Pass: (STRING= (NSUBSTITUTE #\A #\a (COPY-SEQ "")) "")
2443 Pass: (STRING= (NSUBSTITUTE #\A #\a (COPY-SEQ "xyz")) "xyz")
2444 Pass: (STRING= (NSUBSTITUTE #\A #\a (COPY-SEQ "aaaaaaaaaa") :START 5 :END NIL) "aaaaaAAAAA")
2445 Pass: (STRING= (NSUBSTITUTE #\x #\5 (COPY-SEQ "0123456789") :TEST (FUNCTION CHAR<)) "012345xxxx")
2446 Pass: (STRING= (NSUBSTITUTE #\x #\5 (COPY-SEQ "0123456789") :TEST (FUNCTION CHAR>)) "xxxxx56789")
2447 Pass: (STRING= (NSUBSTITUTE #\x #\D (COPY-SEQ "abcdefg") :KEY (FUNCTION CHAR-UPCASE) :TEST (FUNCTION CHAR>)) "xxxdefg")
2448 Pass: (STRING= (NSUBSTITUTE #\x #\D (COPY-SEQ "abcdefg") :START 1 :END 2 :KEY (FUNCTION CHAR-UPCASE) :TEST (FUNCTION CHAR>)) "axcdefg")
2449 Pass: (STRING= (NSUBSTITUTE #\A #\a (COPY-SEQ "aaaaaaaaaa") :COUNT 2) "AAaaaaaaaa")
2450 Pass: (STRING= (NSUBSTITUTE #\A #\a (COPY-SEQ "aaaaaaaaaa") :COUNT -1) "aaaaaaaaaa")
2451 Pass: (STRING= (NSUBSTITUTE #\A #\a (COPY-SEQ "aaaaaaaaaa") :COUNT 0) "aaaaaaaaaa")
2452 Pass: (STRING= (NSUBSTITUTE #\A #\a (COPY-SEQ "aaaaaaaaaa") :COUNT NIL) "AAAAAAAAAA")
2453 Pass: (STRING= (NSUBSTITUTE #\A #\a (COPY-SEQ "aaaaaaaaaa") :COUNT 100) "AAAAAAAAAA")
2454 Pass: (STRING= (NSUBSTITUTE #\A #\a (COPY-SEQ "aaaaaaaaaa") :COUNT 9) "AAAAAAAAAa")
2455 Pass: (STRING= (NSUBSTITUTE #\A #\a (COPY-SEQ "aaaaaaaaaa") :COUNT 9 :FROM-END T) "aAAAAAAAAA")
2456 Pass: (STRING= (NSUBSTITUTE #\A #\a (COPY-SEQ "aaaaaaaaaa") :START 2 :END 8 :COUNT 3) "aaAAAaaaaa")
2457 Pass: (STRING= (NSUBSTITUTE #\A #\a (COPY-SEQ "aaaaaaaaaa") :START 2 :END 8 :FROM-END T :COUNT 3) "aaaaaAAAaa")
2458 Pass: (STRING= (NSUBSTITUTE #\x #\A (COPY-SEQ "aaaaaaaaaa") :START 2 :END 8 :FROM-END T :COUNT 3) "aaaaaaaaaa")
2459 Pass: (STRING= (NSUBSTITUTE #\X #\A (COPY-SEQ "aaaaaaaaaa") :START 2 :END 8 :FROM-END T :KEY (FUNCTION CHAR-UPCASE) :COUNT 3) "aaaaaXXXaa")
2460 Pass: (STRING= (NSUBSTITUTE #\X #\D (COPY-SEQ "abcdefghij") :START 2 :END 8 :FROM-END T :KEY (FUNCTION CHAR-UPCASE) :TEST (FUNCTION CHAR<) :COUNT 3) "abcdeXXXij")
2461 Pass: (EQUALP (NSUBSTITUTE 0 1 (COPY-SEQ #(1 1 1 1))) #(0 0 0 0))
2462 Pass: (EQUALP (NSUBSTITUTE 0 1 (COPY-SEQ #(1 1 1 1)) :START 1 :END NIL) #(1 0 0 0))
2463 Pass: (EQUALP (NSUBSTITUTE 0 1 (COPY-SEQ #(1 1 1 1)) :START 1 :END 3) #(1 0 0 1))
2464 Pass: (EQUALP (NSUBSTITUTE 0 1 (COPY-SEQ #(1 1 1 1 1 1 1 1)) :START 1 :END 7) #(1 0 0 0 0 0 0 1))
2465 Pass: (EQUALP (NSUBSTITUTE 0 1 (COPY-SEQ #(1 1 1 1 1 1 1 1)) :START 1 :END 7 :COUNT 3) #(1 0 0 0 1 1 1 1))
2466 Pass: (EQUALP (NSUBSTITUTE 0 1 (COPY-SEQ #(1 1 1 1 1 1 1 1)) :START 1 :END 7 :COUNT 3 :FROM-END T) #(1 1 1 1 0 0 0 1))
2467 Pass: (EQUALP (NSUBSTITUTE 1 1 (COPY-SEQ #(1 0 1 0 1 0 1 0)) :START 1 :END 7 :COUNT 3 :FROM-END T :KEY (FUNCTION (LAMBDA (X) (IF (ZEROP X) 1 0)))) #(1 1 1 1 1 1 1 0))
2468 Pass: (EQUALP (NSUBSTITUTE 1 1 (COPY-SEQ #(1 0 1 0 1 0 1 0)) :START 1 :END 7 :COUNT 3 :FROM-END T :KEY (FUNCTION (LAMBDA (X) (IF (ZEROP X) 1 0))) :TEST (FUNCTION >=)) #(1 0 1 0 1 1 1 0))
2469 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE A) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (X Y Z)))) (QUOTE (A Y Z)))
2470 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE B) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE Y)))) (COPY-SEQ (QUOTE (X Y Z)))) (QUOTE (X B Z)))
2471 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE C) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE Z)))) (COPY-SEQ (QUOTE (X Y Z)))) (QUOTE (X Y C)))
2472 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE A) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE P)))) (COPY-SEQ (QUOTE (X Y Z)))) (QUOTE (X Y Z)))
2473 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE A) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE NIL))) (QUOTE NIL))
2474 Pass: (EQUAL (NSUBSTITUTE-IF #\x (FUNCTION (LAMBDA (ARG) (CHAR< #\b ARG))) (COPY-SEQ (QUOTE (#\a #\b #\c #\d #\e)))) (QUOTE (#\a #\b #\x #\x #\x)))
2475 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE (A)) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE ((X) (Y) (Z)))) :KEY (FUNCTION CAR)) (QUOTE ((A) (Y) (Z))))
2476 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE C) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE B)))) (COPY-SEQ (QUOTE (A B A B A B A B)))) (QUOTE (A C A C A C A C)))
2477 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE A) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE B)))) (COPY-SEQ (QUOTE (B B B)))) (QUOTE (A A A)))
2478 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F)))) (QUOTE (A Z B Z C Z D Z E Z F)))
2479 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT NIL) (QUOTE (A Z B Z C Z D Z E Z F)))
2480 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 0) (QUOTE (A X B X C X D X E X F)))
2481 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT -100) (QUOTE (A X B X C X D X E X F)))
2482 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 1) (QUOTE (A Z B X C X D X E X F)))
2483 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 2) (QUOTE (A Z B Z C X D X E X F)))
2484 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 3) (QUOTE (A Z B Z C Z D X E X F)))
2485 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 4) (QUOTE (A Z B Z C Z D Z E X F)))
2486 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 5) (QUOTE (A Z B Z C Z D Z E Z F)))
2487 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 6) (QUOTE (A Z B Z C Z D Z E Z F)))
2488 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 7) (QUOTE (A Z B Z C Z D Z E Z F)))
2489 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT NIL :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
2490 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 0 :FROM-END T) (QUOTE (A X B X C X D X E X F)))
2491 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT -100 :FROM-END T) (QUOTE (A X B X C X D X E X F)))
2492 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 1 :FROM-END T) (QUOTE (A X B X C X D X E Z F)))
2493 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 2 :FROM-END T) (QUOTE (A X B X C X D Z E Z F)))
2494 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 3 :FROM-END T) (QUOTE (A X B X C Z D Z E Z F)))
2495 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 4 :FROM-END T) (QUOTE (A X B Z C Z D Z E Z F)))
2496 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 5 :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
2497 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 6 :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
2498 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 7 :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
2499 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :START 2 :COUNT 1) (QUOTE (A X B Z C X D X E X F)))
2500 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :START 2 :END NIL :COUNT 1) (QUOTE (A X B Z C X D X E X F)))
2501 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :START 2 :END 6 :COUNT 100) (QUOTE (A X B Z C Z D X E X F)))
2502 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :START 2 :END 11 :COUNT 100) (QUOTE (A X B Z C Z D Z E Z F)))
2503 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :START 2 :END 8 :COUNT 10) (QUOTE (A X B Z C Z D Z E X F)))
2504 Pass: (EQUAL (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :START 2 :END 8 :COUNT 2 :FROM-END T) (QUOTE (A X B X C Z D Z E X F)))
2505 Pass: (EQUAL (NSUBSTITUTE-IF #\z (FUNCTION (LAMBDA (ARG) (CHAR< #\c ARG))) (COPY-SEQ (QUOTE (#\a #\b #\c #\d #\e #\f)))) (QUOTE (#\a #\b #\c #\z #\z #\z)))
2506 Pass: (EQUAL (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (EQUAL "war" ARG))) (COPY-SEQ (QUOTE ("love" "hate" "war" "peace")))) (QUOTE ("love" "hate" "peace" "peace")))
2507 Pass: (EQUAL (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING-EQUAL "war" ARG))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR")))) (QUOTE ("peace" "peace" "peace" "peace")))
2508 Pass: (EQUAL (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR"))) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("peace" "peace" "peace" "peace")))
2509 Pass: (EQUAL (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR"))) :START 1 :END 2 :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "WAr" "WAR")))
2510 Pass: (EQUAL (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR"))) :START 1 :END NIL :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace")))
2511 Pass: (EQUAL (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "war" ARG))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR"))) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR")))
2512 Pass: (EQUAL (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT 1 :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "WAr" "WAR" "war" "War" "WAr" "WAR")))
2513 Pass: (EQUAL (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT 2 :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "WAR" "war" "War" "WAr" "WAR")))
2514 Pass: (EQUAL (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT 2 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR" "war" "peace" "peace" "WAR")))
2515 Pass: (EQUAL (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT 0 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")))
2516 Pass: (EQUAL (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT -2 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")))
2517 Pass: (EQUAL (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT NIL :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
2518 Pass: (EQUAL (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT 6 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
2519 Pass: (EQUAL (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT 7 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
2520 Pass: (EQUAL (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT 100 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
2521 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE A) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(X Y Z))) #(A Y Z))
2522 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE B) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE Y)))) (COPY-SEQ #(X Y Z))) #(X B Z))
2523 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE C) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE Z)))) (COPY-SEQ #(X Y Z))) #(X Y C))
2524 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE A) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE P)))) (COPY-SEQ #(X Y Z))) #(X Y Z))
2525 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE A) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #())) #())
2526 Pass: (EQUALP (NSUBSTITUTE-IF #\x (FUNCTION (LAMBDA (ARG) (CHAR< #\b ARG))) (COPY-SEQ #(#\a #\b #\c #\d #\e))) #(#\a #\b #\x #\x #\x))
2527 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE (A)) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #((X) (Y) (Z))) :KEY (FUNCTION CAR)) #((A) (Y) (Z)))
2528 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE C) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE B)))) (COPY-SEQ #(A B A B A B A B))) #(A C A C A C A C))
2529 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE A) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE B)))) (COPY-SEQ #(B B B))) #(A A A))
2530 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F))) #(A Z B Z C Z D Z E Z F))
2531 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT NIL) #(A Z B Z C Z D Z E Z F))
2532 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 0) #(A X B X C X D X E X F))
2533 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT -100) #(A X B X C X D X E X F))
2534 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 1) #(A Z B X C X D X E X F))
2535 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 2) #(A Z B Z C X D X E X F))
2536 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 3) #(A Z B Z C Z D X E X F))
2537 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 4) #(A Z B Z C Z D Z E X F))
2538 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 5) #(A Z B Z C Z D Z E Z F))
2539 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 6) #(A Z B Z C Z D Z E Z F))
2540 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 7) #(A Z B Z C Z D Z E Z F))
2541 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT NIL :FROM-END T) #(A Z B Z C Z D Z E Z F))
2542 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 0 :FROM-END T) #(A X B X C X D X E X F))
2543 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT -100 :FROM-END T) #(A X B X C X D X E X F))
2544 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 1 :FROM-END T) #(A X B X C X D X E Z F))
2545 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 2 :FROM-END T) #(A X B X C X D Z E Z F))
2546 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 3 :FROM-END T) #(A X B X C Z D Z E Z F))
2547 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 4 :FROM-END T) #(A X B Z C Z D Z E Z F))
2548 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 5 :FROM-END T) #(A Z B Z C Z D Z E Z F))
2549 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 6 :FROM-END T) #(A Z B Z C Z D Z E Z F))
2550 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 7 :FROM-END T) #(A Z B Z C Z D Z E Z F))
2551 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :START 2 :COUNT 1) #(A X B Z C X D X E X F))
2552 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :START 2 :END NIL :COUNT 1) #(A X B Z C X D X E X F))
2553 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :START 2 :END 6 :COUNT 100) #(A X B Z C Z D X E X F))
2554 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :START 2 :END 11 :COUNT 100) #(A X B Z C Z D Z E Z F))
2555 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :START 2 :END 8 :COUNT 10) #(A X B Z C Z D Z E X F))
2556 Pass: (EQUALP (NSUBSTITUTE-IF (QUOTE Z) (FUNCTION (LAMBDA (ARG) (EQ ARG (QUOTE X)))) (COPY-SEQ #(A X B X C X D X E X F)) :START 2 :END 8 :COUNT 2 :FROM-END T) #(A X B X C Z D Z E X F))
2557 Pass: (EQUALP (NSUBSTITUTE-IF #\z (FUNCTION (LAMBDA (ARG) (CHAR< #\c ARG))) (COPY-SEQ #(#\a #\b #\c #\d #\e #\f))) #(#\a #\b #\c #\z #\z #\z))
2558 Pass: (EQUALP (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (EQUAL "war" ARG))) (COPY-SEQ #("love" "hate" "war" "peace"))) #("love" "hate" "peace" "peace"))
2559 Pass: (EQUALP (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING-EQUAL "war" ARG))) (COPY-SEQ #("war" "War" "WAr" "WAR"))) #("peace" "peace" "peace" "peace"))
2560 Pass: (EQUALP (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ #("war" "War" "WAr" "WAR")) :KEY (FUNCTION STRING-UPCASE)) #("peace" "peace" "peace" "peace"))
2561 Pass: (EQUALP (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ #("war" "War" "WAr" "WAR")) :START 1 :END 2 :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "WAr" "WAR"))
2562 Pass: (EQUALP (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ #("war" "War" "WAr" "WAR")) :START 1 :END NIL :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace"))
2563 Pass: (EQUALP (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "war" ARG))) (COPY-SEQ #("war" "War" "WAr" "WAR")) :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR"))
2564 Pass: (EQUALP (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 1 :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "WAr" "WAR" "war" "War" "WAr" "WAR"))
2565 Pass: (EQUALP (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 2 :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "WAR" "war" "War" "WAr" "WAR"))
2566 Pass: (EQUALP (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 2 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR" "war" "peace" "peace" "WAR"))
2567 Pass: (EQUALP (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 0 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))
2568 Pass: (EQUALP (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT -2 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))
2569 Pass: (EQUALP (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT NIL :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2570 Pass: (EQUALP (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 6 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2571 Pass: (EQUALP (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 7 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2572 Pass: (EQUALP (NSUBSTITUTE-IF "peace" (FUNCTION (LAMBDA (ARG) (STRING= "WAR" ARG))) (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 100 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2573 Pass: (STRING= (NSUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) (COPY-SEQ "abcabc")) "AbcAbc")
2574 Pass: (STRING= (NSUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) (COPY-SEQ "")) "")
2575 Pass: (STRING= (NSUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) (COPY-SEQ "xyz")) "xyz")
2576 Pass: (STRING= (NSUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) (COPY-SEQ "aaaaaaaaaa") :START 5 :END NIL) "aaaaaAAAAA")
2577 Pass: (STRING= (NSUBSTITUTE-IF #\x (FUNCTION (LAMBDA (ARG) (CHAR< #\5 ARG))) (COPY-SEQ "0123456789")) "012345xxxx")
2578 Pass: (STRING= (NSUBSTITUTE-IF #\x (FUNCTION (LAMBDA (ARG) (CHAR> #\5 ARG))) (COPY-SEQ "0123456789")) "xxxxx56789")
2579 Pass: (STRING= (NSUBSTITUTE-IF #\x (FUNCTION (LAMBDA (ARG) (CHAR> #\D ARG))) (COPY-SEQ "abcdefg") :KEY (FUNCTION CHAR-UPCASE)) "xxxdefg")
2580 Pass: (STRING= (NSUBSTITUTE-IF #\x (FUNCTION (LAMBDA (ARG) (CHAR> #\D ARG))) (COPY-SEQ "abcdefg") :START 1 :END 2 :KEY (FUNCTION CHAR-UPCASE)) "axcdefg")
2581 Pass: (STRING= (NSUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) (COPY-SEQ "aaaaaaaaaa") :COUNT 2) "AAaaaaaaaa")
2582 Pass: (STRING= (NSUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) (COPY-SEQ "aaaaaaaaaa") :COUNT -1) "aaaaaaaaaa")
2583 Pass: (STRING= (NSUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) (COPY-SEQ "aaaaaaaaaa") :COUNT 0) "aaaaaaaaaa")
2584 Pass: (STRING= (NSUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) (COPY-SEQ "aaaaaaaaaa") :COUNT NIL) "AAAAAAAAAA")
2585 Pass: (STRING= (NSUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) (COPY-SEQ "aaaaaaaaaa") :COUNT 100) "AAAAAAAAAA")
2586 Pass: (STRING= (NSUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) (COPY-SEQ "aaaaaaaaaa") :COUNT 9) "AAAAAAAAAa")
2587 Pass: (STRING= (NSUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) (COPY-SEQ "aaaaaaaaaa") :COUNT 9 :FROM-END T) "aAAAAAAAAA")
2588 Pass: (STRING= (NSUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) (COPY-SEQ "aaaaaaaaaa") :START 2 :END 8 :COUNT 3) "aaAAAaaaaa")
2589 Pass: (STRING= (NSUBSTITUTE-IF #\A (FUNCTION (LAMBDA (ARG) (EQL #\a ARG))) (COPY-SEQ "aaaaaaaaaa") :START 2 :END 8 :FROM-END T :COUNT 3) "aaaaaAAAaa")
2590 Pass: (STRING= (NSUBSTITUTE-IF #\x (FUNCTION (LAMBDA (ARG) (EQL #\A ARG))) (COPY-SEQ "aaaaaaaaaa") :START 2 :END 8 :FROM-END T :COUNT 3) "aaaaaaaaaa")
2591 Pass: (STRING= (NSUBSTITUTE-IF #\X (FUNCTION (LAMBDA (ARG) (EQL #\A ARG))) (COPY-SEQ "aaaaaaaaaa") :START 2 :END 8 :FROM-END T :KEY (FUNCTION CHAR-UPCASE) :COUNT 3) "aaaaaXXXaa")
2592 Pass: (STRING= (NSUBSTITUTE-IF #\X (FUNCTION (LAMBDA (ARG) (CHAR< #\D ARG))) (COPY-SEQ "abcdefghij") :START 2 :END 8 :FROM-END T :KEY (FUNCTION CHAR-UPCASE) :COUNT 3) "abcdeXXXij")
2593 Pass: (EQUALP (NSUBSTITUTE-IF 0 (FUNCTION (LAMBDA (ARG) (= 1 ARG))) (COPY-SEQ #(1 1 1 1))) #(0 0 0 0))
2594 Pass: (EQUALP (NSUBSTITUTE-IF 0 (FUNCTION (LAMBDA (ARG) (= 1 ARG))) (COPY-SEQ #(1 1 1 1)) :START 1 :END NIL) #(1 0 0 0))
2595 Pass: (EQUALP (NSUBSTITUTE-IF 0 (FUNCTION (LAMBDA (ARG) (= 1 ARG))) (COPY-SEQ #(1 1 1 1)) :START 1 :END 3) #(1 0 0 1))
2596 Pass: (EQUALP (NSUBSTITUTE-IF 0 (FUNCTION (LAMBDA (ARG) (= 1 ARG))) (COPY-SEQ #(1 1 1 1 1 1 1 1)) :START 1 :END 7) #(1 0 0 0 0 0 0 1))
2597 Pass: (EQUALP (NSUBSTITUTE-IF 0 (FUNCTION (LAMBDA (ARG) (= 1 ARG))) (COPY-SEQ #(1 1 1 1 1 1 1 1)) :START 1 :END 7 :COUNT 3) #(1 0 0 0 1 1 1 1))
2598 Pass: (EQUALP (NSUBSTITUTE-IF 0 (FUNCTION (LAMBDA (ARG) (= 1 ARG))) (COPY-SEQ #(1 1 1 1 1 1 1 1)) :START 1 :END 7 :COUNT 3 :FROM-END T) #(1 1 1 1 0 0 0 1))
2599 Pass: (EQUALP (NSUBSTITUTE-IF 1 (FUNCTION (LAMBDA (ARG) (= 1 ARG))) (COPY-SEQ #(1 0 1 0 1 0 1 0)) :START 1 :END 7 :COUNT 3 :FROM-END T :KEY (FUNCTION (LAMBDA (X) (IF (ZEROP X) 1 0)))) #(1 1 1 1 1 1 1 0))
2600 Pass: (EQUALP (NSUBSTITUTE-IF 1 (FUNCTION (LAMBDA (ARG) (>= 1 ARG))) (COPY-SEQ #(1 0 1 0 1 0 1 0)) :START 1 :END 7 :COUNT 3 :FROM-END T :KEY (FUNCTION (LAMBDA (X) (IF (ZEROP X) 1 0)))) #(1 0 1 0 1 1 1 0))
2601 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (X Y Z)))) (QUOTE (A Y Z)))
2602 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE B) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE Y))))) (COPY-SEQ (QUOTE (X Y Z)))) (QUOTE (X B Z)))
2603 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE C) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE Z))))) (COPY-SEQ (QUOTE (X Y Z)))) (QUOTE (X Y C)))
2604 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE P))))) (COPY-SEQ (QUOTE (X Y Z)))) (QUOTE (X Y Z)))
2605 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE NIL))) (QUOTE NIL))
2606 Pass: (EQUAL (NSUBSTITUTE-IF-NOT #\x (FUNCTION (LAMBDA (ARG) (NOT (CHAR< #\b ARG)))) (COPY-SEQ (QUOTE (#\a #\b #\c #\d #\e)))) (QUOTE (#\a #\b #\x #\x #\x)))
2607 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE (A)) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE ((X) (Y) (Z)))) :KEY (FUNCTION CAR)) (QUOTE ((A) (Y) (Z))))
2608 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE C) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE B))))) (COPY-SEQ (QUOTE (A B A B A B A B)))) (QUOTE (A C A C A C A C)))
2609 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE B))))) (COPY-SEQ (QUOTE (B B B)))) (QUOTE (A A A)))
2610 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F)))) (QUOTE (A Z B Z C Z D Z E Z F)))
2611 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT NIL) (QUOTE (A Z B Z C Z D Z E Z F)))
2612 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 0) (QUOTE (A X B X C X D X E X F)))
2613 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT -100) (QUOTE (A X B X C X D X E X F)))
2614 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 1) (QUOTE (A Z B X C X D X E X F)))
2615 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 2) (QUOTE (A Z B Z C X D X E X F)))
2616 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 3) (QUOTE (A Z B Z C Z D X E X F)))
2617 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 4) (QUOTE (A Z B Z C Z D Z E X F)))
2618 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 5) (QUOTE (A Z B Z C Z D Z E Z F)))
2619 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 6) (QUOTE (A Z B Z C Z D Z E Z F)))
2620 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 7) (QUOTE (A Z B Z C Z D Z E Z F)))
2621 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT NIL :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
2622 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 0 :FROM-END T) (QUOTE (A X B X C X D X E X F)))
2623 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT -100 :FROM-END T) (QUOTE (A X B X C X D X E X F)))
2624 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 1 :FROM-END T) (QUOTE (A X B X C X D X E Z F)))
2625 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 2 :FROM-END T) (QUOTE (A X B X C X D Z E Z F)))
2626 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 3 :FROM-END T) (QUOTE (A X B X C Z D Z E Z F)))
2627 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 4 :FROM-END T) (QUOTE (A X B Z C Z D Z E Z F)))
2628 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 5 :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
2629 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 6 :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
2630 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :COUNT 7 :FROM-END T) (QUOTE (A Z B Z C Z D Z E Z F)))
2631 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :START 2 :COUNT 1) (QUOTE (A X B Z C X D X E X F)))
2632 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :START 2 :END NIL :COUNT 1) (QUOTE (A X B Z C X D X E X F)))
2633 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :START 2 :END 6 :COUNT 100) (QUOTE (A X B Z C Z D X E X F)))
2634 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :START 2 :END 11 :COUNT 100) (QUOTE (A X B Z C Z D Z E Z F)))
2635 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :START 2 :END 8 :COUNT 10) (QUOTE (A X B Z C Z D Z E X F)))
2636 Pass: (EQUAL (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ (QUOTE (A X B X C X D X E X F))) :START 2 :END 8 :COUNT 2 :FROM-END T) (QUOTE (A X B X C Z D Z E X F)))
2637 Pass: (EQUAL (NSUBSTITUTE-IF-NOT #\z (FUNCTION (LAMBDA (ARG) (NOT (CHAR< #\c ARG)))) (COPY-SEQ (QUOTE (#\a #\b #\c #\d #\e #\f)))) (QUOTE (#\a #\b #\c #\z #\z #\z)))
2638 Pass: (EQUAL (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (EQUAL "war" ARG)))) (COPY-SEQ (QUOTE ("love" "hate" "war" "peace")))) (QUOTE ("love" "hate" "peace" "peace")))
2639 Pass: (EQUAL (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL "war" ARG)))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR")))) (QUOTE ("peace" "peace" "peace" "peace")))
2640 Pass: (EQUAL (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR"))) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("peace" "peace" "peace" "peace")))
2641 Pass: (EQUAL (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR"))) :START 1 :END 2 :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "WAr" "WAR")))
2642 Pass: (EQUAL (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR"))) :START 1 :END NIL :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace")))
2643 Pass: (EQUAL (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "war" ARG)))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR"))) :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR")))
2644 Pass: (EQUAL (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT 1 :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "WAr" "WAR" "war" "War" "WAr" "WAR")))
2645 Pass: (EQUAL (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT 2 :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "WAR" "war" "War" "WAr" "WAR")))
2646 Pass: (EQUAL (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT 2 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR" "war" "peace" "peace" "WAR")))
2647 Pass: (EQUAL (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT 0 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")))
2648 Pass: (EQUAL (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT -2 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")))
2649 Pass: (EQUAL (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT NIL :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
2650 Pass: (EQUAL (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT 6 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
2651 Pass: (EQUAL (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT 7 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
2652 Pass: (EQUAL (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ (QUOTE ("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))) :START 1 :END 7 :COUNT 100 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) (QUOTE ("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR")))
2653 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(X Y Z))) #(A Y Z))
2654 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE B) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE Y))))) (COPY-SEQ #(X Y Z))) #(X B Z))
2655 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE C) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE Z))))) (COPY-SEQ #(X Y Z))) #(X Y C))
2656 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE P))))) (COPY-SEQ #(X Y Z))) #(X Y Z))
2657 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #())) #())
2658 Pass: (EQUALP (NSUBSTITUTE-IF-NOT #\x (FUNCTION (LAMBDA (ARG) (NOT (CHAR< #\b ARG)))) (COPY-SEQ #(#\a #\b #\c #\d #\e))) #(#\a #\b #\x #\x #\x))
2659 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE (A)) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #((X) (Y) (Z))) :KEY (FUNCTION CAR)) #((A) (Y) (Z)))
2660 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE C) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE B))))) (COPY-SEQ #(A B A B A B A B))) #(A C A C A C A C))
2661 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE A) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE B))))) (COPY-SEQ #(B B B))) #(A A A))
2662 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F))) #(A Z B Z C Z D Z E Z F))
2663 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT NIL) #(A Z B Z C Z D Z E Z F))
2664 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 0) #(A X B X C X D X E X F))
2665 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT -100) #(A X B X C X D X E X F))
2666 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 1) #(A Z B X C X D X E X F))
2667 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 2) #(A Z B Z C X D X E X F))
2668 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 3) #(A Z B Z C Z D X E X F))
2669 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 4) #(A Z B Z C Z D Z E X F))
2670 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 5) #(A Z B Z C Z D Z E Z F))
2671 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 6) #(A Z B Z C Z D Z E Z F))
2672 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 7) #(A Z B Z C Z D Z E Z F))
2673 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT NIL :FROM-END T) #(A Z B Z C Z D Z E Z F))
2674 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 0 :FROM-END T) #(A X B X C X D X E X F))
2675 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT -100 :FROM-END T) #(A X B X C X D X E X F))
2676 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 1 :FROM-END T) #(A X B X C X D X E Z F))
2677 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 2 :FROM-END T) #(A X B X C X D Z E Z F))
2678 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 3 :FROM-END T) #(A X B X C Z D Z E Z F))
2679 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 4 :FROM-END T) #(A X B Z C Z D Z E Z F))
2680 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 5 :FROM-END T) #(A Z B Z C Z D Z E Z F))
2681 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 6 :FROM-END T) #(A Z B Z C Z D Z E Z F))
2682 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :COUNT 7 :FROM-END T) #(A Z B Z C Z D Z E Z F))
2683 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :START 2 :COUNT 1) #(A X B Z C X D X E X F))
2684 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :START 2 :END NIL :COUNT 1) #(A X B Z C X D X E X F))
2685 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :START 2 :END 6 :COUNT 100) #(A X B Z C Z D X E X F))
2686 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :START 2 :END 11 :COUNT 100) #(A X B Z C Z D Z E Z F))
2687 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :START 2 :END 8 :COUNT 10) #(A X B Z C Z D Z E X F))
2688 Pass: (EQUALP (NSUBSTITUTE-IF-NOT (QUOTE Z) (FUNCTION (LAMBDA (ARG) (NOT (EQ ARG (QUOTE X))))) (COPY-SEQ #(A X B X C X D X E X F)) :START 2 :END 8 :COUNT 2 :FROM-END T) #(A X B X C Z D Z E X F))
2689 Pass: (EQUALP (NSUBSTITUTE-IF-NOT #\z (FUNCTION (LAMBDA (ARG) (NOT (CHAR< #\c ARG)))) (COPY-SEQ #(#\a #\b #\c #\d #\e #\f))) #(#\a #\b #\c #\z #\z #\z))
2690 Pass: (EQUALP (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (EQUAL "war" ARG)))) (COPY-SEQ #("love" "hate" "war" "peace"))) #("love" "hate" "peace" "peace"))
2691 Pass: (EQUALP (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL "war" ARG)))) (COPY-SEQ #("war" "War" "WAr" "WAR"))) #("peace" "peace" "peace" "peace"))
2692 Pass: (EQUALP (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ #("war" "War" "WAr" "WAR")) :KEY (FUNCTION STRING-UPCASE)) #("peace" "peace" "peace" "peace"))
2693 Pass: (EQUALP (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ #("war" "War" "WAr" "WAR")) :START 1 :END 2 :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "WAr" "WAR"))
2694 Pass: (EQUALP (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ #("war" "War" "WAr" "WAR")) :START 1 :END NIL :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace"))
2695 Pass: (EQUALP (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "war" ARG)))) (COPY-SEQ #("war" "War" "WAr" "WAR")) :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR"))
2696 Pass: (EQUALP (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 1 :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "WAr" "WAR" "war" "War" "WAr" "WAR"))
2697 Pass: (EQUALP (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 2 :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "WAR" "war" "War" "WAr" "WAR"))
2698 Pass: (EQUALP (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 2 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR" "war" "peace" "peace" "WAR"))
2699 Pass: (EQUALP (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 0 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))
2700 Pass: (EQUALP (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT -2 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR"))
2701 Pass: (EQUALP (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT NIL :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2702 Pass: (EQUALP (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 6 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2703 Pass: (EQUALP (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 7 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2704 Pass: (EQUALP (NSUBSTITUTE-IF-NOT "peace" (FUNCTION (LAMBDA (ARG) (NOT (STRING= "WAR" ARG)))) (COPY-SEQ #("war" "War" "WAr" "WAR" "war" "War" "WAr" "WAR")) :START 1 :END 7 :COUNT 100 :FROM-END T :KEY (FUNCTION STRING-UPCASE)) #("war" "peace" "peace" "peace" "peace" "peace" "peace" "WAR"))
2705 Pass: (STRING= (NSUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) (COPY-SEQ "abcabc")) "AbcAbc")
2706 Pass: (STRING= (NSUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) (COPY-SEQ "")) "")
2707 Pass: (STRING= (NSUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) (COPY-SEQ "xyz")) "xyz")
2708 Pass: (STRING= (NSUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) (COPY-SEQ "aaaaaaaaaa") :START 5 :END NIL) "aaaaaAAAAA")
2709 Pass: (STRING= (NSUBSTITUTE-IF-NOT #\x (FUNCTION (LAMBDA (ARG) (NOT (CHAR< #\5 ARG)))) (COPY-SEQ "0123456789")) "012345xxxx")
2710 Pass: (STRING= (NSUBSTITUTE-IF-NOT #\x (FUNCTION (LAMBDA (ARG) (NOT (CHAR> #\5 ARG)))) (COPY-SEQ "0123456789")) "xxxxx56789")
2711 Pass: (STRING= (NSUBSTITUTE-IF-NOT #\x (FUNCTION (LAMBDA (ARG) (NOT (CHAR> #\D ARG)))) (COPY-SEQ "abcdefg") :KEY (FUNCTION CHAR-UPCASE)) "xxxdefg")
2712 Pass: (STRING= (NSUBSTITUTE-IF-NOT #\x (FUNCTION (LAMBDA (ARG) (NOT (CHAR> #\D ARG)))) (COPY-SEQ "abcdefg") :START 1 :END 2 :KEY (FUNCTION CHAR-UPCASE)) "axcdefg")
2713 Pass: (STRING= (NSUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) (COPY-SEQ "aaaaaaaaaa") :COUNT 2) "AAaaaaaaaa")
2714 Pass: (STRING= (NSUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) (COPY-SEQ "aaaaaaaaaa") :COUNT -1) "aaaaaaaaaa")
2715 Pass: (STRING= (NSUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) (COPY-SEQ "aaaaaaaaaa") :COUNT 0) "aaaaaaaaaa")
2716 Pass: (STRING= (NSUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) (COPY-SEQ "aaaaaaaaaa") :COUNT NIL) "AAAAAAAAAA")
2717 Pass: (STRING= (NSUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) (COPY-SEQ "aaaaaaaaaa") :COUNT 100) "AAAAAAAAAA")
2718 Pass: (STRING= (NSUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) (COPY-SEQ "aaaaaaaaaa") :COUNT 9) "AAAAAAAAAa")
2719 Pass: (STRING= (NSUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) (COPY-SEQ "aaaaaaaaaa") :COUNT 9 :FROM-END T) "aAAAAAAAAA")
2720 Pass: (STRING= (NSUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) (COPY-SEQ "aaaaaaaaaa") :START 2 :END 8 :COUNT 3) "aaAAAaaaaa")
2721 Pass: (STRING= (NSUBSTITUTE-IF-NOT #\A (FUNCTION (LAMBDA (ARG) (NOT (EQL #\a ARG)))) (COPY-SEQ "aaaaaaaaaa") :START 2 :END 8 :FROM-END T :COUNT 3) "aaaaaAAAaa")
2722 Pass: (STRING= (NSUBSTITUTE-IF-NOT #\x (FUNCTION (LAMBDA (ARG) (NOT (EQL #\A ARG)))) (COPY-SEQ "aaaaaaaaaa") :START 2 :END 8 :FROM-END T :COUNT 3) "aaaaaaaaaa")
2723 Pass: (STRING= (NSUBSTITUTE-IF-NOT #\X (FUNCTION (LAMBDA (ARG) (NOT (EQL #\A ARG)))) (COPY-SEQ "aaaaaaaaaa") :START 2 :END 8 :FROM-END T :KEY (FUNCTION CHAR-UPCASE) :COUNT 3) "aaaaaXXXaa")
2724 Pass: (STRING= (NSUBSTITUTE-IF-NOT #\X (FUNCTION (LAMBDA (ARG) (NOT (CHAR< #\D ARG)))) (COPY-SEQ "abcdefghij") :START 2 :END 8 :FROM-END T :KEY (FUNCTION CHAR-UPCASE) :COUNT 3) "abcdeXXXij")
2725 Pass: (EQUALP (NSUBSTITUTE-IF-NOT 0 (FUNCTION (LAMBDA (ARG) (NOT (= 1 ARG)))) (COPY-SEQ #(1 1 1 1))) #(0 0 0 0))
2726 Pass: (EQUALP (NSUBSTITUTE-IF-NOT 0 (FUNCTION (LAMBDA (ARG) (NOT (= 1 ARG)))) (COPY-SEQ #(1 1 1 1)) :START 1 :END NIL) #(1 0 0 0))
2727 Pass: (EQUALP (NSUBSTITUTE-IF-NOT 0 (FUNCTION (LAMBDA (ARG) (NOT (= 1 ARG)))) (COPY-SEQ #(1 1 1 1)) :START 1 :END 3) #(1 0 0 1))
2728 Pass: (EQUALP (NSUBSTITUTE-IF-NOT 0 (FUNCTION (LAMBDA (ARG) (NOT (= 1 ARG)))) (COPY-SEQ #(1 1 1 1 1 1 1 1)) :START 1 :END 7) #(1 0 0 0 0 0 0 1))
2729 Pass: (EQUALP (NSUBSTITUTE-IF-NOT 0 (FUNCTION (LAMBDA (ARG) (NOT (= 1 ARG)))) (COPY-SEQ #(1 1 1 1 1 1 1 1)) :START 1 :END 7 :COUNT 3) #(1 0 0 0 1 1 1 1))
2730 Pass: (EQUALP (NSUBSTITUTE-IF-NOT 0 (FUNCTION (LAMBDA (ARG) (NOT (= 1 ARG)))) (COPY-SEQ #(1 1 1 1 1 1 1 1)) :START 1 :END 7 :COUNT 3 :FROM-END T) #(1 1 1 1 0 0 0 1))
2731 Pass: (EQUALP (NSUBSTITUTE-IF-NOT 1 (FUNCTION (LAMBDA (ARG) (NOT (= 1 ARG)))) (COPY-SEQ #(1 0 1 0 1 0 1 0)) :START 1 :END 7 :COUNT 3 :FROM-END T :KEY (FUNCTION (LAMBDA (X) (IF (ZEROP X) 1 0)))) #(1 1 1 1 1 1 1 0))
2732 Pass: (EQUALP (NSUBSTITUTE-IF-NOT 1 (FUNCTION (LAMBDA (ARG) (NOT (>= 1 ARG)))) (COPY-SEQ #(1 0 1 0 1 0 1 0)) :START 1 :END 7 :COUNT 3 :FROM-END T :KEY (FUNCTION (LAMBDA (X) (IF (ZEROP X) 1 0)))) #(1 0 1 0 1 1 1 0))
2733 Pass: (STRING= (CONCATENATE (QUOTE STRING) "all" " " "together" " " "now") "all together now")
2734 Pass: (EQUAL (CONCATENATE (QUOTE LIST) "ABC" (QUOTE (D E F)) #(1 2 3) #(1 0 1 1)) (QUOTE (#\A #\B #\C D E F 1 2 3 1 0 1 1)))
2735 Pass: (NULL (CONCATENATE (QUOTE LIST)))
2736 Pass: (HANDLER-CASE (PROGN (CONCATENATE (QUOTE SYMBOL))) (ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
2737 Pass: (HANDLER-CASE (PROGN (CONCATENATE (QUOTE CLASS))) (ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
2738 Pass: (EQUAL (CONCATENATE (QUOTE LIST) (QUOTE NIL) (QUOTE (A B C)) (QUOTE (X Y Z))) (QUOTE (A B C X Y Z)))
2739 Pass: (EQUAL (CONCATENATE (QUOTE LIST) (QUOTE (A)) #(B) (QUOTE (C)) #(X Y) (QUOTE (Z))) (QUOTE (A B C X Y Z)))
2740 Pass: (EQUAL (CONCATENATE (QUOTE LIST) (QUOTE (A B C)) #(D E F) "ghi" #(0 1 0 1)) (QUOTE (A B C D E F #\g #\h #\i 0 1 0 1)))
2741 Pass: (NULL (CONCATENATE (QUOTE LIST)))
2742 Pass: (LET* ((LIST0 (QUOTE (A B C))) (LIST (CONCATENATE (QUOTE LIST) LIST0))) (AND (NOT (EQ LIST0 LIST)) (EQUAL LIST LIST0) (EQUAL LIST (QUOTE (A B C)))))
2743 Pass: (NULL (CONCATENATE (QUOTE LIST) (QUOTE NIL) #() "" #()))
2744 Pass: (EQUAL (CONCATENATE (QUOTE LIST) #(A B C) (QUOTE NIL) (QUOTE NIL) (QUOTE (X Y Z)) #() #() #() #(J K L)) (QUOTE (A B C X Y Z J K L)))
2745 Pass: (EQUALP (CONCATENATE (QUOTE VECTOR) (QUOTE NIL) (QUOTE (A B C)) (QUOTE (X Y Z))) #(A B C X Y Z))
2746 Pass: (EQUALP (CONCATENATE (QUOTE VECTOR) (QUOTE (A)) #(B) (QUOTE (C)) #(X Y) (QUOTE (Z))) #(A B C X Y Z))
2747 Pass: (EQUALP (CONCATENATE (QUOTE VECTOR) (QUOTE (A B C)) #(D E F) "ghi" #(0 1 0 1)) #(A B C D E F #\g #\h #\i 0 1 0 1))
2748 Pass: (EQUALP (CONCATENATE (QUOTE VECTOR)) #())
2749 Pass: (LET* ((VECTOR0 #(A B C)) (VECTOR (CONCATENATE (QUOTE VECTOR) VECTOR0))) (AND (NOT (EQ VECTOR0 VECTOR)) (EQUALP VECTOR VECTOR0) (EQUALP VECTOR #(A B C))))
2750 Pass: (EQUALP (CONCATENATE (QUOTE VECTOR) (QUOTE NIL) #() "" #()) #())
2751 Pass: (EQUALP (CONCATENATE (QUOTE VECTOR) #(A B C) (QUOTE NIL) (QUOTE NIL) (QUOTE (X Y Z)) #() #() #() #(J K L)) #(A B C X Y Z J K L))
2752 Pass: (STRING= (CONCATENATE (QUOTE STRING) "abc" "def" "ghi" "jkl" "mno" "pqr") "abcdefghijklmnopqr")
2753 Pass: (STRING= (CONCATENATE (QUOTE STRING) "" "abc" "" "def" "" "ghi" "" "" "jkl" "" "mno" "" "pqr" "" "") "abcdefghijklmnopqr")
2754 Pass: (STRING= (CONCATENATE (QUOTE STRING)) "")
2755 Pass: (STRING= (CONCATENATE (QUOTE STRING) "" (QUOTE NIL) #() #()) "")
2756 Pass: (STRING= (CONCATENATE (QUOTE STRING) "abc" (QUOTE (#\d #\e #\f #\g)) #(#\h #\i #\j #\k #\l)) "abcdefghijkl")
2757 Pass: (EQUAL (CONCATENATE (QUOTE BIT-VECTOR) #(0 1 0 1) #(1 0 1 0)) #(0 1 0 1 1 0 1 0))
2758 Pass: (EQUAL (CONCATENATE (QUOTE BIT-VECTOR) #(0 1 0 1) #(1 0 1 0) #() #(1 1) #(1) #(1)) #(0 1 0 1 1 0 1 0 1 1 1 1))
2759 Pass: (EQUAL (CONCATENATE (QUOTE BIT-VECTOR) (QUOTE (0 1 0 1)) (QUOTE (0 1 0 1)) #(0 1 0 1) #(0 1 0 1)) #(0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1))
2760 Pass: (EQUAL (CONCATENATE (QUOTE BIT-VECTOR)) #())
2761 Pass: (EQUAL (CONCATENATE (QUOTE BIT-VECTOR) #()) #())
2762 Pass: (EQUAL (CONCATENATE (QUOTE BIT-VECTOR) #() (QUOTE NIL) #()) #())
2763 Pass: (LET ((TEST1 (LIST 1 3 4 6 7)) (TEST2 (LIST 2 5 8))) (EQUAL (MERGE (QUOTE LIST) TEST1 TEST2 (FUNCTION <)) (QUOTE (1 2 3 4 5 6 7 8))))
2764 Pass: (LET ((TEST1 (COPY-SEQ "BOY")) (TEST2 (COPY-SEQ "nosy"))) (EQUAL (MERGE (QUOTE STRING) TEST1 TEST2 (FUNCTION CHAR-LESSP)) "BnOosYy"))
2765 Pass: (LET ((TEST1 (VECTOR (QUOTE (RED . 1)) (QUOTE (BLUE . 4)))) (TEST2 (VECTOR (QUOTE (YELLOW . 2)) (QUOTE (GREEN . 7))))) (EQUALP (MERGE (QUOTE VECTOR) TEST1 TEST2 (FUNCTION <) :KEY (FUNCTION CDR)) #((RED . 1) (YELLOW . 2) (BLUE . 4) (GREEN . 7))))
2766 Pass: (EQUAL (MERGE (QUOTE LIST) (LIST 1 3 5 7 9) (LIST 0 2 4 6 8) (FUNCTION <)) (QUOTE (0 1 2 3 4 5 6 7 8 9)))
2767 Pass: (EQUAL (MERGE (QUOTE CONS) (LIST 1 3 5 7 9) (LIST 0 2 4 6 8) (FUNCTION <)) (QUOTE (0 1 2 3 4 5 6 7 8 9)))
2768 Pass: (EQUAL (MERGE (QUOTE LIST) (LIST 0 1 2) NIL (FUNCTION <)) (QUOTE (0 1 2)))
2769 Pass: (EQUAL (MERGE (QUOTE LIST) NIL (LIST 0 1 2) (FUNCTION <)) (QUOTE (0 1 2)))
2770 Pass: (EQUAL (MERGE (QUOTE LIST) NIL NIL (FUNCTION <)) NIL)
2771 Pass: (EQUAL (MERGE (QUOTE LIST) (LIST (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (3 1))) (LIST (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2))) (FUNCTION <) :KEY (FUNCTION CAR)) (QUOTE ((1 1) (1 2) (2 1) (2 2) (3 1) (3 2))))
2772 Pass: (EQUAL (MERGE (QUOTE LIST) (LIST (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (2 1 1)) (QUOTE (3 1))) (LIST (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2))) (FUNCTION <) :KEY (FUNCTION CAR)) (QUOTE ((1 1) (1 2) (2 1) (2 1 1) (2 2) (3 1) (3 2))))
2773 Pass: (EQUAL (MERGE (QUOTE LIST) (LIST (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (2 1 1)) (QUOTE (3 1))) (LIST (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2)) (QUOTE (3 2 2))) (FUNCTION <) :KEY (FUNCTION CAR)) (QUOTE ((1 1) (1 2) (2 1) (2 1 1) (2 2) (3 1) (3 2) (3 2 2))))
2774 Pass: (EQUAL (MERGE (QUOTE LIST) (LIST 3 1 9 5 7) (LIST 8 6 0 2 4) (FUNCTION <)) (QUOTE (3 1 8 6 0 2 4 9 5 7)))
2775 Pass: (EQUAL (MERGE (QUOTE LIST) (VECTOR 1 3 5 7 9) (LIST 0 2 4 6 8) (FUNCTION <)) (QUOTE (0 1 2 3 4 5 6 7 8 9)))
2776 Pass: (EQUAL (MERGE (QUOTE CONS) (VECTOR 1 3 5 7 9) (LIST 0 2 4 6 8) (FUNCTION <)) (QUOTE (0 1 2 3 4 5 6 7 8 9)))
2777 Pass: (EQUAL (MERGE (QUOTE LIST) (VECTOR 0 1 2) NIL (FUNCTION <)) (QUOTE (0 1 2)))
2778 Pass: (EQUAL (MERGE (QUOTE LIST) #() (LIST 0 1 2) (FUNCTION <)) (QUOTE (0 1 2)))
2779 Pass: (EQUAL (MERGE (QUOTE LIST) #() #() (FUNCTION <)) NIL)
2780 Pass: (EQUAL (MERGE (QUOTE LIST) (VECTOR (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (3 1))) (LIST (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2))) (FUNCTION <) :KEY (FUNCTION CAR)) (QUOTE ((1 1) (1 2) (2 1) (2 2) (3 1) (3 2))))
2781 Pass: (EQUAL (MERGE (QUOTE LIST) (VECTOR (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (2 1 1)) (QUOTE (3 1))) (LIST (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2))) (FUNCTION <) :KEY (FUNCTION CAR)) (QUOTE ((1 1) (1 2) (2 1) (2 1 1) (2 2) (3 1) (3 2))))
2782 Pass: (EQUAL (MERGE (QUOTE LIST) (VECTOR (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (2 1 1)) (QUOTE (3 1))) (LIST (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2)) (QUOTE (3 2 2))) (FUNCTION <) :KEY (FUNCTION CAR)) (QUOTE ((1 1) (1 2) (2 1) (2 1 1) (2 2) (3 1) (3 2) (3 2 2))))
2783 Pass: (EQUAL (MERGE (QUOTE LIST) (VECTOR 3 1 9 5 7) (LIST 8 6 0 2 4) (FUNCTION <)) (QUOTE (3 1 8 6 0 2 4 9 5 7)))
2784 Pass: (EQUAL (MERGE (QUOTE LIST) (LIST 1 3 5 7 9) (VECTOR 0 2 4 6 8) (FUNCTION <)) (QUOTE (0 1 2 3 4 5 6 7 8 9)))
2785 Pass: (EQUAL (MERGE (QUOTE CONS) (LIST 1 3 5 7 9) (VECTOR 0 2 4 6 8) (FUNCTION <)) (QUOTE (0 1 2 3 4 5 6 7 8 9)))
2786 Pass: (EQUAL (MERGE (QUOTE LIST) (LIST 0 1 2) #() (FUNCTION <)) (QUOTE (0 1 2)))
2787 Pass: (EQUAL (MERGE (QUOTE LIST) NIL (VECTOR 0 1 2) (FUNCTION <)) (QUOTE (0 1 2)))
2788 Pass: (EQUAL (MERGE (QUOTE LIST) NIL #() (FUNCTION <)) NIL)
2789 Pass: (EQUAL (MERGE (QUOTE LIST) (LIST (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (3 1))) (VECTOR (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2))) (FUNCTION <) :KEY (FUNCTION CAR)) (QUOTE ((1 1) (1 2) (2 1) (2 2) (3 1) (3 2))))
2790 Pass: (EQUAL (MERGE (QUOTE LIST) (LIST (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (2 1 1)) (QUOTE (3 1))) (VECTOR (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2))) (FUNCTION <) :KEY (FUNCTION CAR)) (QUOTE ((1 1) (1 2) (2 1) (2 1 1) (2 2) (3 1) (3 2))))
2791 Pass: (EQUAL (MERGE (QUOTE LIST) (LIST (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (2 1 1)) (QUOTE (3 1))) (VECTOR (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2)) (QUOTE (3 2 2))) (FUNCTION <) :KEY (FUNCTION CAR)) (QUOTE ((1 1) (1 2) (2 1) (2 1 1) (2 2) (3 1) (3 2) (3 2 2))))
2792 Pass: (EQUAL (MERGE (QUOTE LIST) (LIST 3 1 9 5 7) (VECTOR 8 6 0 2 4) (FUNCTION <)) (QUOTE (3 1 8 6 0 2 4 9 5 7)))
2793 Pass: (EQUAL (MERGE (QUOTE LIST) (VECTOR 1 3 5 7 9) (VECTOR 0 2 4 6 8) (FUNCTION <)) (QUOTE (0 1 2 3 4 5 6 7 8 9)))
2794 Pass: (EQUAL (MERGE (QUOTE CONS) (VECTOR 1 3 5 7 9) (VECTOR 0 2 4 6 8) (FUNCTION <)) (QUOTE (0 1 2 3 4 5 6 7 8 9)))
2795 Pass: (EQUAL (MERGE (QUOTE LIST) (VECTOR 0 1 2) #() (FUNCTION <)) (QUOTE (0 1 2)))
2796 Pass: (EQUAL (MERGE (QUOTE LIST) #() (VECTOR 0 1 2) (FUNCTION <)) (QUOTE (0 1 2)))
2797 Pass: (EQUAL (MERGE (QUOTE LIST) #() #() (FUNCTION <)) NIL)
2798 Pass: (EQUAL (MERGE (QUOTE LIST) (VECTOR (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (3 1))) (VECTOR (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2))) (FUNCTION <) :KEY (FUNCTION CAR)) (QUOTE ((1 1) (1 2) (2 1) (2 2) (3 1) (3 2))))
2799 Pass: (EQUAL (MERGE (QUOTE LIST) (VECTOR (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (2 1 1)) (QUOTE (3 1))) (VECTOR (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2))) (FUNCTION <) :KEY (FUNCTION CAR)) (QUOTE ((1 1) (1 2) (2 1) (2 1 1) (2 2) (3 1) (3 2))))
2800 Pass: (EQUAL (MERGE (QUOTE LIST) (VECTOR (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (2 1 1)) (QUOTE (3 1))) (VECTOR (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2)) (QUOTE (3 2 2))) (FUNCTION <) :KEY (FUNCTION CAR)) (QUOTE ((1 1) (1 2) (2 1) (2 1 1) (2 2) (3 1) (3 2) (3 2 2))))
2801 Pass: (EQUAL (MERGE (QUOTE LIST) (VECTOR 3 1 9 5 7) (VECTOR 8 6 0 2 4) (FUNCTION <)) (QUOTE (3 1 8 6 0 2 4 9 5 7)))
2802 Pass: (EQUALP (MERGE (QUOTE VECTOR) (LIST 1 3 5 7 9) (LIST 0 2 4 6 8) (FUNCTION <)) #(0 1 2 3 4 5 6 7 8 9))
2803 Pass: (EQUALP (MERGE (QUOTE VECTOR) (LIST 1 3 5 7 9) (LIST 0 2 4 6 8) (FUNCTION <)) #(0 1 2 3 4 5 6 7 8 9))
2804 Pass: (EQUALP (MERGE (QUOTE VECTOR) (LIST 0 1 2) NIL (FUNCTION <)) #(0 1 2))
2805 Pass: (EQUALP (MERGE (QUOTE VECTOR) NIL (LIST 0 1 2) (FUNCTION <)) #(0 1 2))
2806 Pass: (EQUALP (MERGE (QUOTE VECTOR) NIL NIL (FUNCTION <)) #())
2807 Pass: (EQUALP (MERGE (QUOTE VECTOR) (LIST (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (3 1))) (LIST (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2))) (FUNCTION <) :KEY (FUNCTION CAR)) #((1 1) (1 2) (2 1) (2 2) (3 1) (3 2)))
2808 Pass: (EQUALP (MERGE (QUOTE VECTOR) (LIST (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (2 1 1)) (QUOTE (3 1))) (LIST (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2))) (FUNCTION <) :KEY (FUNCTION CAR)) #((1 1) (1 2) (2 1) (2 1 1) (2 2) (3 1) (3 2)))
2809 Pass: (EQUALP (MERGE (QUOTE VECTOR) (LIST (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (2 1 1)) (QUOTE (3 1))) (LIST (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2)) (QUOTE (3 2 2))) (FUNCTION <) :KEY (FUNCTION CAR)) #((1 1) (1 2) (2 1) (2 1 1) (2 2) (3 1) (3 2) (3 2 2)))
2810 Pass: (EQUALP (MERGE (QUOTE VECTOR) (LIST 3 1 9 5 7) (LIST 8 6 0 2 4) (FUNCTION <)) #(3 1 8 6 0 2 4 9 5 7))
2811 Pass: (EQUALP (MERGE (QUOTE VECTOR) (VECTOR 1 3 5 7 9) (LIST 0 2 4 6 8) (FUNCTION <)) #(0 1 2 3 4 5 6 7 8 9))
2812 Pass: (EQUALP (MERGE (QUOTE VECTOR) (VECTOR 1 3 5 7 9) (LIST 0 2 4 6 8) (FUNCTION <)) #(0 1 2 3 4 5 6 7 8 9))
2813 Pass: (EQUALP (MERGE (QUOTE VECTOR) (VECTOR 0 1 2) NIL (FUNCTION <)) #(0 1 2))
2814 Pass: (EQUALP (MERGE (QUOTE VECTOR) #() (LIST 0 1 2) (FUNCTION <)) #(0 1 2))
2815 Pass: (EQUALP (MERGE (QUOTE VECTOR) #() #() (FUNCTION <)) #())
2816 Pass: (EQUALP (MERGE (QUOTE VECTOR) (VECTOR (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (3 1))) (LIST (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2))) (FUNCTION <) :KEY (FUNCTION CAR)) #((1 1) (1 2) (2 1) (2 2) (3 1) (3 2)))
2817 Pass: (EQUALP (MERGE (QUOTE VECTOR) (VECTOR (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (2 1 1)) (QUOTE (3 1))) (LIST (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2))) (FUNCTION <) :KEY (FUNCTION CAR)) #((1 1) (1 2) (2 1) (2 1 1) (2 2) (3 1) (3 2)))
2818 Pass: (EQUALP (MERGE (QUOTE VECTOR) (VECTOR (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (2 1 1)) (QUOTE (3 1))) (LIST (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2)) (QUOTE (3 2 2))) (FUNCTION <) :KEY (FUNCTION CAR)) #((1 1) (1 2) (2 1) (2 1 1) (2 2) (3 1) (3 2) (3 2 2)))
2819 Pass: (EQUALP (MERGE (QUOTE VECTOR) (VECTOR 3 1 9 5 7) (LIST 8 6 0 2 4) (FUNCTION <)) #(3 1 8 6 0 2 4 9 5 7))
2820 Pass: (EQUALP (MERGE (QUOTE VECTOR) (LIST 1 3 5 7 9) (VECTOR 0 2 4 6 8) (FUNCTION <)) #(0 1 2 3 4 5 6 7 8 9))
2821 Pass: (EQUALP (MERGE (QUOTE VECTOR) (LIST 1 3 5 7 9) (VECTOR 0 2 4 6 8) (FUNCTION <)) #(0 1 2 3 4 5 6 7 8 9))
2822 Pass: (EQUALP (MERGE (QUOTE VECTOR) (LIST 0 1 2) #() (FUNCTION <)) #(0 1 2))
2823 Pass: (EQUALP (MERGE (QUOTE VECTOR) NIL (VECTOR 0 1 2) (FUNCTION <)) #(0 1 2))
2824 Pass: (EQUALP (MERGE (QUOTE VECTOR) NIL #() (FUNCTION <)) #())
2825 Pass: (EQUALP (MERGE (QUOTE VECTOR) (LIST (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (3 1))) (VECTOR (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2))) (FUNCTION <) :KEY (FUNCTION CAR)) #((1 1) (1 2) (2 1) (2 2) (3 1) (3 2)))
2826 Pass: (EQUALP (MERGE (QUOTE VECTOR) (LIST (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (2 1 1)) (QUOTE (3 1))) (VECTOR (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2))) (FUNCTION <) :KEY (FUNCTION CAR)) #((1 1) (1 2) (2 1) (2 1 1) (2 2) (3 1) (3 2)))
2827 Pass: (EQUALP (MERGE (QUOTE VECTOR) (LIST (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (2 1 1)) (QUOTE (3 1))) (VECTOR (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2)) (QUOTE (3 2 2))) (FUNCTION <) :KEY (FUNCTION CAR)) #((1 1) (1 2) (2 1) (2 1 1) (2 2) (3 1) (3 2) (3 2 2)))
2828 Pass: (EQUALP (MERGE (QUOTE VECTOR) (LIST 3 1 9 5 7) (VECTOR 8 6 0 2 4) (FUNCTION <)) #(3 1 8 6 0 2 4 9 5 7))
2829 Pass: (EQUALP (MERGE (QUOTE VECTOR) (VECTOR 1 3 5 7 9) (VECTOR 0 2 4 6 8) (FUNCTION <)) #(0 1 2 3 4 5 6 7 8 9))
2830 Pass: (EQUALP (MERGE (QUOTE VECTOR) (VECTOR 0 1 2) #() (FUNCTION <)) #(0 1 2))
2831 Pass: (EQUALP (MERGE (QUOTE VECTOR) #() (VECTOR 0 1 2) (FUNCTION <)) #(0 1 2))
2832 Pass: (EQUALP (MERGE (QUOTE VECTOR) #() #() (FUNCTION <)) #())
2833 Pass: (EQUALP (MERGE (QUOTE VECTOR) (VECTOR (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (3 1))) (VECTOR (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2))) (FUNCTION <) :KEY (FUNCTION CAR)) #((1 1) (1 2) (2 1) (2 2) (3 1) (3 2)))
2834 Pass: (EQUALP (MERGE (QUOTE VECTOR) (VECTOR (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (2 1 1)) (QUOTE (3 1))) (VECTOR (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2))) (FUNCTION <) :KEY (FUNCTION CAR)) #((1 1) (1 2) (2 1) (2 1 1) (2 2) (3 1) (3 2)))
2835 Pass: (EQUALP (MERGE (QUOTE VECTOR) (VECTOR (QUOTE (1 1)) (QUOTE (2 1)) (QUOTE (2 1 1)) (QUOTE (3 1))) (VECTOR (QUOTE (1 2)) (QUOTE (2 2)) (QUOTE (3 2)) (QUOTE (3 2 2))) (FUNCTION <) :KEY (FUNCTION CAR)) #((1 1) (1 2) (2 1) (2 1 1) (2 2) (3 1) (3 2) (3 2 2)))
2836 Pass: (EQUALP (MERGE (QUOTE VECTOR) (VECTOR 3 1 9 5 7) (VECTOR 8 6 0 2 4) (FUNCTION <)) #(3 1 8 6 0 2 4 9 5 7))
2837 Pass: (STRING= (MERGE (QUOTE STRING) (LIST #\a #\c #\e) (LIST #\b #\d #\f) (FUNCTION CHAR<)) "abcdef")
2838 Pass: (STRING= (MERGE (QUOTE STRING) (LIST #\a #\b #\c) (LIST #\d #\e #\f) (FUNCTION CHAR<)) "abcdef")
2839 Pass: (STRING= (MERGE (QUOTE STRING) (LIST #\a #\b #\c) (QUOTE NIL) (FUNCTION CHAR<)) "abc")
2840 Pass: (STRING= (MERGE (QUOTE STRING) (QUOTE NIL) (LIST #\a #\b #\c) (FUNCTION CHAR<)) "abc")
2841 Pass: (STRING= (MERGE (QUOTE STRING) (LIST #\a #\b #\c) (COPY-SEQ "") (FUNCTION CHAR<)) "abc")
2842 Pass: (STRING= (MERGE (QUOTE STRING) (LIST #\a #\b #\c) (COPY-SEQ "BCD") (FUNCTION CHAR-LESSP)) "abBcCD")
2843 Pass: (STRING= (MERGE (QUOTE STRING) (LIST #\a #\b #\z) #(#\c #\x #\y) (FUNCTION CHAR<)) "abcxyz")
2844 Pass: (EQUAL (MERGE (QUOTE BIT-VECTOR) (COPY-SEQ #(0 1 0 1)) (COPY-SEQ #(1 0 1 0)) (FUNCTION <)) #(0 1 0 1 1 0 1 0))
2845 Pass: (EQUAL (MERGE (QUOTE BIT-VECTOR) (COPY-SEQ #(0 1 0 1)) (COPY-SEQ #()) (FUNCTION <)) #(0 1 0 1))
2846 Pass: (EQUAL (MERGE (QUOTE BIT-VECTOR) (COPY-SEQ #(0 1 0 1)) (QUOTE NIL) (FUNCTION <)) #(0 1 0 1))
2847 Pass: (EQUAL (MERGE (QUOTE BIT-VECTOR) NIL (COPY-SEQ #(0 1 0 1)) (FUNCTION <)) #(0 1 0 1))
2848 Pass: (EQUAL (MERGE (QUOTE BIT-VECTOR) (COPY-SEQ #(0 1 0 1)) (COPY-SEQ #(0 1 0 1)) (FUNCTION <)) #(0 0 1 0 1 1 0 1))
2849 Pass: (EQUAL (REMOVE 4 (QUOTE (1 3 4 5 9))) (QUOTE (1 3 5 9)))
2850 Pass: (EQUAL (REMOVE 4 (QUOTE (1 2 4 1 3 4 5))) (QUOTE (1 2 1 3 5)))
2851 Pass: (EQUAL (REMOVE 4 (QUOTE (1 2 4 1 3 4 5)) :COUNT 1) (QUOTE (1 2 1 3 4 5)))
2852 Pass: (EQUAL (REMOVE 4 (QUOTE (1 2 4 1 3 4 5)) :COUNT 1 :FROM-END T) (QUOTE (1 2 4 1 3 5)))
2853 Pass: (EQUAL (REMOVE 3 (QUOTE (1 2 4 1 3 4 5)) :TEST (FUNCTION >)) (QUOTE (4 3 4 5)))
2854 Pass: (LET* ((LST (QUOTE (LIST OF FOUR ELEMENTS))) (LST2 (COPY-SEQ LST)) (LST3 (DELETE (QUOTE FOUR) LST))) (AND (EQUAL LST3 (QUOTE (LIST OF ELEMENTS))) (NOT (EQUAL LST LST2))))
2855 Pass: (EQUAL (REMOVE-IF (FUNCTION ODDP) (QUOTE (1 2 4 1 3 4 5))) (QUOTE (2 4 4)))
2856 Pass: (EQUAL (REMOVE-IF (FUNCTION EVENP) (QUOTE (1 2 4 1 3 4 5)) :COUNT 1 :FROM-END T) (QUOTE (1 2 4 1 3 5)))
2857 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION EVENP) (QUOTE (1 2 3 4 5 6 7 8 9)) :COUNT 2 :FROM-END T) (QUOTE (1 2 3 4 5 6 8)))
2858 Pass: (EQUAL (DELETE 4 (LIST 1 2 4 1 3 4 5)) (QUOTE (1 2 1 3 5)))
2859 Pass: (EQUAL (DELETE 4 (LIST 1 2 4 1 3 4 5) :COUNT 1) (QUOTE (1 2 1 3 4 5)))
2860 Pass: (EQUAL (DELETE 4 (LIST 1 2 4 1 3 4 5) :COUNT 1 :FROM-END T) (QUOTE (1 2 4 1 3 5)))
2861 Pass: (EQUAL (DELETE 3 (LIST 1 2 4 1 3 4 5) :TEST (FUNCTION >)) (QUOTE (4 3 4 5)))
2862 Pass: (EQUAL (DELETE-IF (FUNCTION ODDP) (LIST 1 2 4 1 3 4 5)) (QUOTE (2 4 4)))
2863 Pass: (EQUAL (DELETE-IF (FUNCTION EVENP) (LIST 1 2 4 1 3 4 5) :COUNT 1 :FROM-END T) (QUOTE (1 2 4 1 3 5)))
2864 Pass: (EQUAL (DELETE-IF (FUNCTION EVENP) (LIST 1 2 3 4 5 6)) (QUOTE (1 3 5)))
2865 Pass: (LET* ((LIST0 (LIST 0 1 2 3 4)) (LIST (REMOVE 3 LIST0))) (AND (NOT (EQ LIST0 LIST)) (EQUAL LIST0 (QUOTE (0 1 2 3 4))) (EQUAL LIST (QUOTE (0 1 2 4)))))
2866 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (B C B C)))
2867 Pass: (EQUAL (REMOVE (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (A C A C)))
2868 Pass: (EQUAL (REMOVE (QUOTE C) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (A B A B)))
2869 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE A) (QUOTE A))) (QUOTE NIL))
2870 Pass: (EQUAL (REMOVE (QUOTE Z) (LIST (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (A B C)))
2871 Pass: (EQUAL (REMOVE (QUOTE A) (QUOTE NIL)) (QUOTE NIL))
2872 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 0) (QUOTE (A B C A B C)))
2873 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1) (QUOTE (B C A B C)))
2874 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1 :FROM-END T) (QUOTE (A B C B C)))
2875 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2) (QUOTE (B C B C)))
2876 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2 :FROM-END T) (QUOTE (B C B C)))
2877 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3) (QUOTE (B C B C)))
2878 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3 :FROM-END T) (QUOTE (B C B C)))
2879 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4) (QUOTE (B C B C)))
2880 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4 :FROM-END T) (QUOTE (B C B C)))
2881 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -1) (QUOTE (A B C A B C)))
2882 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -10) (QUOTE (A B C A B C)))
2883 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -100) (QUOTE (A B C A B C)))
2884 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1) (QUOTE (A B C B C B C B C)))
2885 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 1) (QUOTE (A B C B C A B C A B C)))
2886 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 2) (QUOTE (A B C B C B C A B C)))
2887 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END NIL :COUNT 2) (QUOTE (A B C B C B C A B C)))
2888 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8) (QUOTE (A B C B C B C A B C)))
2889 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1) (QUOTE (A B C B C A B C A B C)))
2890 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1 :FROM-END T) (QUOTE (A B C A B C B C A B C)))
2891 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 0 :FROM-END T) (QUOTE (A B C A B C A B C A B C)))
2892 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT -100 :FROM-END T) (QUOTE (A B C A B C A B C A B C)))
2893 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 1) (QUOTE (A B C A B C A B C A B C)))
2894 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 2 :END 2) (QUOTE (A B C A B C A B C A B C)))
2895 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 12 :END 12) (QUOTE (A B C A B C A B C A B C)))
2896 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE (A)) (QUOTE (B)) (QUOTE (C)) (QUOTE (A)) (QUOTE (B)) (QUOTE (C))) :KEY (FUNCTION CAR)) (QUOTE ((B) (C) (B) (C))))
2897 Pass: (EQUAL (REMOVE (QUOTE A) (LIST (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A)) (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A))) :KEY (FUNCTION CDR)) (QUOTE ((A . B) (B . C) (A . B) (B . C))))
2898 Pass: (EQUAL (REMOVE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) (QUOTE (("Love") ("LOve") ("LOVe") ("LOVE"))))
2899 Pass: (EQUAL (REMOVE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT -10) (QUOTE (("Love") ("LOve") ("LOVe") ("LOVE"))))
2900 Pass: (EQUAL (REMOVE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL)) (QUOTE NIL))
2901 Pass: (EQUAL (REMOVE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL))) (QUOTE NIL))
2902 Pass: (EQUAL (REMOVE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 1) (QUOTE (("LOve") ("LOVe") ("LOVE"))))
2903 Pass: (EQUAL (REMOVE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 1) (QUOTE (("LOve") ("LOVe") ("LOVE"))))
2904 Pass: (EQUAL (REMOVE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 1 :FROM-END T) (QUOTE (("Love") ("LOve") ("LOVe"))))
2905 Pass: (EQUAL (REMOVE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 1 :FROM-END T) (QUOTE (("Love") ("LOve") ("LOVe"))))
2906 Pass: (EQUAL (REMOVE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 2 :FROM-END T) (QUOTE (("Love") ("LOve"))))
2907 Pass: (EQUAL (REMOVE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 2 :FROM-END T) (QUOTE (("Love") ("LOve"))))
2908 Pass: (EQUAL (REMOVE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :START 1 :END 3) (QUOTE (("Love") ("LOVE"))))
2909 Pass: (EQUAL (REMOVE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :START 1 :END 3) (QUOTE (("Love") ("LOVE"))))
2910 Pass: (EQUAL (REMOVE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 1 :START 1 :END 3) (QUOTE (("Love") ("LOVe") ("LOVE"))))
2911 Pass: (EQUAL (REMOVE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 1 :START 1 :END 3) (QUOTE (("Love") ("LOVe") ("LOVE"))))
2912 Pass: (EQUAL (REMOVE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 1 :FROM-END T :START 1 :END 3) (QUOTE (("Love") ("LOve") ("LOVE"))))
2913 Pass: (EQUAL (REMOVE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 1 :FROM-END T :START 1 :END 3) (QUOTE (("Love") ("LOve") ("LOVE"))))
2914 Pass: (EQUAL (REMOVE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 10 :FROM-END T :START 1 :END 3) (QUOTE (("Love") ("LOVE"))))
2915 Pass: (EQUAL (REMOVE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 10 :FROM-END T :START 1 :END 3) (QUOTE (("Love") ("LOVE"))))
2916 Pass: (LET* ((VECTOR0 (VECTOR 0 1 2 3 4)) (VECTOR (REMOVE 3 VECTOR0))) (AND (NOT (EQ VECTOR0 VECTOR)) (EQUALP VECTOR0 #(0 1 2 3 4)) (EQUALP VECTOR #(0 1 2 4))))
2917 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) #(B C B C))
2918 Pass: (EQUALP (REMOVE (QUOTE B) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) #(A C A C))
2919 Pass: (EQUALP (REMOVE (QUOTE C) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) #(A B A B))
2920 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE A) (QUOTE A))) #())
2921 Pass: (EQUALP (REMOVE (QUOTE Z) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C))) #(A B C))
2922 Pass: (EQUALP (REMOVE (QUOTE A) #()) #())
2923 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 0) #(A B C A B C))
2924 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1) #(B C A B C))
2925 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1 :FROM-END T) #(A B C B C))
2926 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2) #(B C B C))
2927 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2 :FROM-END T) #(B C B C))
2928 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3) #(B C B C))
2929 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3 :FROM-END T) #(B C B C))
2930 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4) #(B C B C))
2931 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4 :FROM-END T) #(B C B C))
2932 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -1) #(A B C A B C))
2933 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -10) #(A B C A B C))
2934 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -100) #(A B C A B C))
2935 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1) #(A B C B C B C B C))
2936 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 1) #(A B C B C A B C A B C))
2937 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 2) #(A B C B C B C A B C))
2938 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END NIL :COUNT 2) #(A B C B C B C A B C))
2939 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8) #(A B C B C B C A B C))
2940 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1) #(A B C B C A B C A B C))
2941 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1 :FROM-END T) #(A B C A B C B C A B C))
2942 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 0 :FROM-END T) #(A B C A B C A B C A B C))
2943 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT -100 :FROM-END T) #(A B C A B C A B C A B C))
2944 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 1) #(A B C A B C A B C A B C))
2945 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 2 :END 2) #(A B C A B C A B C A B C))
2946 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 12 :END 12) #(A B C A B C A B C A B C))
2947 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE (A)) (QUOTE (B)) (QUOTE (C)) (QUOTE (A)) (QUOTE (B)) (QUOTE (C))) :KEY (FUNCTION CAR)) #((B) (C) (B) (C)))
2948 Pass: (EQUALP (REMOVE (QUOTE A) (VECTOR (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A)) (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A))) :KEY (FUNCTION CDR)) #((A . B) (B . C) (A . B) (B . C)))
2949 Pass: (EQUALP (REMOVE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) #(("Love") ("LOve") ("LOVe") ("LOVE")))
2950 Pass: (EQUALP (REMOVE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT -10) #(("Love") ("LOve") ("LOVe") ("LOVE")))
2951 Pass: (EQUALP (REMOVE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL)) #())
2952 Pass: (EQUALP (REMOVE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL))) #())
2953 Pass: (EQUALP (REMOVE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 1) #(("LOve") ("LOVe") ("LOVE")))
2954 Pass: (EQUALP (REMOVE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 1) #(("LOve") ("LOVe") ("LOVE")))
2955 Pass: (EQUALP (REMOVE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 1 :FROM-END T) #(("Love") ("LOve") ("LOVe")))
2956 Pass: (EQUALP (REMOVE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 1 :FROM-END T) #(("Love") ("LOve") ("LOVe")))
2957 Pass: (EQUALP (REMOVE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 2 :FROM-END T) #(("Love") ("LOve")))
2958 Pass: (EQUALP (REMOVE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 2 :FROM-END T) #(("Love") ("LOve")))
2959 Pass: (EQUALP (REMOVE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :START 1 :END 3) #(("Love") ("LOVE")))
2960 Pass: (EQUALP (REMOVE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :START 1 :END 3) #(("Love") ("LOVE")))
2961 Pass: (EQUALP (REMOVE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 1 :START 1 :END 3) #(("Love") ("LOVe") ("LOVE")))
2962 Pass: (EQUALP (REMOVE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 1 :START 1 :END 3) #(("Love") ("LOVe") ("LOVE")))
2963 Pass: (EQUALP (REMOVE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 1 :FROM-END T :START 1 :END 3) #(("Love") ("LOve") ("LOVE")))
2964 Pass: (EQUALP (REMOVE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 1 :FROM-END T :START 1 :END 3) #(("Love") ("LOve") ("LOVE")))
2965 Pass: (EQUALP (REMOVE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 10 :FROM-END T :START 1 :END 3) #(("Love") ("LOVE")))
2966 Pass: (EQUALP (REMOVE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 10 :FROM-END T :START 1 :END 3) #(("Love") ("LOVE")))
2967 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabc")) "bcbc")
2968 Pass: (STRING= (REMOVE #\a (COPY-SEQ "")) "")
2969 Pass: (STRING= (REMOVE #\a (COPY-SEQ "xyz")) "xyz")
2970 Pass: (STRING= (REMOVE #\a (COPY-SEQ "ABCABC")) "ABCABC")
2971 Pass: (STRING= (REMOVE #\a (COPY-SEQ "ABCABC") :KEY (FUNCTION CHAR-DOWNCASE)) "BCBC")
2972 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabc") :COUNT 1) "bcabc")
2973 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabc") :COUNT 1 :FROM-END T) "abcbc")
2974 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabc") :COUNT 0) "abcabc")
2975 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabc") :COUNT -10) "abcabc")
2976 Pass: (LET* ((STR0 (COPY-SEQ "abc")) (STR (REMOVE #\a STR0))) (AND (NOT (EQ STR0 STR)) (STRING= STR0 "abc") (STRING= STR "bc")))
2977 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabc") :COUNT 0) "abcabc")
2978 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabc")) "bcbc")
2979 Pass: (STRING= (REMOVE #\b (COPY-SEQ "abcabc")) "acac")
2980 Pass: (STRING= (REMOVE #\c (COPY-SEQ "abcabc")) "abab")
2981 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabc") :COUNT 0) "abcabc")
2982 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabc") :COUNT 1) "bcabc")
2983 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabc") :COUNT 1 :FROM-END T) "abcbc")
2984 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabc") :COUNT 2) "bcbc")
2985 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabc") :COUNT 2 :FROM-END T) "bcbc")
2986 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabc") :COUNT 3) "bcbc")
2987 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabc") :COUNT 3 :FROM-END T) "bcbc")
2988 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabc") :COUNT 4) "bcbc")
2989 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabc") :COUNT 4 :FROM-END T) "bcbc")
2990 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabc") :COUNT -1) "abcabc")
2991 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabc") :COUNT -10) "abcabc")
2992 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabc") :COUNT -100) "abcabc")
2993 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabcabcabc") :START 1) "abcbcbcbc")
2994 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabcabcabc") :START 1 :COUNT 1) "abcbcabcabc")
2995 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabcabcabc") :START 1 :COUNT 2) "abcbcbcabc")
2996 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabcabcabc") :START 1 :END NIL :COUNT 2) "abcbcbcabc")
2997 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabcabcabc") :START 1 :END 8) "abcbcbcabc")
2998 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT 1) "abcbcabcabc")
2999 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT 1 :FROM-END T) "abcabcbcabc")
3000 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT 0 :FROM-END T) "abcabcabcabc")
3001 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT -100 :FROM-END T) "abcabcabcabc")
3002 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabcabcabc") :START 1 :END 1) "abcabcabcabc")
3003 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabcabcabc") :START 2 :END 2) "abcabcabcabc")
3004 Pass: (STRING= (REMOVE #\a (COPY-SEQ "abcabcabcabc") :START 12 :END 12) "abcabcabcabc")
3005 Pass: (EQUAL (REMOVE 0 #(0 1 0 1)) #(1 1))
3006 Pass: (EQUAL (REMOVE 0 #(0 1 0 1 0 1 0 1) :COUNT 1) #(1 0 1 0 1 0 1))
3007 Pass: (EQUAL (REMOVE 0 #(0 1 0 1 0 1 0 1) :COUNT 1 :FROM-END T) #(0 1 0 1 0 1 1))
3008 Pass: (EQUAL (REMOVE 0 #(0 1 0 1 0 1 0 1) :START 1) #(0 1 1 1 1))
3009 Pass: (EQUAL (REMOVE 0 #(0 1 0 1 0 1 0 1) :START 1 :END NIL) #(0 1 1 1 1))
3010 Pass: (EQUAL (REMOVE 0 #(0 1 0 1 0 1 0 1) :START 1 :END 6) #(0 1 1 1 0 1))
3011 Pass: (EQUAL (REMOVE 0 #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1) #(0 1 1 0 1 0 1))
3012 Pass: (EQUAL (REMOVE 0 #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T) #(0 1 0 1 1 0 1))
3013 Pass: (EQUAL (REMOVE 0 #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T :TEST (FUNCTION (LAMBDA (A B) (DECLARE (IGNORE A)) (ODDP B)))) #(0 1 0 1 0 0 1))
3014 Pass: (EQUAL (REMOVE 0 #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T :TEST-NOT (FUNCTION (LAMBDA (A B) (DECLARE (IGNORE A)) (EVENP B)))) #(0 1 0 1 0 0 1))
3015 Pass: (EQUAL (REMOVE 0 #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T :TEST (FUNCTION (LAMBDA (A B) (DECLARE (IGNORE A)) (EVENP B)))) #(0 1 0 1 1 0 1))
3016 Pass: (EQUAL (REMOVE 0 #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T :TEST-NOT (FUNCTION (LAMBDA (A B) (DECLARE (IGNORE A)) (ODDP B)))) #(0 1 0 1 1 0 1))
3017 Pass: (EQUAL (REMOVE 0 #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T :KEY (FUNCTION (LAMBDA (ARG) (* ARG 10))) :TEST (FUNCTION (LAMBDA (A B) (DECLARE (IGNORE A)) (> B 1)))) #(0 1 0 1 0 0 1))
3018 Pass: (LET* ((LIST0 (LIST 0 1 2 3 4)) (LIST (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG 3))) LIST0))) (AND (NOT (EQ LIST0 LIST)) (EQUAL LIST0 (QUOTE (0 1 2 3 4))) (EQUAL LIST (QUOTE (0 1 2 4)))))
3019 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (B C B C)))
3020 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE B)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (A C A C)))
3021 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE C)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (A B A B)))
3022 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE A) (QUOTE A))) (QUOTE NIL))
3023 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE Z)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (A B C)))
3024 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (QUOTE NIL)) (QUOTE NIL))
3025 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 0) (QUOTE (A B C A B C)))
3026 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1) (QUOTE (B C A B C)))
3027 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1 :FROM-END T) (QUOTE (A B C B C)))
3028 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2) (QUOTE (B C B C)))
3029 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2 :FROM-END T) (QUOTE (B C B C)))
3030 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3) (QUOTE (B C B C)))
3031 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3 :FROM-END T) (QUOTE (B C B C)))
3032 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4) (QUOTE (B C B C)))
3033 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4 :FROM-END T) (QUOTE (B C B C)))
3034 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -1) (QUOTE (A B C A B C)))
3035 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -10) (QUOTE (A B C A B C)))
3036 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -100) (QUOTE (A B C A B C)))
3037 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1) (QUOTE (A B C B C B C B C)))
3038 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 1) (QUOTE (A B C B C A B C A B C)))
3039 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 2) (QUOTE (A B C B C B C A B C)))
3040 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END NIL :COUNT 2) (QUOTE (A B C B C B C A B C)))
3041 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8) (QUOTE (A B C B C B C A B C)))
3042 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1) (QUOTE (A B C B C A B C A B C)))
3043 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1 :FROM-END T) (QUOTE (A B C A B C B C A B C)))
3044 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 0 :FROM-END T) (QUOTE (A B C A B C A B C A B C)))
3045 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT -100 :FROM-END T) (QUOTE (A B C A B C A B C A B C)))
3046 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 1) (QUOTE (A B C A B C A B C A B C)))
3047 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 2 :END 2) (QUOTE (A B C A B C A B C A B C)))
3048 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 12 :END 12) (QUOTE (A B C A B C A B C A B C)))
3049 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE (A)) (QUOTE (B)) (QUOTE (C)) (QUOTE (A)) (QUOTE (B)) (QUOTE (C))) :KEY (FUNCTION CAR)) (QUOTE ((B) (C) (B) (C))))
3050 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A)) (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A))) :KEY (FUNCTION CDR)) (QUOTE ((A . B) (B . C) (A . B) (B . C))))
3051 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG "love"))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) (QUOTE (("Love") ("LOve") ("LOVe") ("LOVE"))))
3052 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG "love"))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT -10) (QUOTE (("Love") ("LOve") ("LOVe") ("LOVE"))))
3053 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) (QUOTE NIL))
3054 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1) (QUOTE (("LOve") ("LOVe") ("LOVE"))))
3055 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :FROM-END T) (QUOTE (("Love") ("LOve") ("LOVe"))))
3056 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 2 :FROM-END T) (QUOTE (("Love") ("LOve"))))
3057 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :START 1 :END 3) (QUOTE (("Love") ("LOVE"))))
3058 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :START 1 :END 3) (QUOTE (("Love") ("LOVe") ("LOVE"))))
3059 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :FROM-END T :START 1 :END 3) (QUOTE (("Love") ("LOve") ("LOVE"))))
3060 Pass: (EQUAL (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 10 :FROM-END T :START 1 :END 3) (QUOTE (("Love") ("LOVE"))))
3061 Pass: (LET* ((VECTOR0 (VECTOR 0 1 2 3 4)) (VECTOR (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG 3))) VECTOR0))) (AND (NOT (EQ VECTOR0 VECTOR)) (EQUALP VECTOR0 #(0 1 2 3 4)) (EQUALP VECTOR #(0 1 2 4))))
3062 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) #(B C B C))
3063 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE B)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) #(A C A C))
3064 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE C)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) #(A B A B))
3065 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE A) (QUOTE A))) #())
3066 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE Z)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C))) #(A B C))
3067 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) #()) #())
3068 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 0) #(A B C A B C))
3069 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1) #(B C A B C))
3070 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1 :FROM-END T) #(A B C B C))
3071 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2) #(B C B C))
3072 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2 :FROM-END T) #(B C B C))
3073 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3) #(B C B C))
3074 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3 :FROM-END T) #(B C B C))
3075 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4) #(B C B C))
3076 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4 :FROM-END T) #(B C B C))
3077 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -1) #(A B C A B C))
3078 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -10) #(A B C A B C))
3079 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -100) #(A B C A B C))
3080 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1) #(A B C B C B C B C))
3081 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 1) #(A B C B C A B C A B C))
3082 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 2) #(A B C B C B C A B C))
3083 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END NIL :COUNT 2) #(A B C B C B C A B C))
3084 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8) #(A B C B C B C A B C))
3085 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1) #(A B C B C A B C A B C))
3086 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1 :FROM-END T) #(A B C A B C B C A B C))
3087 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 0 :FROM-END T) #(A B C A B C A B C A B C))
3088 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT -100 :FROM-END T) #(A B C A B C A B C A B C))
3089 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 1) #(A B C A B C A B C A B C))
3090 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 2 :END 2) #(A B C A B C A B C A B C))
3091 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 12 :END 12) #(A B C A B C A B C A B C))
3092 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE (A)) (QUOTE (B)) (QUOTE (C)) (QUOTE (A)) (QUOTE (B)) (QUOTE (C))) :KEY (FUNCTION CAR)) #((B) (C) (B) (C)))
3093 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A)) (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A))) :KEY (FUNCTION CDR)) #((A . B) (B . C) (A . B) (B . C)))
3094 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) #(("Love") ("LOve") ("LOVe") ("LOVE")))
3095 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT -10) #(("Love") ("LOve") ("LOVe") ("LOVE")))
3096 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) #())
3097 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) #())
3098 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1) #(("LOve") ("LOVe") ("LOVE")))
3099 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1) #(("LOve") ("LOVe") ("LOVE")))
3100 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :FROM-END T) #(("Love") ("LOve") ("LOVe")))
3101 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :FROM-END T) #(("Love") ("LOve") ("LOVe")))
3102 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 2 :FROM-END T) #(("Love") ("LOve")))
3103 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 2 :FROM-END T) #(("Love") ("LOve")))
3104 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :START 1 :END 3) #(("Love") ("LOVE")))
3105 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :START 1 :END 3) #(("Love") ("LOVe") ("LOVE")))
3106 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :FROM-END T :START 1 :END 3) #(("Love") ("LOve") ("LOVE")))
3107 Pass: (EQUALP (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 10 :FROM-END T :START 1 :END 3) #(("Love") ("LOVE")))
3108 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc")) "bcbc")
3109 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "")) "")
3110 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "xyz")) "xyz")
3111 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "ABCABC") :KEY (FUNCTION CHAR-DOWNCASE)) "BCBC")
3112 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 1) "bcabc")
3113 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 1 :FROM-END T) "abcbc")
3114 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 0) "abcabc")
3115 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT -10) "abcabc")
3116 Pass: (LET* ((STR0 (COPY-SEQ "abc")) (STR (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) STR0))) (AND (NOT (EQ STR0 STR)) (STRING= STR0 "abc") (STRING= STR "bc")))
3117 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 0) "abcabc")
3118 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc")) "bcbc")
3119 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\b))) (COPY-SEQ "abcabc")) "acac")
3120 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\c))) (COPY-SEQ "abcabc")) "abab")
3121 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 0) "abcabc")
3122 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 1) "bcabc")
3123 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 1 :FROM-END T) "abcbc")
3124 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 2) "bcbc")
3125 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 2 :FROM-END T) "bcbc")
3126 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 3) "bcbc")
3127 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 3 :FROM-END T) "bcbc")
3128 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 4) "bcbc")
3129 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 4 :FROM-END T) "bcbc")
3130 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT -1) "abcabc")
3131 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT -10) "abcabc")
3132 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT -100) "abcabc")
3133 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 1) "abcbcbcbc")
3134 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 1 :COUNT 1) "abcbcabcabc")
3135 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 1 :COUNT 2) "abcbcbcabc")
3136 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 1 :END NIL :COUNT 2) "abcbcbcabc")
3137 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 1 :END 8) "abcbcbcabc")
3138 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT 1) "abcbcabcabc")
3139 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT 1 :FROM-END T) "abcabcbcabc")
3140 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT 0 :FROM-END T) "abcabcabcabc")
3141 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT -100 :FROM-END T) "abcabcabcabc")
3142 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 1 :END 1) "abcabcabcabc")
3143 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 2 :END 2) "abcabcabcabc")
3144 Pass: (STRING= (REMOVE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 12 :END 12) "abcabcabcabc")
3145 Pass: (EQUAL (REMOVE-IF (FUNCTION ZEROP) #(0 1 0 1)) #(1 1))
3146 Pass: (EQUAL (REMOVE-IF (FUNCTION ZEROP) #(0 1 0 1 0 1 0 1) :COUNT 1) #(1 0 1 0 1 0 1))
3147 Pass: (EQUAL (REMOVE-IF (FUNCTION ZEROP) #(0 1 0 1 0 1 0 1) :COUNT 1 :FROM-END T) #(0 1 0 1 0 1 1))
3148 Pass: (EQUAL (REMOVE-IF (FUNCTION ZEROP) #(0 1 0 1 0 1 0 1) :START 1) #(0 1 1 1 1))
3149 Pass: (EQUAL (REMOVE-IF (FUNCTION ZEROP) #(0 1 0 1 0 1 0 1) :START 1 :END NIL) #(0 1 1 1 1))
3150 Pass: (EQUAL (REMOVE-IF (FUNCTION ZEROP) #(0 1 0 1 0 1 0 1) :START 1 :END 6) #(0 1 1 1 0 1))
3151 Pass: (EQUAL (REMOVE-IF (FUNCTION ZEROP) #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1) #(0 1 1 0 1 0 1))
3152 Pass: (EQUAL (REMOVE-IF (FUNCTION ZEROP) #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T) #(0 1 0 1 1 0 1))
3153 Pass: (EQUAL (REMOVE-IF (FUNCTION ODDP) #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T) #(0 1 0 1 0 0 1))
3154 Pass: (EQUAL (REMOVE-IF (FUNCTION EVENP) #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T) #(0 1 0 1 1 0 1))
3155 Pass: (EQUAL (REMOVE-IF (FUNCTION PLUSP) #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T :KEY (FUNCTION (LAMBDA (ARG) (* ARG 10)))) #(0 1 0 1 0 0 1))
3156 Pass: (LET* ((LIST0 (LIST 0 1 2 3 4)) (LIST (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG 3)))) LIST0))) (AND (NOT (EQ LIST0 LIST)) (EQUAL LIST0 (QUOTE (0 1 2 3 4))) (EQUAL LIST (QUOTE (0 1 2 4)))))
3157 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (B C B C)))
3158 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE B))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (A C A C)))
3159 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE C))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (A B A B)))
3160 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE A) (QUOTE A))) (QUOTE NIL))
3161 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE Z))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (A B C)))
3162 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (QUOTE NIL)) (QUOTE NIL))
3163 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 0) (QUOTE (A B C A B C)))
3164 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1) (QUOTE (B C A B C)))
3165 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1 :FROM-END T) (QUOTE (A B C B C)))
3166 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2) (QUOTE (B C B C)))
3167 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2 :FROM-END T) (QUOTE (B C B C)))
3168 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3) (QUOTE (B C B C)))
3169 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3 :FROM-END T) (QUOTE (B C B C)))
3170 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4) (QUOTE (B C B C)))
3171 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4 :FROM-END T) (QUOTE (B C B C)))
3172 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -1) (QUOTE (A B C A B C)))
3173 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -10) (QUOTE (A B C A B C)))
3174 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -100) (QUOTE (A B C A B C)))
3175 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1) (QUOTE (A B C B C B C B C)))
3176 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 1) (QUOTE (A B C B C A B C A B C)))
3177 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 2) (QUOTE (A B C B C B C A B C)))
3178 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END NIL :COUNT 2) (QUOTE (A B C B C B C A B C)))
3179 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8) (QUOTE (A B C B C B C A B C)))
3180 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1) (QUOTE (A B C B C A B C A B C)))
3181 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1 :FROM-END T) (QUOTE (A B C A B C B C A B C)))
3182 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 0 :FROM-END T) (QUOTE (A B C A B C A B C A B C)))
3183 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT -100 :FROM-END T) (QUOTE (A B C A B C A B C A B C)))
3184 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 1) (QUOTE (A B C A B C A B C A B C)))
3185 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 2 :END 2) (QUOTE (A B C A B C A B C A B C)))
3186 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 12 :END 12) (QUOTE (A B C A B C A B C A B C)))
3187 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE (A)) (QUOTE (B)) (QUOTE (C)) (QUOTE (A)) (QUOTE (B)) (QUOTE (C))) :KEY (FUNCTION CAR)) (QUOTE ((B) (C) (B) (C))))
3188 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A)) (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A))) :KEY (FUNCTION CDR)) (QUOTE ((A . B) (B . C) (A . B) (B . C))))
3189 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG "love")))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) (QUOTE (("Love") ("LOve") ("LOVe") ("LOVE"))))
3190 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG "love")))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT -10) (QUOTE (("Love") ("LOve") ("LOVe") ("LOVE"))))
3191 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) (QUOTE NIL))
3192 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1) (QUOTE (("LOve") ("LOVe") ("LOVE"))))
3193 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :FROM-END T) (QUOTE (("Love") ("LOve") ("LOVe"))))
3194 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 2 :FROM-END T) (QUOTE (("Love") ("LOve"))))
3195 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :START 1 :END 3) (QUOTE (("Love") ("LOVE"))))
3196 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :START 1 :END 3) (QUOTE (("Love") ("LOVe") ("LOVE"))))
3197 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :FROM-END T :START 1 :END 3) (QUOTE (("Love") ("LOve") ("LOVE"))))
3198 Pass: (EQUAL (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 10 :FROM-END T :START 1 :END 3) (QUOTE (("Love") ("LOVE"))))
3199 Pass: (LET* ((VECTOR0 (VECTOR 0 1 2 3 4)) (VECTOR (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG 3)))) VECTOR0))) (AND (NOT (EQ VECTOR0 VECTOR)) (EQUALP VECTOR0 #(0 1 2 3 4)) (EQUALP VECTOR #(0 1 2 4))))
3200 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) #(B C B C))
3201 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE B))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) #(A C A C))
3202 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE C))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) #(A B A B))
3203 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE A) (QUOTE A))) #())
3204 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE Z))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C))) #(A B C))
3205 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) #()) #())
3206 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 0) #(A B C A B C))
3207 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1) #(B C A B C))
3208 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1 :FROM-END T) #(A B C B C))
3209 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2) #(B C B C))
3210 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2 :FROM-END T) #(B C B C))
3211 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3) #(B C B C))
3212 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3 :FROM-END T) #(B C B C))
3213 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4) #(B C B C))
3214 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4 :FROM-END T) #(B C B C))
3215 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -1) #(A B C A B C))
3216 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -10) #(A B C A B C))
3217 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -100) #(A B C A B C))
3218 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1) #(A B C B C B C B C))
3219 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 1) #(A B C B C A B C A B C))
3220 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 2) #(A B C B C B C A B C))
3221 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END NIL :COUNT 2) #(A B C B C B C A B C))
3222 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8) #(A B C B C B C A B C))
3223 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1) #(A B C B C A B C A B C))
3224 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1 :FROM-END T) #(A B C A B C B C A B C))
3225 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 0 :FROM-END T) #(A B C A B C A B C A B C))
3226 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT -100 :FROM-END T) #(A B C A B C A B C A B C))
3227 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 1) #(A B C A B C A B C A B C))
3228 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 2 :END 2) #(A B C A B C A B C A B C))
3229 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 12 :END 12) #(A B C A B C A B C A B C))
3230 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE (A)) (QUOTE (B)) (QUOTE (C)) (QUOTE (A)) (QUOTE (B)) (QUOTE (C))) :KEY (FUNCTION CAR)) #((B) (C) (B) (C)))
3231 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A)) (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A))) :KEY (FUNCTION CDR)) #((A . B) (B . C) (A . B) (B . C)))
3232 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) #(("Love") ("LOve") ("LOVe") ("LOVE")))
3233 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT -10) #(("Love") ("LOve") ("LOVe") ("LOVE")))
3234 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) #())
3235 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) #())
3236 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1) #(("LOve") ("LOVe") ("LOVE")))
3237 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1) #(("LOve") ("LOVe") ("LOVE")))
3238 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :FROM-END T) #(("Love") ("LOve") ("LOVe")))
3239 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :FROM-END T) #(("Love") ("LOve") ("LOVe")))
3240 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 2 :FROM-END T) #(("Love") ("LOve")))
3241 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 2 :FROM-END T) #(("Love") ("LOve")))
3242 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :START 1 :END 3) #(("Love") ("LOVE")))
3243 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :START 1 :END 3) #(("Love") ("LOVe") ("LOVE")))
3244 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :FROM-END T :START 1 :END 3) #(("Love") ("LOve") ("LOVE")))
3245 Pass: (EQUALP (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 10 :FROM-END T :START 1 :END 3) #(("Love") ("LOVE")))
3246 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc")) "bcbc")
3247 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "")) "")
3248 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "xyz")) "xyz")
3249 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "ABCABC") :KEY (FUNCTION CHAR-DOWNCASE)) "BCBC")
3250 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 1) "bcabc")
3251 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 1 :FROM-END T) "abcbc")
3252 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 0) "abcabc")
3253 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT -10) "abcabc")
3254 Pass: (LET* ((STR0 (COPY-SEQ "abc")) (STR (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) STR0))) (AND (NOT (EQ STR0 STR)) (STRING= STR0 "abc") (STRING= STR "bc")))
3255 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 0) "abcabc")
3256 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc")) "bcbc")
3257 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\b)))) (COPY-SEQ "abcabc")) "acac")
3258 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\c)))) (COPY-SEQ "abcabc")) "abab")
3259 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 0) "abcabc")
3260 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 1) "bcabc")
3261 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 1 :FROM-END T) "abcbc")
3262 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 2) "bcbc")
3263 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 2 :FROM-END T) "bcbc")
3264 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 3) "bcbc")
3265 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 3 :FROM-END T) "bcbc")
3266 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 4) "bcbc")
3267 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 4 :FROM-END T) "bcbc")
3268 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT -1) "abcabc")
3269 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT -10) "abcabc")
3270 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT -100) "abcabc")
3271 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 1) "abcbcbcbc")
3272 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 1 :COUNT 1) "abcbcabcabc")
3273 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 1 :COUNT 2) "abcbcbcabc")
3274 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 1 :END NIL :COUNT 2) "abcbcbcabc")
3275 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 1 :END 8) "abcbcbcabc")
3276 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT 1) "abcbcabcabc")
3277 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT 1 :FROM-END T) "abcabcbcabc")
3278 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT 0 :FROM-END T) "abcabcabcabc")
3279 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT -100 :FROM-END T) "abcabcabcabc")
3280 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 1 :END 1) "abcabcabcabc")
3281 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 2 :END 2) "abcabcabcabc")
3282 Pass: (STRING= (REMOVE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 12 :END 12) "abcabcabcabc")
3283 Pass: (EQUAL (REMOVE-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 1 0 1)) #(1 1))
3284 Pass: (EQUAL (REMOVE-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 1 0 1 0 1 0 1) :COUNT 1) #(1 0 1 0 1 0 1))
3285 Pass: (EQUAL (REMOVE-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 1 0 1 0 1 0 1) :COUNT 1 :FROM-END T) #(0 1 0 1 0 1 1))
3286 Pass: (EQUAL (REMOVE-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 1 0 1 0 1 0 1) :START 1) #(0 1 1 1 1))
3287 Pass: (EQUAL (REMOVE-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 1 0 1 0 1 0 1) :START 1 :END NIL) #(0 1 1 1 1))
3288 Pass: (EQUAL (REMOVE-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 1 0 1 0 1 0 1) :START 1 :END 6) #(0 1 1 1 0 1))
3289 Pass: (EQUAL (REMOVE-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1) #(0 1 1 0 1 0 1))
3290 Pass: (EQUAL (REMOVE-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T) #(0 1 0 1 1 0 1))
3291 Pass: (EQUAL (REMOVE-IF-NOT (COMPLEMENT (FUNCTION ODDP)) #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T) #(0 1 0 1 0 0 1))
3292 Pass: (EQUAL (REMOVE-IF-NOT (COMPLEMENT (FUNCTION EVENP)) #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T) #(0 1 0 1 1 0 1))
3293 Pass: (EQUAL (REMOVE-IF-NOT (COMPLEMENT (FUNCTION PLUSP)) #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T :KEY (FUNCTION (LAMBDA (ARG) (* ARG 10)))) #(0 1 0 1 0 0 1))
3294 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (B C B C)))
3295 Pass: (EQUAL (DELETE (QUOTE B) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (A C A C)))
3296 Pass: (EQUAL (DELETE (QUOTE C) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (A B A B)))
3297 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE A) (QUOTE A))) (QUOTE NIL))
3298 Pass: (EQUAL (DELETE (QUOTE Z) (LIST (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (A B C)))
3299 Pass: (EQUAL (DELETE (QUOTE A) (QUOTE NIL)) (QUOTE NIL))
3300 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 0) (QUOTE (A B C A B C)))
3301 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1) (QUOTE (B C A B C)))
3302 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1 :FROM-END T) (QUOTE (A B C B C)))
3303 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2) (QUOTE (B C B C)))
3304 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2 :FROM-END T) (QUOTE (B C B C)))
3305 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3) (QUOTE (B C B C)))
3306 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3 :FROM-END T) (QUOTE (B C B C)))
3307 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4) (QUOTE (B C B C)))
3308 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4 :FROM-END T) (QUOTE (B C B C)))
3309 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -1) (QUOTE (A B C A B C)))
3310 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -10) (QUOTE (A B C A B C)))
3311 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -100) (QUOTE (A B C A B C)))
3312 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1) (QUOTE (A B C B C B C B C)))
3313 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 1) (QUOTE (A B C B C A B C A B C)))
3314 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 2) (QUOTE (A B C B C B C A B C)))
3315 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END NIL :COUNT 2) (QUOTE (A B C B C B C A B C)))
3316 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8) (QUOTE (A B C B C B C A B C)))
3317 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1) (QUOTE (A B C B C A B C A B C)))
3318 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1 :FROM-END T) (QUOTE (A B C A B C B C A B C)))
3319 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 0 :FROM-END T) (QUOTE (A B C A B C A B C A B C)))
3320 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT -100 :FROM-END T) (QUOTE (A B C A B C A B C A B C)))
3321 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 1) (QUOTE (A B C A B C A B C A B C)))
3322 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 2 :END 2) (QUOTE (A B C A B C A B C A B C)))
3323 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 12 :END 12) (QUOTE (A B C A B C A B C A B C)))
3324 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE (A)) (QUOTE (B)) (QUOTE (C)) (QUOTE (A)) (QUOTE (B)) (QUOTE (C))) :KEY (FUNCTION CAR)) (QUOTE ((B) (C) (B) (C))))
3325 Pass: (EQUAL (DELETE (QUOTE A) (LIST (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A)) (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A))) :KEY (FUNCTION CDR)) (QUOTE ((A . B) (B . C) (A . B) (B . C))))
3326 Pass: (EQUAL (DELETE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) (QUOTE (("Love") ("LOve") ("LOVe") ("LOVE"))))
3327 Pass: (EQUAL (DELETE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT -10) (QUOTE (("Love") ("LOve") ("LOVe") ("LOVE"))))
3328 Pass: (EQUAL (DELETE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL)) (QUOTE NIL))
3329 Pass: (EQUAL (DELETE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL))) (QUOTE NIL))
3330 Pass: (EQUAL (DELETE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 1) (QUOTE (("LOve") ("LOVe") ("LOVE"))))
3331 Pass: (EQUAL (DELETE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 1) (QUOTE (("LOve") ("LOVe") ("LOVE"))))
3332 Pass: (EQUAL (DELETE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 1 :FROM-END T) (QUOTE (("Love") ("LOve") ("LOVe"))))
3333 Pass: (EQUAL (DELETE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 1 :FROM-END T) (QUOTE (("Love") ("LOve") ("LOVe"))))
3334 Pass: (EQUAL (DELETE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 2 :FROM-END T) (QUOTE (("Love") ("LOve"))))
3335 Pass: (EQUAL (DELETE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 2 :FROM-END T) (QUOTE (("Love") ("LOve"))))
3336 Pass: (EQUAL (DELETE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :START 1 :END 3) (QUOTE (("Love") ("LOVE"))))
3337 Pass: (EQUAL (DELETE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :START 1 :END 3) (QUOTE (("Love") ("LOVE"))))
3338 Pass: (EQUAL (DELETE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 1 :START 1 :END 3) (QUOTE (("Love") ("LOVe") ("LOVE"))))
3339 Pass: (EQUAL (DELETE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 1 :START 1 :END 3) (QUOTE (("Love") ("LOVe") ("LOVE"))))
3340 Pass: (EQUAL (DELETE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 1 :FROM-END T :START 1 :END 3) (QUOTE (("Love") ("LOve") ("LOVE"))))
3341 Pass: (EQUAL (DELETE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 1 :FROM-END T :START 1 :END 3) (QUOTE (("Love") ("LOve") ("LOVE"))))
3342 Pass: (EQUAL (DELETE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 10 :FROM-END T :START 1 :END 3) (QUOTE (("Love") ("LOVE"))))
3343 Pass: (EQUAL (DELETE "love" (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 10 :FROM-END T :START 1 :END 3) (QUOTE (("Love") ("LOVE"))))
3344 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) #(B C B C))
3345 Pass: (EQUALP (DELETE (QUOTE B) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) #(A C A C))
3346 Pass: (EQUALP (DELETE (QUOTE C) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) #(A B A B))
3347 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE A) (QUOTE A))) #())
3348 Pass: (EQUALP (DELETE (QUOTE Z) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C))) #(A B C))
3349 Pass: (EQUALP (DELETE (QUOTE A) #()) #())
3350 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 0) #(A B C A B C))
3351 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1) #(B C A B C))
3352 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1 :FROM-END T) #(A B C B C))
3353 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2) #(B C B C))
3354 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2 :FROM-END T) #(B C B C))
3355 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3) #(B C B C))
3356 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3 :FROM-END T) #(B C B C))
3357 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4) #(B C B C))
3358 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4 :FROM-END T) #(B C B C))
3359 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -1) #(A B C A B C))
3360 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -10) #(A B C A B C))
3361 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -100) #(A B C A B C))
3362 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1) #(A B C B C B C B C))
3363 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 1) #(A B C B C A B C A B C))
3364 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 2) #(A B C B C B C A B C))
3365 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END NIL :COUNT 2) #(A B C B C B C A B C))
3366 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8) #(A B C B C B C A B C))
3367 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1) #(A B C B C A B C A B C))
3368 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1 :FROM-END T) #(A B C A B C B C A B C))
3369 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 0 :FROM-END T) #(A B C A B C A B C A B C))
3370 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT -100 :FROM-END T) #(A B C A B C A B C A B C))
3371 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 1) #(A B C A B C A B C A B C))
3372 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 2 :END 2) #(A B C A B C A B C A B C))
3373 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 12 :END 12) #(A B C A B C A B C A B C))
3374 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE (A)) (QUOTE (B)) (QUOTE (C)) (QUOTE (A)) (QUOTE (B)) (QUOTE (C))) :KEY (FUNCTION CAR)) #((B) (C) (B) (C)))
3375 Pass: (EQUALP (DELETE (QUOTE A) (VECTOR (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A)) (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A))) :KEY (FUNCTION CDR)) #((A . B) (B . C) (A . B) (B . C)))
3376 Pass: (EQUALP (DELETE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) #(("Love") ("LOve") ("LOVe") ("LOVE")))
3377 Pass: (EQUALP (DELETE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT -10) #(("Love") ("LOve") ("LOVe") ("LOVE")))
3378 Pass: (EQUALP (DELETE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL)) #())
3379 Pass: (EQUALP (DELETE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL))) #())
3380 Pass: (EQUALP (DELETE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 1) #(("LOve") ("LOVe") ("LOVE")))
3381 Pass: (EQUALP (DELETE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 1) #(("LOve") ("LOVe") ("LOVE")))
3382 Pass: (EQUALP (DELETE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 1 :FROM-END T) #(("Love") ("LOve") ("LOVe")))
3383 Pass: (EQUALP (DELETE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 1 :FROM-END T) #(("Love") ("LOve") ("LOVe")))
3384 Pass: (EQUALP (DELETE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 2 :FROM-END T) #(("Love") ("LOve")))
3385 Pass: (EQUALP (DELETE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 2 :FROM-END T) #(("Love") ("LOve")))
3386 Pass: (EQUALP (DELETE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :START 1 :END 3) #(("Love") ("LOVE")))
3387 Pass: (EQUALP (DELETE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :START 1 :END 3) #(("Love") ("LOVE")))
3388 Pass: (EQUALP (DELETE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 1 :START 1 :END 3) #(("Love") ("LOVe") ("LOVE")))
3389 Pass: (EQUALP (DELETE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 1 :START 1 :END 3) #(("Love") ("LOVe") ("LOVE")))
3390 Pass: (EQUALP (DELETE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 1 :FROM-END T :START 1 :END 3) #(("Love") ("LOve") ("LOVE")))
3391 Pass: (EQUALP (DELETE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 1 :FROM-END T :START 1 :END 3) #(("Love") ("LOve") ("LOVE")))
3392 Pass: (EQUALP (DELETE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST (FUNCTION STRING-EQUAL) :COUNT 10 :FROM-END T :START 1 :END 3) #(("Love") ("LOVE")))
3393 Pass: (EQUALP (DELETE "love" (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :TEST-NOT (COMPLEMENT (FUNCTION STRING-EQUAL)) :COUNT 10 :FROM-END T :START 1 :END 3) #(("Love") ("LOVE")))
3394 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabc")) "bcbc")
3395 Pass: (STRING= (DELETE #\a (COPY-SEQ "")) "")
3396 Pass: (STRING= (DELETE #\a (COPY-SEQ "xyz")) "xyz")
3397 Pass: (STRING= (DELETE #\a (COPY-SEQ "ABCABC")) "ABCABC")
3398 Pass: (STRING= (DELETE #\a (COPY-SEQ "ABCABC") :KEY (FUNCTION CHAR-DOWNCASE)) "BCBC")
3399 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabc") :COUNT 1) "bcabc")
3400 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabc") :COUNT 1 :FROM-END T) "abcbc")
3401 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabc") :COUNT 0) "abcabc")
3402 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabc") :COUNT -10) "abcabc")
3403 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabc") :COUNT 0) "abcabc")
3404 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabc")) "bcbc")
3405 Pass: (STRING= (DELETE #\b (COPY-SEQ "abcabc")) "acac")
3406 Pass: (STRING= (DELETE #\c (COPY-SEQ "abcabc")) "abab")
3407 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabc") :COUNT 0) "abcabc")
3408 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabc") :COUNT 1) "bcabc")
3409 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabc") :COUNT 1 :FROM-END T) "abcbc")
3410 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabc") :COUNT 2) "bcbc")
3411 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabc") :COUNT 2 :FROM-END T) "bcbc")
3412 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabc") :COUNT 3) "bcbc")
3413 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabc") :COUNT 3 :FROM-END T) "bcbc")
3414 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabc") :COUNT 4) "bcbc")
3415 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabc") :COUNT 4 :FROM-END T) "bcbc")
3416 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabc") :COUNT -1) "abcabc")
3417 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabc") :COUNT -10) "abcabc")
3418 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabc") :COUNT -100) "abcabc")
3419 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabcabcabc") :START 1) "abcbcbcbc")
3420 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabcabcabc") :START 1 :COUNT 1) "abcbcabcabc")
3421 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabcabcabc") :START 1 :COUNT 2) "abcbcbcabc")
3422 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabcabcabc") :START 1 :END NIL :COUNT 2) "abcbcbcabc")
3423 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabcabcabc") :START 1 :END 8) "abcbcbcabc")
3424 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT 1) "abcbcabcabc")
3425 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT 1 :FROM-END T) "abcabcbcabc")
3426 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT 0 :FROM-END T) "abcabcabcabc")
3427 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT -100 :FROM-END T) "abcabcabcabc")
3428 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabcabcabc") :START 1 :END 1) "abcabcabcabc")
3429 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabcabcabc") :START 2 :END 2) "abcabcabcabc")
3430 Pass: (STRING= (DELETE #\a (COPY-SEQ "abcabcabcabc") :START 12 :END 12) "abcabcabcabc")
3431 Pass: (EQUAL (DELETE 0 #(0 1 0 1)) #(1 1))
3432 Pass: (EQUAL (DELETE 0 #(0 1 0 1 0 1 0 1) :COUNT 1) #(1 0 1 0 1 0 1))
3433 Pass: (EQUAL (DELETE 0 #(0 1 0 1 0 1 0 1) :COUNT 1 :FROM-END T) #(0 1 0 1 0 1 1))
3434 Pass: (EQUAL (DELETE 0 #(0 1 0 1 0 1 0 1) :START 1) #(0 1 1 1 1))
3435 Pass: (EQUAL (DELETE 0 #(0 1 0 1 0 1 0 1) :START 1 :END NIL) #(0 1 1 1 1))
3436 Pass: (EQUAL (DELETE 0 #(0 1 0 1 0 1 0 1) :START 1 :END 6) #(0 1 1 1 0 1))
3437 Pass: (EQUAL (DELETE 0 #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1) #(0 1 1 0 1 0 1))
3438 Pass: (EQUAL (DELETE 0 #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T) #(0 1 0 1 1 0 1))
3439 Pass: (EQUAL (DELETE 0 #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T :TEST (FUNCTION (LAMBDA (A B) (DECLARE (IGNORE A)) (ODDP B)))) #(0 1 0 1 0 0 1))
3440 Pass: (EQUAL (DELETE 0 #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T :TEST-NOT (FUNCTION (LAMBDA (A B) (DECLARE (IGNORE A)) (EVENP B)))) #(0 1 0 1 0 0 1))
3441 Pass: (EQUAL (DELETE 0 #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T :TEST (FUNCTION (LAMBDA (A B) (DECLARE (IGNORE A)) (EVENP B)))) #(0 1 0 1 1 0 1))
3442 Pass: (EQUAL (DELETE 0 #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T :TEST-NOT (FUNCTION (LAMBDA (A B) (DECLARE (IGNORE A)) (ODDP B)))) #(0 1 0 1 1 0 1))
3443 Pass: (EQUAL (DELETE 0 #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T :KEY (FUNCTION (LAMBDA (ARG) (* ARG 10))) :TEST (FUNCTION (LAMBDA (A B) (DECLARE (IGNORE A)) (> B 1)))) #(0 1 0 1 0 0 1))
3444 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (B C B C)))
3445 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE B)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (A C A C)))
3446 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE C)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (A B A B)))
3447 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE A) (QUOTE A))) (QUOTE NIL))
3448 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE Z)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (A B C)))
3449 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (QUOTE NIL)) (QUOTE NIL))
3450 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 0) (QUOTE (A B C A B C)))
3451 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1) (QUOTE (B C A B C)))
3452 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1 :FROM-END T) (QUOTE (A B C B C)))
3453 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2) (QUOTE (B C B C)))
3454 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2 :FROM-END T) (QUOTE (B C B C)))
3455 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3) (QUOTE (B C B C)))
3456 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3 :FROM-END T) (QUOTE (B C B C)))
3457 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4) (QUOTE (B C B C)))
3458 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4 :FROM-END T) (QUOTE (B C B C)))
3459 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -1) (QUOTE (A B C A B C)))
3460 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -10) (QUOTE (A B C A B C)))
3461 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -100) (QUOTE (A B C A B C)))
3462 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1) (QUOTE (A B C B C B C B C)))
3463 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 1) (QUOTE (A B C B C A B C A B C)))
3464 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 2) (QUOTE (A B C B C B C A B C)))
3465 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END NIL :COUNT 2) (QUOTE (A B C B C B C A B C)))
3466 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8) (QUOTE (A B C B C B C A B C)))
3467 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1) (QUOTE (A B C B C A B C A B C)))
3468 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1 :FROM-END T) (QUOTE (A B C A B C B C A B C)))
3469 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 0 :FROM-END T) (QUOTE (A B C A B C A B C A B C)))
3470 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT -100 :FROM-END T) (QUOTE (A B C A B C A B C A B C)))
3471 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 1) (QUOTE (A B C A B C A B C A B C)))
3472 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 2 :END 2) (QUOTE (A B C A B C A B C A B C)))
3473 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 12 :END 12) (QUOTE (A B C A B C A B C A B C)))
3474 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE (A)) (QUOTE (B)) (QUOTE (C)) (QUOTE (A)) (QUOTE (B)) (QUOTE (C))) :KEY (FUNCTION CAR)) (QUOTE ((B) (C) (B) (C))))
3475 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (LIST (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A)) (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A))) :KEY (FUNCTION CDR)) (QUOTE ((A . B) (B . C) (A . B) (B . C))))
3476 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG "love"))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) (QUOTE (("Love") ("LOve") ("LOVe") ("LOVE"))))
3477 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG "love"))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT -10) (QUOTE (("Love") ("LOve") ("LOVe") ("LOVE"))))
3478 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) (QUOTE NIL))
3479 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1) (QUOTE (("LOve") ("LOVe") ("LOVE"))))
3480 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :FROM-END T) (QUOTE (("Love") ("LOve") ("LOVe"))))
3481 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 2 :FROM-END T) (QUOTE (("Love") ("LOve"))))
3482 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :START 1 :END 3) (QUOTE (("Love") ("LOVE"))))
3483 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :START 1 :END 3) (QUOTE (("Love") ("LOVe") ("LOVE"))))
3484 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :FROM-END T :START 1 :END 3) (QUOTE (("Love") ("LOve") ("LOVE"))))
3485 Pass: (EQUAL (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 10 :FROM-END T :START 1 :END 3) (QUOTE (("Love") ("LOVE"))))
3486 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) #(B C B C))
3487 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE B)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) #(A C A C))
3488 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE C)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) #(A B A B))
3489 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE A) (QUOTE A))) #())
3490 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE Z)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C))) #(A B C))
3491 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) #()) #())
3492 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 0) #(A B C A B C))
3493 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1) #(B C A B C))
3494 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1 :FROM-END T) #(A B C B C))
3495 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2) #(B C B C))
3496 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2 :FROM-END T) #(B C B C))
3497 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3) #(B C B C))
3498 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3 :FROM-END T) #(B C B C))
3499 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4) #(B C B C))
3500 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4 :FROM-END T) #(B C B C))
3501 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -1) #(A B C A B C))
3502 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -10) #(A B C A B C))
3503 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -100) #(A B C A B C))
3504 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1) #(A B C B C B C B C))
3505 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 1) #(A B C B C A B C A B C))
3506 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 2) #(A B C B C B C A B C))
3507 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END NIL :COUNT 2) #(A B C B C B C A B C))
3508 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8) #(A B C B C B C A B C))
3509 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1) #(A B C B C A B C A B C))
3510 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1 :FROM-END T) #(A B C A B C B C A B C))
3511 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 0 :FROM-END T) #(A B C A B C A B C A B C))
3512 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT -100 :FROM-END T) #(A B C A B C A B C A B C))
3513 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 1) #(A B C A B C A B C A B C))
3514 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 2 :END 2) #(A B C A B C A B C A B C))
3515 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 12 :END 12) #(A B C A B C A B C A B C))
3516 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE (A)) (QUOTE (B)) (QUOTE (C)) (QUOTE (A)) (QUOTE (B)) (QUOTE (C))) :KEY (FUNCTION CAR)) #((B) (C) (B) (C)))
3517 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG (QUOTE A)))) (VECTOR (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A)) (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A))) :KEY (FUNCTION CDR)) #((A . B) (B . C) (A . B) (B . C)))
3518 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) #(("Love") ("LOve") ("LOVe") ("LOVE")))
3519 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT -10) #(("Love") ("LOve") ("LOVe") ("LOVE")))
3520 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) #())
3521 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) #())
3522 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1) #(("LOve") ("LOVe") ("LOVE")))
3523 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1) #(("LOve") ("LOVe") ("LOVE")))
3524 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :FROM-END T) #(("Love") ("LOve") ("LOVe")))
3525 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :FROM-END T) #(("Love") ("LOve") ("LOVe")))
3526 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 2 :FROM-END T) #(("Love") ("LOve")))
3527 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 2 :FROM-END T) #(("Love") ("LOve")))
3528 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :START 1 :END 3) #(("Love") ("LOVE")))
3529 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :START 1 :END 3) #(("Love") ("LOVe") ("LOVE")))
3530 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :FROM-END T :START 1 :END 3) #(("Love") ("LOve") ("LOVE")))
3531 Pass: (EQUALP (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG "love"))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 10 :FROM-END T :START 1 :END 3) #(("Love") ("LOVE")))
3532 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc")) "bcbc")
3533 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "")) "")
3534 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "xyz")) "xyz")
3535 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "ABCABC") :KEY (FUNCTION CHAR-DOWNCASE)) "BCBC")
3536 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 1) "bcabc")
3537 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 1 :FROM-END T) "abcbc")
3538 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 0) "abcabc")
3539 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT -10) "abcabc")
3540 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 0) "abcabc")
3541 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc")) "bcbc")
3542 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\b))) (COPY-SEQ "abcabc")) "acac")
3543 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\c))) (COPY-SEQ "abcabc")) "abab")
3544 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 0) "abcabc")
3545 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 1) "bcabc")
3546 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 1 :FROM-END T) "abcbc")
3547 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 2) "bcbc")
3548 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 2 :FROM-END T) "bcbc")
3549 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 3) "bcbc")
3550 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 3 :FROM-END T) "bcbc")
3551 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 4) "bcbc")
3552 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT 4 :FROM-END T) "bcbc")
3553 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT -1) "abcabc")
3554 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT -10) "abcabc")
3555 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabc") :COUNT -100) "abcabc")
3556 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 1) "abcbcbcbc")
3557 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (STRING-EQUAL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 1 :COUNT 1) "abcbcabcabc")
3558 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 1 :COUNT 2) "abcbcbcabc")
3559 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 1 :END NIL :COUNT 2) "abcbcbcabc")
3560 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 1 :END 8) "abcbcbcabc")
3561 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT 1) "abcbcabcabc")
3562 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT 1 :FROM-END T) "abcabcbcabc")
3563 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT 0 :FROM-END T) "abcabcabcabc")
3564 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT -100 :FROM-END T) "abcabcabcabc")
3565 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 1 :END 1) "abcabcabcabc")
3566 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 2 :END 2) "abcabcabcabc")
3567 Pass: (STRING= (DELETE-IF (FUNCTION (LAMBDA (ARG) (EQL ARG #\a))) (COPY-SEQ "abcabcabcabc") :START 12 :END 12) "abcabcabcabc")
3568 Pass: (EQUAL (DELETE-IF (FUNCTION ZEROP) #(0 1 0 1)) #(1 1))
3569 Pass: (EQUAL (DELETE-IF (FUNCTION ZEROP) #(0 1 0 1 0 1 0 1) :COUNT 1) #(1 0 1 0 1 0 1))
3570 Pass: (EQUAL (DELETE-IF (FUNCTION ZEROP) #(0 1 0 1 0 1 0 1) :COUNT 1 :FROM-END T) #(0 1 0 1 0 1 1))
3571 Pass: (EQUAL (DELETE-IF (FUNCTION ZEROP) #(0 1 0 1 0 1 0 1) :START 1) #(0 1 1 1 1))
3572 Pass: (EQUAL (DELETE-IF (FUNCTION ZEROP) #(0 1 0 1 0 1 0 1) :START 1 :END NIL) #(0 1 1 1 1))
3573 Pass: (EQUAL (DELETE-IF (FUNCTION ZEROP) #(0 1 0 1 0 1 0 1) :START 1 :END 6) #(0 1 1 1 0 1))
3574 Pass: (EQUAL (DELETE-IF (FUNCTION ZEROP) #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1) #(0 1 1 0 1 0 1))
3575 Pass: (EQUAL (DELETE-IF (FUNCTION ZEROP) #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T) #(0 1 0 1 1 0 1))
3576 Pass: (EQUAL (DELETE-IF (FUNCTION ODDP) #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T) #(0 1 0 1 0 0 1))
3577 Pass: (EQUAL (DELETE-IF (FUNCTION EVENP) #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T) #(0 1 0 1 1 0 1))
3578 Pass: (EQUAL (DELETE-IF (FUNCTION PLUSP) #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T :KEY (FUNCTION (LAMBDA (ARG) (* ARG 10)))) #(0 1 0 1 0 0 1))
3579 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (B C B C)))
3580 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE B))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (A C A C)))
3581 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE C))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (A B A B)))
3582 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE A) (QUOTE A))) (QUOTE NIL))
3583 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE Z))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C))) (QUOTE (A B C)))
3584 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (QUOTE NIL)) (QUOTE NIL))
3585 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 0) (QUOTE (A B C A B C)))
3586 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1) (QUOTE (B C A B C)))
3587 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1 :FROM-END T) (QUOTE (A B C B C)))
3588 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2) (QUOTE (B C B C)))
3589 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2 :FROM-END T) (QUOTE (B C B C)))
3590 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3) (QUOTE (B C B C)))
3591 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3 :FROM-END T) (QUOTE (B C B C)))
3592 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4) (QUOTE (B C B C)))
3593 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4 :FROM-END T) (QUOTE (B C B C)))
3594 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -1) (QUOTE (A B C A B C)))
3595 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -10) (QUOTE (A B C A B C)))
3596 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -100) (QUOTE (A B C A B C)))
3597 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1) (QUOTE (A B C B C B C B C)))
3598 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 1) (QUOTE (A B C B C A B C A B C)))
3599 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 2) (QUOTE (A B C B C B C A B C)))
3600 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END NIL :COUNT 2) (QUOTE (A B C B C B C A B C)))
3601 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8) (QUOTE (A B C B C B C A B C)))
3602 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1) (QUOTE (A B C B C A B C A B C)))
3603 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1 :FROM-END T) (QUOTE (A B C A B C B C A B C)))
3604 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 0 :FROM-END T) (QUOTE (A B C A B C A B C A B C)))
3605 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT -100 :FROM-END T) (QUOTE (A B C A B C A B C A B C)))
3606 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 1) (QUOTE (A B C A B C A B C A B C)))
3607 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 2 :END 2) (QUOTE (A B C A B C A B C A B C)))
3608 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 12 :END 12) (QUOTE (A B C A B C A B C A B C)))
3609 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE (A)) (QUOTE (B)) (QUOTE (C)) (QUOTE (A)) (QUOTE (B)) (QUOTE (C))) :KEY (FUNCTION CAR)) (QUOTE ((B) (C) (B) (C))))
3610 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (LIST (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A)) (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A))) :KEY (FUNCTION CDR)) (QUOTE ((A . B) (B . C) (A . B) (B . C))))
3611 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG "love")))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) (QUOTE (("Love") ("LOve") ("LOVe") ("LOVE"))))
3612 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG "love")))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT -10) (QUOTE (("Love") ("LOve") ("LOVe") ("LOVE"))))
3613 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) (QUOTE NIL))
3614 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1) (QUOTE (("LOve") ("LOVe") ("LOVE"))))
3615 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :FROM-END T) (QUOTE (("Love") ("LOve") ("LOVe"))))
3616 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 2 :FROM-END T) (QUOTE (("Love") ("LOve"))))
3617 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :START 1 :END 3) (QUOTE (("Love") ("LOVE"))))
3618 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :START 1 :END 3) (QUOTE (("Love") ("LOVe") ("LOVE"))))
3619 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :FROM-END T :START 1 :END 3) (QUOTE (("Love") ("LOve") ("LOVE"))))
3620 Pass: (EQUAL (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (LIST (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 10 :FROM-END T :START 1 :END 3) (QUOTE (("Love") ("LOVE"))))
3621 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) #(B C B C))
3622 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE B))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) #(A C A C))
3623 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE C))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C))) #(A B A B))
3624 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE A) (QUOTE A))) #())
3625 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE Z))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C))) #(A B C))
3626 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) #()) #())
3627 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 0) #(A B C A B C))
3628 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1) #(B C A B C))
3629 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 1 :FROM-END T) #(A B C B C))
3630 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2) #(B C B C))
3631 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 2 :FROM-END T) #(B C B C))
3632 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3) #(B C B C))
3633 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 3 :FROM-END T) #(B C B C))
3634 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4) #(B C B C))
3635 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT 4 :FROM-END T) #(B C B C))
3636 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -1) #(A B C A B C))
3637 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -10) #(A B C A B C))
3638 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :COUNT -100) #(A B C A B C))
3639 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1) #(A B C B C B C B C))
3640 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 1) #(A B C B C A B C A B C))
3641 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :COUNT 2) #(A B C B C B C A B C))
3642 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END NIL :COUNT 2) #(A B C B C B C A B C))
3643 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8) #(A B C B C B C A B C))
3644 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1) #(A B C B C A B C A B C))
3645 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 1 :FROM-END T) #(A B C A B C B C A B C))
3646 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT 0 :FROM-END T) #(A B C A B C A B C A B C))
3647 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 8 :COUNT -100 :FROM-END T) #(A B C A B C A B C A B C))
3648 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 1 :END 1) #(A B C A B C A B C A B C))
3649 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 2 :END 2) #(A B C A B C A B C A B C))
3650 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE A) (QUOTE B) (QUOTE C)) :START 12 :END 12) #(A B C A B C A B C A B C))
3651 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE (A)) (QUOTE (B)) (QUOTE (C)) (QUOTE (A)) (QUOTE (B)) (QUOTE (C))) :KEY (FUNCTION CAR)) #((B) (C) (B) (C)))
3652 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG (QUOTE A))))) (VECTOR (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A)) (QUOTE (A . B)) (QUOTE (B . C)) (QUOTE (C . A))) :KEY (FUNCTION CDR)) #((A . B) (B . C) (A . B) (B . C)))
3653 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) #(("Love") ("LOve") ("LOVe") ("LOVE")))
3654 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT -10) #(("Love") ("LOve") ("LOVe") ("LOVE")))
3655 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) #())
3656 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR)) #())
3657 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1) #(("LOve") ("LOVe") ("LOVE")))
3658 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1) #(("LOve") ("LOVe") ("LOVE")))
3659 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :FROM-END T) #(("Love") ("LOve") ("LOVe")))
3660 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :FROM-END T) #(("Love") ("LOve") ("LOVe")))
3661 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 2 :FROM-END T) #(("Love") ("LOve")))
3662 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 2 :FROM-END T) #(("Love") ("LOve")))
3663 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :START 1 :END 3) #(("Love") ("LOVE")))
3664 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :START 1 :END 3) #(("Love") ("LOVe") ("LOVE")))
3665 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 1 :FROM-END T :START 1 :END 3) #(("Love") ("LOve") ("LOVE")))
3666 Pass: (EQUALP (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG "love")))) (VECTOR (QUOTE ("Love")) (QUOTE ("LOve")) (QUOTE ("LOVe")) (QUOTE ("LOVE"))) :KEY (FUNCTION CAR) :COUNT 10 :FROM-END T :START 1 :END 3) #(("Love") ("LOVE")))
3667 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc")) "bcbc")
3668 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "")) "")
3669 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "xyz")) "xyz")
3670 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "ABCABC") :KEY (FUNCTION CHAR-DOWNCASE)) "BCBC")
3671 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 1) "bcabc")
3672 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 1 :FROM-END T) "abcbc")
3673 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 0) "abcabc")
3674 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT -10) "abcabc")
3675 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 0) "abcabc")
3676 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc")) "bcbc")
3677 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\b)))) (COPY-SEQ "abcabc")) "acac")
3678 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\c)))) (COPY-SEQ "abcabc")) "abab")
3679 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 0) "abcabc")
3680 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 1) "bcabc")
3681 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 1 :FROM-END T) "abcbc")
3682 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 2) "bcbc")
3683 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 2 :FROM-END T) "bcbc")
3684 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 3) "bcbc")
3685 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 3 :FROM-END T) "bcbc")
3686 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 4) "bcbc")
3687 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT 4 :FROM-END T) "bcbc")
3688 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT -1) "abcabc")
3689 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT -10) "abcabc")
3690 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabc") :COUNT -100) "abcabc")
3691 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 1) "abcbcbcbc")
3692 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (STRING-EQUAL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 1 :COUNT 1) "abcbcabcabc")
3693 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 1 :COUNT 2) "abcbcbcabc")
3694 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 1 :END NIL :COUNT 2) "abcbcbcabc")
3695 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 1 :END 8) "abcbcbcabc")
3696 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT 1) "abcbcabcabc")
3697 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT 1 :FROM-END T) "abcabcbcabc")
3698 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT 0 :FROM-END T) "abcabcabcabc")
3699 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 1 :END 8 :COUNT -100 :FROM-END T) "abcabcabcabc")
3700 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 1 :END 1) "abcabcabcabc")
3701 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 2 :END 2) "abcabcabcabc")
3702 Pass: (STRING= (DELETE-IF-NOT (FUNCTION (LAMBDA (ARG) (NOT (EQL ARG #\a)))) (COPY-SEQ "abcabcabcabc") :START 12 :END 12) "abcabcabcabc")
3703 Pass: (EQUAL (DELETE-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 1 0 1)) #(1 1))
3704 Pass: (EQUAL (DELETE-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 1 0 1 0 1 0 1) :COUNT 1) #(1 0 1 0 1 0 1))
3705 Pass: (EQUAL (DELETE-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 1 0 1 0 1 0 1) :COUNT 1 :FROM-END T) #(0 1 0 1 0 1 1))
3706 Pass: (EQUAL (DELETE-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 1 0 1 0 1 0 1) :START 1) #(0 1 1 1 1))
3707 Pass: (EQUAL (DELETE-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 1 0 1 0 1 0 1) :START 1 :END NIL) #(0 1 1 1 1))
3708 Pass: (EQUAL (DELETE-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 1 0 1 0 1 0 1) :START 1 :END 6) #(0 1 1 1 0 1))
3709 Pass: (EQUAL (DELETE-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1) #(0 1 1 0 1 0 1))
3710 Pass: (EQUAL (DELETE-IF-NOT (COMPLEMENT (FUNCTION ZEROP)) #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T) #(0 1 0 1 1 0 1))
3711 Pass: (EQUAL (DELETE-IF-NOT (COMPLEMENT (FUNCTION ODDP)) #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T) #(0 1 0 1 0 0 1))
3712 Pass: (EQUAL (DELETE-IF-NOT (COMPLEMENT (FUNCTION EVENP)) #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T) #(0 1 0 1 1 0 1))
3713 Pass: (EQUAL (DELETE-IF-NOT (COMPLEMENT (FUNCTION PLUSP)) #(0 1 0 1 0 1 0 1) :START 1 :END 6 :COUNT 1 :FROM-END T :KEY (FUNCTION (LAMBDA (ARG) (* ARG 10)))) #(0 1 0 1 0 0 1))
3714 Pass: (EQUAL (REMOVE-DUPLICATES "aBcDAbCd" :TEST (FUNCTION CHAR-EQUAL) :FROM-END T) "aBcD")
3715 Pass: (EQUAL (REMOVE-DUPLICATES (QUOTE (A B C B D D E))) (QUOTE (A C B D E)))
3716 Pass: (EQUAL (REMOVE-DUPLICATES (QUOTE (A B C B D D E)) :FROM-END T) (QUOTE (A B C D E)))
3717 Pass: (EQUAL (REMOVE-DUPLICATES (QUOTE ((FOO #\a) (BAR #\%) (BAZ #\A))) :TEST (FUNCTION CHAR-EQUAL) :KEY (FUNCTION CADR)) (QUOTE ((BAR #\%) (BAZ #\A))))
3718 Pass: (EQUAL (REMOVE-DUPLICATES (QUOTE ((FOO #\a) (BAR #\%) (BAZ #\A))) :TEST (FUNCTION CHAR-EQUAL) :KEY (FUNCTION CADR) :FROM-END T) (QUOTE ((FOO #\a) (BAR #\%))))
3719 Pass: (LET* ((LIST0 (LIST 0 1 2 3 4 5 6)) (LIST (DELETE-DUPLICATES LIST0 :KEY (FUNCTION ODDP) :START 1 :END 6))) (EQUAL LIST (QUOTE (0 4 5 6))))
3720 Pass: (LET* ((LIST0 (LIST 0 1 2)) (LIST (REMOVE-DUPLICATES LIST0))) (AND (NOT (EQ LIST0 LIST)) (EQUAL LIST0 (QUOTE (0 1 2))) (EQUAL LIST (QUOTE (0 1 2)))))
3721 Pass: (LET* ((LIST0 (LIST 2 1 0 1 0 1 2)) (LIST (REMOVE-DUPLICATES LIST0))) (AND (NOT (EQ LIST0 LIST)) (EQUAL LIST0 (QUOTE (2 1 0 1 0 1 2))) (EQUAL LIST (QUOTE (0 1 2)))))
3722 Pass: (LET* ((VECTOR0 (VECTOR 0 1 2)) (VECTOR (REMOVE-DUPLICATES VECTOR0))) (AND (NOT (EQ VECTOR0 VECTOR)) (EQUALP VECTOR0 #(0 1 2)) (EQUALP VECTOR #(0 1 2))))
3723 Pass: (LET* ((VECTOR0 (VECTOR 2 1 0 1 0 1 2)) (VECTOR (REMOVE-DUPLICATES VECTOR0))) (AND (NOT (EQ VECTOR0 VECTOR)) (EQUALP VECTOR0 #(2 1 0 1 0 1 2)) (EQUALP VECTOR #(0 1 2))))
3724 Pass: (EQUAL (REMOVE-DUPLICATES (LIST 0 1 2 2 3 3 3)) (QUOTE (0 1 2 3)))
3725 Pass: (EQUAL (REMOVE-DUPLICATES (LIST 0 0 0 2 0 1 1 2 2 2 1 1 1 1 2)) (QUOTE (0 1 2)))
3726 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE A) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE C))) (QUOTE (A B C)))
3727 Pass: (EQUAL (REMOVE-DUPLICATES (LIST 0 1 2)) (QUOTE (0 1 2)))
3728 Pass: (EQUAL (REMOVE-DUPLICATES (LIST 2 0 2 1 1 1 0 0 0 1 2)) (QUOTE (0 1 2)))
3729 Pass: (EQUAL (REMOVE-DUPLICATES (LIST)) (QUOTE NIL))
3730 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (X . 0)) (QUOTE (Y . 1)) (QUOTE (Z . 2)) (QUOTE (A . 0)) (QUOTE (B . 1)) (QUOTE (C . 2))) :KEY (FUNCTION CDR)) (QUOTE ((A . 0) (B . 1) (C . 2))))
3731 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (X . 0)) (QUOTE (Y . 1)) (QUOTE (Z . 2)) (QUOTE (A . 0)) (QUOTE (B . 1)) (QUOTE (C . 2))) :KEY (FUNCTION CDR) :TEST (FUNCTION (LAMBDA (A B) (AND (ODDP A) (ODDP B))))) (QUOTE ((X . 0) (Z . 2) (A . 0) (B . 1) (C . 2))))
3732 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (X . 0)) (QUOTE (Y . 1)) (QUOTE (Z . 2)) (QUOTE (A . 0)) (QUOTE (B . 1)) (QUOTE (C . 2))) :KEY (FUNCTION CDR) :TEST-NOT (FUNCTION (LAMBDA (A B) (NOT (AND (ODDP A) (ODDP B)))))) (QUOTE ((X . 0) (Z . 2) (A . 0) (B . 1) (C . 2))))
3733 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (X . 0)) (QUOTE (Y . 1)) (QUOTE (Z . 2)) (QUOTE (A . 0)) (QUOTE (B . 1)) (QUOTE (C . 2))) :KEY (FUNCTION CDR) :TEST (FUNCTION (LAMBDA (A B) (AND (EVENP A) (EVENP B))))) (QUOTE ((Y . 1) (B . 1) (C . 2))))
3734 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (X . 0)) (QUOTE (Y . 1)) (QUOTE (Z . 2)) (QUOTE (A . 0)) (QUOTE (B . 1)) (QUOTE (C . 2))) :KEY (FUNCTION CDR) :TEST-NOT (FUNCTION (LAMBDA (A B) (NOT (AND (EVENP A) (EVENP B)))))) (QUOTE ((Y . 1) (B . 1) (C . 2))))
3735 Pass: (EQUAL (REMOVE-DUPLICATES (LIST 0 1 2 0 1 2 0 1 2 0 1 2) :START 3 :END 9) (QUOTE (0 1 2 0 1 2 0 1 2)))
3736 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 3)) (QUOTE (1 . 4)) (QUOTE (2 . 5)) (QUOTE (0 . 6)) (QUOTE (1 . 7)) (QUOTE (2 . 8)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11)))) (LIST (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 3)) (QUOTE (1 . 4)) (QUOTE (2 . 5)) (QUOTE (0 . 6)) (QUOTE (1 . 7)) (QUOTE (2 . 8)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11))))
3737 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 3)) (QUOTE (1 . 4)) (QUOTE (2 . 5)) (QUOTE (0 . 6)) (QUOTE (1 . 7)) (QUOTE (2 . 8)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11))) :KEY (FUNCTION CAR)) (QUOTE ((0 . 9) (1 . 10) (2 . 11))))
3738 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 3)) (QUOTE (1 . 4)) (QUOTE (2 . 5)) (QUOTE (0 . 6)) (QUOTE (1 . 7)) (QUOTE (2 . 8)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11))) :KEY (FUNCTION CAR) :FROM-END T) (LIST (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2))))
3739 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 3)) (QUOTE (1 . 4)) (QUOTE (2 . 5)) (QUOTE (0 . 6)) (QUOTE (1 . 7)) (QUOTE (2 . 8)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11))) :START 3 :KEY (FUNCTION CAR)) (LIST (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11))))
3740 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 3)) (QUOTE (1 . 4)) (QUOTE (2 . 5)) (QUOTE (0 . 6)) (QUOTE (1 . 7)) (QUOTE (2 . 8)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11))) :START 3 :KEY (FUNCTION CAR) :FROM-END T) (LIST (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 3)) (QUOTE (1 . 4)) (QUOTE (2 . 5))))
3741 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 3)) (QUOTE (1 . 4)) (QUOTE (2 . 5)) (QUOTE (0 . 6)) (QUOTE (1 . 7)) (QUOTE (2 . 8)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11))) :START 3 :END NIL :KEY (FUNCTION CAR)) (LIST (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11))))
3742 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 3)) (QUOTE (1 . 4)) (QUOTE (2 . 5)) (QUOTE (0 . 6)) (QUOTE (1 . 7)) (QUOTE (2 . 8)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11))) :START 3 :END 9 :KEY (FUNCTION CAR)) (QUOTE ((0 . 0) (1 . 1) (2 . 2) (0 . 6) (1 . 7) (2 . 8) (0 . 9) (1 . 10) (2 . 11))))
3743 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 3)) (QUOTE (1 . 4)) (QUOTE (2 . 5)) (QUOTE (0 . 6)) (QUOTE (1 . 7)) (QUOTE (2 . 8)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11))) :START 3 :END 9 :KEY (FUNCTION CAR) :FROM-END T) (LIST (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 3)) (QUOTE (1 . 4)) (QUOTE (2 . 5)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11))))
3744 Pass: (EQUAL (REMOVE-DUPLICATES (LIST "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday" "Sunday") :KEY (FUNCTION LENGTH)) (LIST "Tuesday" "Wednesday" "Saturday" "Sunday"))
3745 Pass: (EQUAL (REMOVE-DUPLICATES (LIST "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday" "Sunday") :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0))) :TEST (FUNCTION CHAR=)) (LIST "Monday" "Wednesday" "Thursday" "Friday" "Sunday"))
3746 Pass: (EQUAL (REMOVE-DUPLICATES (LIST "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday" "Sunday") :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0))) :TEST-NOT (COMPLEMENT (FUNCTION CHAR=))) (LIST "Monday" "Wednesday" "Thursday" "Friday" "Sunday"))
3747 Pass: (EQUAL (REMOVE-DUPLICATES (LIST #\a #\b #\c #\A #\B #\C) :KEY (FUNCTION CHAR-UPCASE)) (QUOTE (#\A #\B #\C)))
3748 Pass: (EQUAL (REMOVE-DUPLICATES (LIST #\a #\b #\c #\A #\B #\C) :KEY (FUNCTION CHAR-UPCASE) :FROM-END T) (QUOTE (#\a #\b #\c)))
3749 Pass: (EQUAL (REMOVE-DUPLICATES (LIST #\a #\b #\c #\A #\B #\C) :TEST (FUNCTION CHAR=)) (LIST #\a #\b #\c #\A #\B #\C))
3750 Pass: (EQUAL (REMOVE-DUPLICATES (LIST #\a #\b #\c #\A #\B #\C) :TEST-NOT (COMPLEMENT (FUNCTION CHAR=))) (LIST #\a #\b #\c #\A #\B #\C))
3751 Pass: (EQUAL (REMOVE-DUPLICATES (LIST #\a #\b #\c #\A #\B #\C) :TEST (FUNCTION CHAR-EQUAL)) (LIST #\A #\B #\C))
3752 Pass: (EQUAL (REMOVE-DUPLICATES (LIST #\a #\b #\c #\A #\B #\C) :TEST-NOT (COMPLEMENT (FUNCTION CHAR-EQUAL))) (LIST #\A #\B #\C))
3753 Pass: (EQUAL (REMOVE-DUPLICATES (LIST #\a #\b #\c #\A #\B #\C) :TEST (FUNCTION CHAR-EQUAL) :FROM-END T) (LIST #\a #\b #\c))
3754 Pass: (EQUAL (REMOVE-DUPLICATES (LIST #\a #\b #\c #\A #\B #\C) :TEST-NOT (COMPLEMENT (FUNCTION CHAR-EQUAL)) :FROM-END T) (LIST #\a #\b #\c))
3755 Pass: (EQUAL (REMOVE-DUPLICATES (LIST #\a #\1 #\b #\1 #\2 #\c #\0 #\A #\0 #\B #\C #\9) :KEY (FUNCTION ALPHA-CHAR-P)) (LIST #\C #\9))
3756 Pass: (EQUAL (REMOVE-DUPLICATES (LIST #\a #\1 #\b #\1 #\2 #\c #\0 #\A #\0 #\B #\C #\9) :KEY (FUNCTION ALPHANUMERICP)) (LIST #\9))
3757 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11)))) (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3758 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR)) (LIST (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3759 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 3 :END 9) (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3760 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 3 :END 9 :TEST (FUNCTION CHAR-EQUAL)) (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3761 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 3 :END 9 :TEST-NOT (COMPLEMENT (FUNCTION CHAR-EQUAL))) (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3762 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 3 :END 9 :TEST (FUNCTION CHAR-EQUAL) :FROM-END T) (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3763 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 3 :END 9 :TEST-NOT (COMPLEMENT (FUNCTION CHAR-EQUAL)) :FROM-END T) (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3764 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 3) (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3765 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 3 :END NIL) (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3766 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 3 :FROM-END T) (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8))))
3767 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :END 9) (LIST (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3768 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :END 9 :FROM-END T) (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3769 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 0 :END 12 :TEST (FUNCTION CHAR-EQUAL)) (LIST (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3770 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 0 :END 12 :TEST-NOT (COMPLEMENT (FUNCTION CHAR-EQUAL))) (LIST (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3771 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 0 :END 12 :TEST (FUNCTION CHAR-EQUAL) :FROM-END T) (QUOTE ((#\A . 0) (#\b . 1) (#\C . 2))))
3772 Pass: (EQUAL (REMOVE-DUPLICATES (LIST (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 0 :END 12 :TEST-NOT (COMPLEMENT (FUNCTION CHAR-EQUAL)) :FROM-END T) (QUOTE ((#\A . 0) (#\b . 1) (#\C . 2))))
3773 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR 0 1 2 2 3 3 3)) #(0 1 2 3))
3774 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR 0 0 0 2 0 1 1 2 2 2 1 1 1 1 2)) #(0 1 2))
3775 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE A) (QUOTE A) (QUOTE B) (QUOTE C) (QUOTE C))) #(A B C))
3776 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR 0 1 2)) #(0 1 2))
3777 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR 2 0 2 1 1 1 0 0 0 1 2)) #(0 1 2))
3778 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR)) #())
3779 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (X . 0)) (QUOTE (Y . 1)) (QUOTE (Z . 2)) (QUOTE (A . 0)) (QUOTE (B . 1)) (QUOTE (C . 2))) :KEY (FUNCTION CDR)) #((A . 0) (B . 1) (C . 2)))
3780 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (X . 0)) (QUOTE (Y . 1)) (QUOTE (Z . 2)) (QUOTE (A . 0)) (QUOTE (B . 1)) (QUOTE (C . 2))) :KEY (FUNCTION CDR) :TEST (FUNCTION (LAMBDA (A B) (AND (ODDP A) (ODDP B))))) #((X . 0) (Z . 2) (A . 0) (B . 1) (C . 2)))
3781 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (X . 0)) (QUOTE (Y . 1)) (QUOTE (Z . 2)) (QUOTE (A . 0)) (QUOTE (B . 1)) (QUOTE (C . 2))) :KEY (FUNCTION CDR) :TEST-NOT (FUNCTION (LAMBDA (A B) (NOT (AND (ODDP A) (ODDP B)))))) #((X . 0) (Z . 2) (A . 0) (B . 1) (C . 2)))
3782 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (X . 0)) (QUOTE (Y . 1)) (QUOTE (Z . 2)) (QUOTE (A . 0)) (QUOTE (B . 1)) (QUOTE (C . 2))) :KEY (FUNCTION CDR) :TEST (FUNCTION (LAMBDA (A B) (AND (EVENP A) (EVENP B))))) #((Y . 1) (B . 1) (C . 2)))
3783 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (X . 0)) (QUOTE (Y . 1)) (QUOTE (Z . 2)) (QUOTE (A . 0)) (QUOTE (B . 1)) (QUOTE (C . 2))) :KEY (FUNCTION CDR) :TEST-NOT (FUNCTION (LAMBDA (A B) (NOT (AND (EVENP A) (EVENP B)))))) #((Y . 1) (B . 1) (C . 2)))
3784 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR 0 1 2 0 1 2 0 1 2 0 1 2) :START 3 :END 9) #(0 1 2 0 1 2 0 1 2))
3785 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 3)) (QUOTE (1 . 4)) (QUOTE (2 . 5)) (QUOTE (0 . 6)) (QUOTE (1 . 7)) (QUOTE (2 . 8)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11)))) (VECTOR (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 3)) (QUOTE (1 . 4)) (QUOTE (2 . 5)) (QUOTE (0 . 6)) (QUOTE (1 . 7)) (QUOTE (2 . 8)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11))))
3786 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 3)) (QUOTE (1 . 4)) (QUOTE (2 . 5)) (QUOTE (0 . 6)) (QUOTE (1 . 7)) (QUOTE (2 . 8)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11))) :KEY (FUNCTION CAR)) #((0 . 9) (1 . 10) (2 . 11)))
3787 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 3)) (QUOTE (1 . 4)) (QUOTE (2 . 5)) (QUOTE (0 . 6)) (QUOTE (1 . 7)) (QUOTE (2 . 8)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11))) :KEY (FUNCTION CAR) :FROM-END T) (VECTOR (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2))))
3788 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 3)) (QUOTE (1 . 4)) (QUOTE (2 . 5)) (QUOTE (0 . 6)) (QUOTE (1 . 7)) (QUOTE (2 . 8)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11))) :START 3 :KEY (FUNCTION CAR)) (VECTOR (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11))))
3789 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 3)) (QUOTE (1 . 4)) (QUOTE (2 . 5)) (QUOTE (0 . 6)) (QUOTE (1 . 7)) (QUOTE (2 . 8)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11))) :START 3 :KEY (FUNCTION CAR) :FROM-END T) (VECTOR (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 3)) (QUOTE (1 . 4)) (QUOTE (2 . 5))))
3790 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 3)) (QUOTE (1 . 4)) (QUOTE (2 . 5)) (QUOTE (0 . 6)) (QUOTE (1 . 7)) (QUOTE (2 . 8)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11))) :START 3 :END NIL :KEY (FUNCTION CAR)) (VECTOR (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11))))
3791 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 3)) (QUOTE (1 . 4)) (QUOTE (2 . 5)) (QUOTE (0 . 6)) (QUOTE (1 . 7)) (QUOTE (2 . 8)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11))) :START 3 :END 9 :KEY (FUNCTION CAR)) #((0 . 0) (1 . 1) (2 . 2) (0 . 6) (1 . 7) (2 . 8) (0 . 9) (1 . 10) (2 . 11)))
3792 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 3)) (QUOTE (1 . 4)) (QUOTE (2 . 5)) (QUOTE (0 . 6)) (QUOTE (1 . 7)) (QUOTE (2 . 8)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11))) :START 3 :END 9 :KEY (FUNCTION CAR) :FROM-END T) (VECTOR (QUOTE (0 . 0)) (QUOTE (1 . 1)) (QUOTE (2 . 2)) (QUOTE (0 . 3)) (QUOTE (1 . 4)) (QUOTE (2 . 5)) (QUOTE (0 . 9)) (QUOTE (1 . 10)) (QUOTE (2 . 11))))
3793 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday" "Sunday") :KEY (FUNCTION LENGTH)) (VECTOR "Tuesday" "Wednesday" "Saturday" "Sunday"))
3794 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday" "Sunday") :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0))) :TEST (FUNCTION CHAR=)) (VECTOR "Monday" "Wednesday" "Thursday" "Friday" "Sunday"))
3795 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday" "Sunday") :KEY (FUNCTION (LAMBDA (ARG) (CHAR ARG 0))) :TEST-NOT (COMPLEMENT (FUNCTION CHAR=))) (VECTOR "Monday" "Wednesday" "Thursday" "Friday" "Sunday"))
3796 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR #\a #\b #\c #\A #\B #\C) :KEY (FUNCTION CHAR-UPCASE)) #(#\A #\B #\C))
3797 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR #\a #\b #\c #\A #\B #\C) :KEY (FUNCTION CHAR-UPCASE) :FROM-END T) #(#\a #\b #\c))
3798 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR #\a #\b #\c #\A #\B #\C) :TEST (FUNCTION CHAR=)) (VECTOR #\a #\b #\c #\A #\B #\C))
3799 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR #\a #\b #\c #\A #\B #\C) :TEST-NOT (COMPLEMENT (FUNCTION CHAR=))) (VECTOR #\a #\b #\c #\A #\B #\C))
3800 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR #\a #\b #\c #\A #\B #\C) :TEST (FUNCTION CHAR-EQUAL)) (VECTOR #\A #\B #\C))
3801 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR #\a #\b #\c #\A #\B #\C) :TEST-NOT (COMPLEMENT (FUNCTION CHAR-EQUAL))) (VECTOR #\A #\B #\C))
3802 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR #\a #\b #\c #\A #\B #\C) :TEST (FUNCTION CHAR-EQUAL) :FROM-END T) (VECTOR #\a #\b #\c))
3803 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR #\a #\b #\c #\A #\B #\C) :TEST-NOT (COMPLEMENT (FUNCTION CHAR-EQUAL)) :FROM-END T) (VECTOR #\a #\b #\c))
3804 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR #\a #\1 #\b #\1 #\2 #\c #\0 #\A #\0 #\B #\C #\9) :KEY (FUNCTION ALPHA-CHAR-P)) (VECTOR #\C #\9))
3805 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR #\a #\1 #\b #\1 #\2 #\c #\0 #\A #\0 #\B #\C #\9) :KEY (FUNCTION ALPHANUMERICP)) (VECTOR #\9))
3806 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11)))) (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3807 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR)) (VECTOR (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3808 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 3 :END 9) (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3809 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 3 :END 9 :TEST (FUNCTION CHAR-EQUAL)) (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3810 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 3 :END 9 :TEST-NOT (COMPLEMENT (FUNCTION CHAR-EQUAL))) (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3811 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 3 :END 9 :TEST (FUNCTION CHAR-EQUAL) :FROM-END T) (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3812 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 3 :END 9 :TEST-NOT (COMPLEMENT (FUNCTION CHAR-EQUAL)) :FROM-END T) (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3813 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 3) (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3814 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 3 :END NIL) (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3815 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 3 :FROM-END T) (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8))))
3816 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :END 9) (VECTOR (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3817 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :END 9 :FROM-END T) (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3818 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 0 :END 12 :TEST (FUNCTION CHAR-EQUAL)) (VECTOR (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3819 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 0 :END 12 :TEST-NOT (COMPLEMENT (FUNCTION CHAR-EQUAL))) (VECTOR (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))))
3820 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 0 :END 12 :TEST (FUNCTION CHAR-EQUAL) :FROM-END T) #((#\A . 0) (#\b . 1) (#\C . 2)))
3821 Pass: (EQUALP (REMOVE-DUPLICATES (VECTOR (QUOTE (#\A . 0)) (QUOTE (#\b . 1)) (QUOTE (#\C . 2)) (QUOTE (#\a . 3)) (QUOTE (#\B . 4)) (QUOTE (#\c . 5)) (QUOTE (#\A . 6)) (QUOTE (#\b . 7)) (QUOTE (#\C . 8)) (QUOTE (#\a . 9)) (QUOTE (#\B . 10)) (QUOTE (#\c . 11))) :KEY (FUNCTION CAR) :START 0 :END 12 :TEST-NOT (COMPLEMENT (FUNCTION CHAR-EQUAL)) :FROM-END T) #((#\A . 0) (#\b . 1) (#\C . 2)))
3822 Pass: (STRING= (REMOVE-DUPLICATES (COPY-SEQ "")) "")
3823 Pass: (STRING= (REMOVE-DUPLICATES (COPY-SEQ "abc")) "abc")
3824 Pass: (STRING= (REMOVE-DUPLICATES (COPY-SEQ "abcabc")) "abc")
3825 Pass: (STRING= (REMOVE-DUPLICATES (COPY-SEQ "cbaabc")) "abc")
3826 Pass: (STRING= (REMOVE-DUPLICATES (COPY-SEQ "cbaabc") :FROM-END T) "cba")
3827 Pass: (STRING= (REMOVE-DUPLICATES (COPY-SEQ "cbaabcABCCBA")) "abcCBA")
3828 Pass: (STRING= (REMOVE-DUPLICATES (COPY-SEQ "cbaabcABCCBA") :FROM-END T) "cbaABC")
3829 Pass: (STRING= (REMOVE-DUPLICATES (COPY-SEQ "cbaabcABCCBA") :KEY (FUNCTION CHAR-DOWNCASE)) "CBA")
3830 Pass: (STRING= (REMOVE-DUPLICATES (COPY-SEQ "cbaabcABCCBA") :KEY (FUNCTION CHAR-DOWNCASE) :FROM-END T) "cba")
3831 Pass: (STRING= (REMOVE-DUPLICATES (COPY-SEQ "cbaabcABCCBA") :START 3) "cbaabcCBA")
3832 Pass: (STRING= (REMOVE-DUPLICATES (COPY-SEQ "cbaabcABCCBA") :START 3 :FROM-END T) "cbaabcABC")
3833 Pass: (STRING= (REMOVE-DUPLICATES (COPY-SEQ "cbaabcABCCBA") :START 3 :END 9) "cbaabcABCCBA")
3834 Pass: (STRING= (REMOVE-DUPLICATES (COPY-SEQ "cbaabcABCCBA") :START 3 :END 9 :KEY (FUNCTION CHAR-UPCASE)) "cbaABCCBA")
3835 Pass: (STRING= (REMOVE-DUPLICATES (COPY-SEQ "cbaabcABCCBA") :START 3 :END 9 :KEY (FUNCTION CHAR-UPCASE) :FROM-END T) "cbaabcCBA")
3836 Pass: (STRING= (REMOVE-DUPLICATES (COPY-SEQ "cbaabcABCCBA") :START 3 :END 9 :TEST (FUNCTION CHAR-EQUAL) :FROM-END T) "cbaabcCBA")
3837 Pass: (STRING= (REMOVE-DUPLICATES (COPY-SEQ "cbaabcABCCBA") :START 3 :END 9 :TEST-NOT (COMPLEMENT (FUNCTION CHAR-EQUAL)) :FROM-END T) "cbaabcCBA")
3838 Pass: (STRING= (REMOVE-DUPLICATES (COPY-SEQ "cbaabcABCCBA") :START 3 :END 9 :KEY (FUNCTION UPPER-CASE-P) :TEST (FUNCTION EQ)) "cbacCCBA")
3839 Pass: (STRING= (REMOVE-DUPLICATES (COPY-SEQ "cbaabcABCCBA") :START 3 :END 9 :KEY (FUNCTION UPPER-CASE-P) :TEST (FUNCTION EQ) :FROM-END T) "cbaaACBA")
3840 Pass: (EQUAL (REMOVE-DUPLICATES (COPY-SEQ #(0 0 1 1))) #(0 1))
3841 Pass: (EQUAL (REMOVE-DUPLICATES (COPY-SEQ #(0 1 1 0))) #(1 0))
3842 Pass: (EQUAL (REMOVE-DUPLICATES (COPY-SEQ #(0 1 1 0)) :FROM-END T) #(0 1))
3843 Pass: (EQUAL (REMOVE-DUPLICATES (COPY-SEQ #(0 1 1 0)) :START 1) #(0 1 0))
3844 Pass: (EQUAL (REMOVE-DUPLICATES (COPY-SEQ #(0 0 0 1 1 1 1 0 1 1 0 0 0 1 0 0 0 1 0))) #(1 0))
3845 Pass: (EQUAL (REMOVE-DUPLICATES (COPY-SEQ #(0 0 0 1 1 1 1 0 1 1 0 0 0 1 0 0 0 1 0)) :FROM-END T) #(0 1))
3846 Pass: (EQUAL (REMOVE-DUPLICATES (COPY-SEQ #())) #())
3847 Pass: (EQUAL (REMOVE-DUPLICATES (COPY-SEQ #(0 1))) #(0 1))
3848 Pass: (EQUAL (REMOVE-DUPLICATES (COPY-SEQ #(1 0))) #(1 0))
3849 Pass: (EQUAL (REMOVE-DUPLICATES (COPY-SEQ #(0))) #(0))
3850 Pass: (EQUAL (REMOVE-DUPLICATES (COPY-SEQ #(1))) #(1))
3851 Pass: (EQUAL (REMOVE-DUPLICATES (COPY-SEQ #(1 0 0 1)) :START 1 :END 3) #(1 0 1))
3852 Pass: (EQUAL (REMOVE-DUPLICATES (COPY-SEQ #(0 1 0 1 1 0 1 0)) :START 2 :END 6) #(0 1 1 0 1 0))
3853 Pass: (EQUAL (REMOVE-DUPLICATES (COPY-SEQ #(0 1 0 1 1 0 1 0)) :START 2 :END 6 :FROM-END T) #(0 1 0 1 1 0))
3854 Pass: (EQUAL (REMOVE-DUPLICATES (COPY-SEQ #(0 1 0 1 1 0 1 0)) :START 2 :END 6 :FROM-END T :KEY (FUNCTION (LAMBDA (ARG) (CHAR "aA" ARG)))) #(0 1 0 1 1 0))
3855 Pass: (EQUAL (REMOVE-DUPLICATES (COPY-SEQ #(0 1 0 1 1 0 1 0)) :START 2 :END 6 :FROM-END T :KEY (FUNCTION (LAMBDA (ARG) (CHAR "aA" ARG))) :TEST (FUNCTION CHAR-EQUAL)) #(0 1 0 1 0))
3856 Pass: (EQUAL (REMOVE-DUPLICATES (COPY-SEQ #(0 1 0 1 1 0 1 0)) :START 2 :END 6 :FROM-END T :KEY (FUNCTION (LAMBDA (ARG) (CHAR "aA" ARG))) :TEST-NOT (COMPLEMENT (FUNCTION CHAR-EQUAL))) #(0 1 0 1 0))
3857 Pass: (EQUAL (REMOVE-DUPLICATES (COPY-SEQ #(0 1 0 1 1 0 1 0)) :START 2 :END 6 :KEY (FUNCTION (LAMBDA (ARG) (CHAR "aA" ARG))) :TEST (FUNCTION CHAR-EQUAL)) #(0 1 0 1 0))
3858 Pass: (EQUAL (REMOVE-DUPLICATES (COPY-SEQ #(0 1 0 1 1 0 1 0)) :START 2 :END 6 :KEY (FUNCTION (LAMBDA (ARG) (CHAR "aA" ARG))) :TEST-NOT (COMPLEMENT (FUNCTION CHAR-EQUAL))) #(0 1 0 1 0))
Pass: 3851, Failed: 8

test: sacla-tests/must-string.lisp
0 Pass: (SIMPLE-STRING-P "")
1 Pass: (SIMPLE-STRING-P "abc")
2 Pass: (NOT (SIMPLE-STRING-P (QUOTE NOT-A-STRING)))
3 Pass: (LET ((STR (MAKE-ARRAY 3 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER T))) (IF (NOT (SIMPLE-VECTOR-P STR)) (NOT (SIMPLE-STRING-P STR)) (SIMPLE-STRING-P STR)))
4 Pass: (CHAR= (CHAR "abc" 0) #\a)
5 Pass: (CHAR= (CHAR "abc" 1) #\b)
6 Pass: (CHAR= (CHAR "abc" 2) #\c)
7 Pass: (CHAR= (SCHAR "abc" 0) #\a)
8 Pass: (CHAR= (SCHAR "abc" 1) #\b)
9 Pass: (CHAR= (SCHAR "abc" 2) #\c)
10 Pass: (LET ((STR (MAKE-ARRAY 10 :ELEMENT-TYPE (QUOTE CHARACTER) :FILL-POINTER 3 :INITIAL-CONTENTS "0123456789"))) (AND (STRING= STR "012") (CHAR= (CHAR STR 3) #\3) (CHAR= (CHAR STR 4) #\4) (CHAR= (CHAR STR 5) #\5) (CHAR= (CHAR STR 6) #\6) (CHAR= (CHAR STR 7) #\7) (CHAR= (CHAR STR 8) #\8) (CHAR= (CHAR STR 9) #\9) (CHAR= (VECTOR-POP STR) #\2)))
11 Pass: (STRING= (STRING "") "")
12 Pass: (STRING= (STRING "abc") "abc")
13 Pass: (STRING= (STRING "a") "a")
14 Pass: (STRING= (STRING (QUOTE ABC)) "ABC")
15 Pass: (STRING= (STRING (QUOTE A)) "A")
16 Pass: (STRING= (STRING #\a) "a")
17 Pass: (STRING= (STRING-UPCASE "abcde") "ABCDE")
18 Pass: (STRING= (STRING-UPCASE "Dr. Livingston, I presume?") "DR. LIVINGSTON, I PRESUME?")
19 Pass: (STRING= (STRING-UPCASE "Dr. Livingston, I presume?" :START 6 :END 10) "Dr. LiVINGston, I presume?")
20 Pass: (STRING= (STRING-UPCASE (QUOTE KLUDGY-HASH-SEARCH)) "KLUDGY-HASH-SEARCH")
21 Pass: (STRING= (STRING-UPCASE "abcde" :START 2 :END NIL) "abCDE")
22 Pass: (STRING= (STRING-DOWNCASE "Dr. Livingston, I presume?") "dr. livingston, i presume?")
23 Pass: (STRING= (STRING-DOWNCASE (QUOTE KLUDGY-HASH-SEARCH)) "kludgy-hash-search")
24 Pass: (STRING= (STRING-DOWNCASE "A FOOL" :START 2 :END NIL) "A fool")
25 Pass: (STRING= (STRING-CAPITALIZE "elm 13c arthur;fig don't") "Elm 13c Arthur;Fig Don'T")
26 Pass: (STRING= (STRING-CAPITALIZE " hello ") " Hello ")
27 Pass: (STRING= (STRING-CAPITALIZE "occlUDeD cASEmenTs FOreSTAll iNADVertent DEFenestraTION") "Occluded Casements Forestall Inadvertent Defenestration")
28 Pass: (STRING= (STRING-CAPITALIZE (QUOTE KLUDGY-HASH-SEARCH)) "Kludgy-Hash-Search")
29 Pass: (STRING= (STRING-CAPITALIZE "DON'T!") "Don'T!")
30 Pass: (STRING= (STRING-CAPITALIZE "pipe 13a, foo16c") "Pipe 13a, Foo16c")
31 Pass: (STRING= (STRING-CAPITALIZE "a fool" :START 2 :END NIL) "a Fool")
32 Pass: (LET ((STR (COPY-SEQ "0123ABCD890a"))) (AND (STRING= (NSTRING-DOWNCASE STR :START 5 :END 7) "0123AbcD890a") (STRING= STR "0123AbcD890a")))
33 Pass: (LET* ((STR0 (COPY-SEQ "abcde")) (STR (NSTRING-UPCASE STR0))) (AND (EQ STR0 STR) (STRING= STR "ABCDE")))
34 Pass: (LET* ((STR0 (COPY-SEQ "Dr. Livingston, I presume?")) (STR (NSTRING-UPCASE STR0))) (AND (EQ STR0 STR) (STRING= STR "DR. LIVINGSTON, I PRESUME?")))
35 Pass: (LET* ((STR0 (COPY-SEQ "Dr. Livingston, I presume?")) (STR (NSTRING-UPCASE STR0 :START 6 :END 10))) (AND (EQ STR0 STR) (STRING= STR "Dr. LiVINGston, I presume?")))
36 Pass: (LET* ((STR0 (COPY-SEQ "abcde")) (STR (NSTRING-UPCASE STR0 :START 2 :END NIL))) (STRING= STR "abCDE"))
37 Pass: (LET* ((STR0 (COPY-SEQ "Dr. Livingston, I presume?")) (STR (NSTRING-DOWNCASE STR0))) (AND (EQ STR0 STR) (STRING= STR "dr. livingston, i presume?")))
38 Pass: (LET* ((STR0 (COPY-SEQ "ABCDE")) (STR (NSTRING-DOWNCASE STR0 :START 2 :END NIL))) (STRING= STR "ABcde"))
39 Pass: (LET* ((STR0 (COPY-SEQ "elm 13c arthur;fig don't")) (STR (NSTRING-CAPITALIZE STR0))) (AND (EQ STR0 STR) (STRING= STR "Elm 13c Arthur;Fig Don'T")))
40 Pass: (LET* ((STR0 (COPY-SEQ " hello ")) (STR (NSTRING-CAPITALIZE STR0))) (AND (EQ STR0 STR) (STRING= STR " Hello ")))
41 Pass: (LET* ((STR0 (COPY-SEQ "occlUDeD cASEmenTs FOreSTAll iNADVertent DEFenestraTION")) (STR (NSTRING-CAPITALIZE STR0))) (AND (EQ STR0 STR) (STRING= STR "Occluded Casements Forestall Inadvertent Defenestration")))
42 Pass: (LET* ((STR0 (COPY-SEQ "DON'T!")) (STR (NSTRING-CAPITALIZE STR0))) (AND (EQ STR0 STR) (STRING= STR "Don'T!")))
43 Pass: (LET* ((STR0 (COPY-SEQ "pipe 13a, foo16c")) (STR (NSTRING-CAPITALIZE STR0))) (AND (EQ STR0 STR) (STRING= STR "Pipe 13a, Foo16c")))
44 Pass: (LET* ((STR0 (COPY-SEQ "a fool")) (STR (NSTRING-CAPITALIZE STR0 :START 2 :END NIL))) (STRING= STR "a Fool"))
45 Pass: (STRING= (STRING-TRIM "abc" "abcaakaaakabcaaa") "kaaak")
46 Pass: (STRING= (STRING-TRIM (QUOTE (#\  #\	 #\
)) " garbanzo beans
        ") "garbanzo beans")
47 Pass: (STRING= (STRING-TRIM " (*)" " ( *three (silly) words* ) ") "three (silly) words")
48 Pass: (STRING= (STRING-LEFT-TRIM "abc" "labcabcabc") "labcabcabc")
49 Pass: (STRING= (STRING-LEFT-TRIM " (*)" " ( *three (silly) words* ) ") "three (silly) words* ) ")
50 Pass: (STRING= (STRING-RIGHT-TRIM " (*)" " ( *three (silly) words* ) ") " ( *three (silly) words")
51 Pass: (STRING= (STRING-TRIM "ABC" "abc") "abc")
52 Pass: (STRING= (STRING-TRIM "AABBCC" "abc") "abc")
53 Pass: (STRING= (STRING-TRIM "" "abc") "abc")
54 Pass: (STRING= (STRING-TRIM "ABC" "") "")
55 Pass: (STRING= (STRING-TRIM "cba" "abc") "")
56 Pass: (STRING= (STRING-TRIM "cba" "abccba") "")
57 Pass: (STRING= (STRING-TRIM "ccbbba" "abccba") "")
58 Pass: (STRING= (STRING-TRIM "cba" "abcxabc") "x")
59 Pass: (STRING= (STRING-TRIM "xyz" "xxyabcxyyz") "abc")
60 Pass: (STRING= (STRING-TRIM "CBA" (QUOTE ABCXABC)) "X")
61 Pass: (STRING= (STRING-TRIM "a" #\a) "")
62 Pass: (STRING= (STRING-LEFT-TRIM "ABC" "abc") "abc")
63 Pass: (STRING= (STRING-LEFT-TRIM "" "abc") "abc")
64 Pass: (STRING= (STRING-LEFT-TRIM "ABC" "") "")
65 Pass: (STRING= (STRING-LEFT-TRIM "cba" "abc") "")
66 Pass: (STRING= (STRING-LEFT-TRIM "cba" "abccba") "")
67 Pass: (STRING= (STRING-LEFT-TRIM "cba" "abcxabc") "xabc")
68 Pass: (STRING= (STRING-LEFT-TRIM "xyz" "xxyabcxyz") "abcxyz")
69 Pass: (STRING= (STRING-LEFT-TRIM "CBA" (QUOTE ABCXABC)) "XABC")
70 Pass: (STRING= (STRING-LEFT-TRIM "a" #\a) "")
71 Pass: (STRING= (STRING-RIGHT-TRIM "ABC" "abc") "abc")
72 Pass: (STRING= (STRING-RIGHT-TRIM "" "abc") "abc")
73 Pass: (STRING= (STRING-RIGHT-TRIM "ABC" "") "")
74 Pass: (STRING= (STRING-RIGHT-TRIM "cba" "abc") "")
75 Pass: (STRING= (STRING-RIGHT-TRIM "cba" "abccba") "")
76 Pass: (STRING= (STRING-RIGHT-TRIM "cba" "abcxabc") "abcx")
77 Pass: (STRING= (STRING-RIGHT-TRIM "xyz" "xxyabcxyz") "xxyabc")
78 Pass: (STRING= (STRING-RIGHT-TRIM "CBA" (QUOTE ABCXABC)) "ABCX")
79 Pass: (STRING= (STRING-RIGHT-TRIM "a" #\a) "")
80 Pass: (STRING= (STRING "already a string") "already a string")
81 Pass: (STRING= (STRING (QUOTE ELM)) "ELM")
82 Pass: (STRING= (STRING #\c) "c")
83 Pass: (STRING= "foo" "foo")
84 Pass: (NOT (STRING= "foo" "Foo"))
85 Pass: (NOT (STRING= "foo" "bar"))
86 Pass: (STRING= "together" "frog" :START1 1 :END1 3 :START2 2)
87 Pass: (STRING-EQUAL "foo" "Foo")
88 Pass: (STRING= "abcd" "01234abcd9012" :START2 5 :END2 9)
89 Pass: (EQL (STRING< "aaaa" "aaab") 3)
90 Pass: (EQL (STRING>= "aaaaa" "aaaa") 4)
91 Pass: (EQL (STRING-NOT-GREATERP "Abcde" "abcdE") 5)
92 Pass: (EQL (STRING-LESSP "012AAAA789" "01aaab6" :START1 3 :END1 7 :START2 2 :END2 6) 6)
93 Pass: (NOT (STRING-NOT-EQUAL "AAAA" "aaaA"))
94 Pass: (STRING= "" "")
95 Pass: (STRING= (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE CHARACTER)) (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE BASE-CHAR)))
96 Pass: (NOT (STRING= "abc" ""))
97 Pass: (NOT (STRING= "" "abc"))
98 Pass: (NOT (STRING= "A" "a"))
99 Pass: (STRING= "abc" "xyz" :START1 3 :START2 3)
100 Pass: (STRING= "abc" "xyz" :START1 1 :END1 1 :START2 0 :END2 0)
101 Pass: (STRING= "axyza" "xyz" :START1 1 :END1 4)
102 Pass: (STRING= "axyza" "xyz" :START1 1 :END1 4 :START2 0 :END2 NIL)
103 Pass: (STRING= "abxyz" "xyabz" :END1 2 :START2 2 :END2 4)
104 Pass: (NOT (STRING= "love" "hate"))
105 Pass: (STRING= (QUOTE LOVE) (QUOTE LOVE))
106 Pass: (NOT (STRING= (QUOTE LOVE) "hate"))
107 Pass: (STRING= #\a #\a)
108 Pass: (NOT (STRING/= "" ""))
109 Pass: (NOT (STRING/= (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE CHARACTER)) (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE BASE-CHAR))))
110 Pass: (EQL (STRING/= "abc" "") 0)
111 Pass: (EQL (STRING/= "" "abc") 0)
112 Pass: (EQL (STRING/= "A" "a") 0)
113 Pass: (NOT (STRING/= "abc" "xyz" :START1 3 :START2 3))
114 Pass: (NOT (STRING/= "abc" "xyz" :START1 1 :END1 1 :START2 0 :END2 0))
115 Pass: (NOT (STRING/= "axyza" "xyz" :START1 1 :END1 4))
116 Pass: (NOT (STRING/= "axyza" "xyz" :START1 1 :END1 4 :START2 0 :END2 NIL))
117 Pass: (NOT (STRING/= "abxyz" "xyabz" :END1 2 :START2 2 :END2 4))
118 Pass: (EQL (STRING/= "love" "hate") 0)
119 Pass: (EQL (STRING/= "love" "loVe") 2)
120 Pass: (NOT (STRING/= "life" "death" :START1 3 :START2 1 :END2 2))
121 Pass: (EQL (STRING/= "abcxyz" "ABCxyZ" :START1 3 :START2 3) 5)
122 Pass: (EQL (STRING/= "abcxyz" "ABCxyZ" :START1 3 :END1 NIL :START2 3 :END2 NIL) 5)
123 Pass: (EQL (STRING/= "abcxyz" "ABCxyZ" :END1 NIL :START2 3 :END2 3) 0)
124 Pass: (EQL (STRING/= "abc" "abcxyz") 3)
125 Pass: (EQL (STRING/= "abcxyz" "abc") 3)
126 Pass: (EQL (STRING/= "abcxyz" "") 0)
127 Pass: (EQL (STRING/= "AbcDef" "cdef" :START1 2) 3)
128 Pass: (EQL (STRING/= "cdef" "AbcDef" :START2 2) 1)
129 Pass: (= (STRING/= (QUOTE LOVE) "hate") 0)
130 Pass: (NOT (STRING/= (QUOTE LOVE) (QUOTE LOVE)))
131 Pass: (NOT (STRING/= #\a #\a))
132 Pass: (= (STRING/= #\a #\b) 0)
133 Pass: (NOT (STRING< "" ""))
134 Pass: (NOT (STRING< "dog" "dog"))
135 Pass: (NOT (STRING< " " " "))
136 Pass: (NOT (STRING< "abc" ""))
137 Pass: (EQL (STRING< "" "abc") 0)
138 Pass: (EQL (STRING< "ab" "abc") 2)
139 Pass: (NOT (STRING< "abc" "ab"))
140 Pass: (EQL (STRING< "aaa" "aba") 1)
141 Pass: (NOT (STRING< "aba" "aaa"))
142 Pass: (NOT (STRING< "my cat food" "your dog food" :START1 6 :START2 8))
143 Pass: (NOT (STRING< "cat food 2 dollars" "dog food 3 dollars" :START1 3 :END1 9 :START2 3 :END2 9))
144 Pass: (EQL (STRING< "xyzabc" "abcd" :START1 3) 6)
145 Pass: (EQL (STRING< "abc" "abc" :END1 1) 1)
146 Pass: (EQL (STRING< "xyzabc" "abc" :START1 3 :END1 5) 5)
147 Pass: (EQL (STRING< "xyz" "abcxyzXYZ" :START2 3) 3)
148 Pass: (NOT (STRING< "abc" "abcxyz" :END2 3))
149 Pass: (EQL (STRING< "xyz" "abcxyz" :END1 2 :START2 3) 2)
150 Pass: (NOT (STRING< "xyzabc" "abcdef" :START1 3 :END2 3))
151 Pass: (EQL (STRING< "aaaa" "z") 0)
152 Pass: (EQL (STRING< "pppTTTaTTTqqq" "pTTTxTTT" :START1 3 :START2 1) 6)
153 Pass: (EQL (STRING< "pppTTTaTTTqqq" "pTTTxTTT" :START1 6 :END1 7 :START2 4 :END2 5) 6)
154 Pass: (NOT (STRING< (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE CHARACTER)) (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE BASE-CHAR))))
155 Pass: (NOT (STRING< (QUOTE LOVE) (QUOTE HATE)))
156 Pass: (= (STRING< (QUOTE PEACE) (QUOTE WAR)) 0)
157 Pass: (NOT (STRING< (QUOTE LOVE) (QUOTE LOVE)))
158 Pass: (NOT (STRING< #\a #\a))
159 Pass: (= (STRING< #\a #\b) 0)
160 Pass: (NOT (STRING> "" ""))
161 Pass: (NOT (STRING> "dog" "dog"))
162 Pass: (NOT (STRING> " " " "))
163 Pass: (EQL (STRING> "abc" "") 0)
164 Pass: (NOT (STRING> "" "abc"))
165 Pass: (NOT (STRING> "ab" "abc"))
166 Pass: (EQL (STRING> "abc" "ab") 2)
167 Pass: (EQL (STRING> "aba" "aaa") 1)
168 Pass: (NOT (STRING> "aaa" "aba"))
169 Pass: (NOT (STRING> "my cat food" "your dog food" :START1 6 :START2 8))
170 Pass: (NOT (STRING> "cat food 2 dollars" "dog food 3 dollars" :START1 3 :END1 9 :START2 3 :END2 9))
171 Pass: (EQL (STRING> "xyzabcde" "abcd" :START1 3) 7)
172 Pass: (NOT (STRING> "abc" "abc" :END1 1))
173 Pass: (EQL (STRING> "xyzabc" "a" :START1 3 :END1 5) 4)
174 Pass: (EQL (STRING> "xyzXYZ" "abcxyz" :START2 3) 3)
175 Pass: (EQL (STRING> "abcxyz" "abcxyz" :END2 3) 3)
176 Pass: (NOT (STRING> "xyzXYZ" "abcxyz" :END1 2 :START2 3))
177 Pass: (NOT (STRING> "xyzabc" "abcdef" :START1 3 :END2 3))
178 Pass: (EQL (STRING> "z" "aaaa") 0)
179 Pass: (EQL (STRING> "pTTTxTTTqqq" "pppTTTaTTT" :START1 1 :START2 3) 4)
180 Pass: (EQL (STRING> "pppTTTxTTTqqq" "pTTTaTTT" :START1 6 :END1 7 :START2 4 :END2 5) 6)
181 Pass: (NOT (STRING> (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE CHARACTER)) (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE BASE-CHAR))))
182 Pass: (= (STRING> (QUOTE LOVE) (QUOTE HATE)) 0)
183 Pass: (NOT (STRING> (QUOTE PEACE) (QUOTE WAR)))
184 Pass: (NOT (STRING> (QUOTE LOVE) (QUOTE LOVE)))
185 Pass: (NOT (STRING> #\a #\a))
186 Pass: (NOT (STRING> #\a #\b))
187 Pass: (= (STRING> #\z #\a) 0)
188 Pass: (EQL (STRING<= "" "") 0)
189 Pass: (EQL (STRING<= "dog" "dog") 3)
190 Pass: (EQL (STRING<= " " " ") 1)
191 Pass: (NOT (STRING<= "abc" ""))
192 Pass: (EQL (STRING<= "ab" "abc") 2)
193 Pass: (EQL (STRING<= "aaa" "aba") 1)
194 Pass: (NOT (STRING<= "aba" "aaa"))
195 Pass: (EQL (STRING<= "my cat food" "your dog food" :START1 6 :START2 8) 11)
196 Pass: (EQL (STRING<= "cat food 2 dollars" "dog food 3 dollars" :START1 3 :END1 9 :START2 3 :END2 9) 9)
197 Pass: (EQL (STRING<= "xyzabc" "abcd" :START1 3) 6)
198 Pass: (EQL (STRING<= "abc" "abc" :END1 1) 1)
199 Pass: (EQL (STRING<= "xyzabc" "abc" :START1 3 :END1 5) 5)
200 Pass: (EQL (STRING<= "xyz" "abcxyzXYZ" :START2 3) 3)
201 Pass: (EQL (STRING<= "abc" "abcxyz" :END2 3) 3)
202 Pass: (EQL (STRING<= "xyz" "abcxyz" :END1 2 :START2 3) 2)
203 Pass: (EQL (STRING<= "xyzabc" "abcdef" :START1 3 :END2 3) 6)
204 Pass: (EQL (STRING<= "aaaa" "z") 0)
205 Pass: (EQL (STRING<= "pppTTTaTTTqqq" "pTTTxTTT" :START1 3 :START2 1) 6)
206 Pass: (EQL (STRING<= "pppTTTaTTTqqq" "pTTTxTTT" :START1 6 :END1 7 :START2 4 :END2 5) 6)
207 Pass: (EQL (STRING<= (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE CHARACTER)) (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE BASE-CHAR))) 0)
208 Pass: (NOT (STRING<= (QUOTE LOVE) (QUOTE HATE)))
209 Pass: (= (STRING<= (QUOTE PEACE) (QUOTE WAR)) 0)
210 Pass: (= (STRING<= (QUOTE LOVE) (QUOTE LOVE)) 4)
211 Pass: (= (STRING<= #\a #\a) 1)
212 Pass: (= (STRING<= #\a #\b) 0)
213 Pass: (NOT (STRING<= #\z #\a))
214 Pass: (EQL (STRING>= "" "") 0)
215 Pass: (EQL (STRING>= "dog" "dog") 3)
216 Pass: (EQL (STRING>= " " " ") 1)
217 Pass: (EQL (STRING>= "abc" "") 0)
218 Pass: (NOT (STRING>= "" "abc"))
219 Pass: (NOT (STRING>= "ab" "abc"))
220 Pass: (EQL (STRING>= "abc" "ab") 2)
221 Pass: (EQL (STRING>= "aba" "aaa") 1)
222 Pass: (NOT (STRING>= "aaa" "aba"))
223 Pass: (EQL (STRING>= "my cat food" "your dog food" :START1 6 :START2 8) 11)
224 Pass: (EQL (STRING>= "cat food 2 dollars" "dog food 3 dollars" :START1 3 :END1 9 :START2 3 :END2 9) 9)
225 Pass: (EQL (STRING>= "xyzabcde" "abcd" :START1 3) 7)
226 Pass: (NOT (STRING>= "abc" "abc" :END1 1))
227 Pass: (EQL (STRING>= "xyzabc" "a" :START1 3 :END1 5) 4)
228 Pass: (EQL (STRING>= "xyzXYZ" "abcxyz" :START2 3) 3)
229 Pass: (EQL (STRING>= "abcxyz" "abcxyz" :END2 3) 3)
230 Pass: (NOT (STRING>= "xyzXYZ" "abcxyz" :END1 2 :START2 3))
231 Pass: (EQL (STRING>= "xyzabc" "abcdef" :START1 3 :END2 3) 6)
232 Pass: (EQL (STRING>= "z" "aaaa") 0)
233 Pass: (EQL (STRING>= "pTTTxTTTqqq" "pppTTTaTTT" :START1 1 :START2 3) 4)
234 Pass: (EQL (STRING>= "pppTTTxTTTqqq" "pTTTaTTT" :START1 6 :END1 7 :START2 4 :END2 5) 6)
235 Pass: (EQL (STRING>= (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE CHARACTER)) (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE BASE-CHAR))) 0)
236 Pass: (= (STRING>= (QUOTE LOVE) (QUOTE HATE)) 0)
237 Pass: (NOT (STRING>= (QUOTE PEACE) (QUOTE WAR)))
238 Pass: (= (STRING>= (QUOTE LOVE) (QUOTE LOVE)) 4)
239 Pass: (= (STRING>= #\a #\a) 1)
240 Pass: (NOT (STRING>= #\a #\b))
241 Pass: (= (STRING>= #\z #\a) 0)
242 Pass: (STRING-EQUAL "" "")
243 Pass: (STRING-EQUAL (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE CHARACTER)) (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE BASE-CHAR)))
244 Pass: (NOT (STRING-EQUAL "abc" ""))
245 Pass: (NOT (STRING-EQUAL "" "abc"))
246 Pass: (STRING-EQUAL "A" "a")
247 Pass: (STRING-EQUAL "abc" "xyz" :START1 3 :START2 3)
248 Pass: (STRING-EQUAL "abc" "xyz" :START1 1 :END1 1 :START2 0 :END2 0)
249 Pass: (STRING-EQUAL "axyza" "xyz" :START1 1 :END1 4)
250 Pass: (STRING-EQUAL "axyza" "xyz" :START1 1 :END1 4 :START2 0 :END2 NIL)
251 Pass: (STRING-EQUAL "abxyz" "xyabz" :END1 2 :START2 2 :END2 4)
252 Pass: (NOT (STRING-EQUAL "love" "hate"))
253 Pass: (STRING-EQUAL "xyz" "XYZ")
254 Pass: (NOT (STRING-EQUAL (QUOTE LOVE) (QUOTE HATE)))
255 Pass: (NOT (STRING-EQUAL (QUOTE PEACE) (QUOTE WAR)))
256 Pass: (STRING-EQUAL (QUOTE LOVE) (QUOTE LOVE))
257 Pass: (STRING-EQUAL #\a #\a)
258 Pass: (NOT (STRING-EQUAL #\a #\b))
259 Pass: (NOT (STRING-EQUAL #\z #\a))
260 Pass: (NOT (STRING-NOT-EQUAL "" ""))
261 Pass: (NOT (STRING-NOT-EQUAL (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE CHARACTER)) (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE BASE-CHAR))))
262 Pass: (EQL (STRING-NOT-EQUAL "abc" "") 0)
263 Pass: (EQL (STRING-NOT-EQUAL "" "abc") 0)
264 Pass: (NOT (STRING-NOT-EQUAL "A" "a"))
265 Pass: (NOT (STRING-NOT-EQUAL "abc" "xyz" :START1 3 :START2 3))
266 Pass: (NOT (STRING-NOT-EQUAL "abc" "xyz" :START1 1 :END1 1 :START2 0 :END2 0))
267 Pass: (NOT (STRING-NOT-EQUAL "axyza" "xyz" :START1 1 :END1 4))
268 Pass: (NOT (STRING-NOT-EQUAL "axyza" "xyz" :START1 1 :END1 4 :START2 0 :END2 NIL))
269 Pass: (NOT (STRING-NOT-EQUAL "abxyz" "xyabz" :END1 2 :START2 2 :END2 4))
270 Pass: (EQL (STRING-NOT-EQUAL "love" "hate") 0)
271 Pass: (NOT (STRING-NOT-EQUAL "love" "loVe"))
272 Pass: (NOT (STRING-NOT-EQUAL "life" "death" :START1 3 :START2 1 :END2 2))
273 Pass: (NOT (STRING-NOT-EQUAL "abcxyz" "ABCxyZ" :START1 3 :START2 3))
274 Pass: (NOT (STRING-NOT-EQUAL "abcxyz" "ABCxyZ" :START1 3 :END1 NIL :START2 3 :END2 NIL))
275 Pass: (EQL (STRING-NOT-EQUAL "abcxyz" "ABCxyZ" :END1 NIL :START2 3 :END2 3) 0)
276 Pass: (EQL (STRING-NOT-EQUAL "abc" "abcxyz") 3)
277 Pass: (EQL (STRING-NOT-EQUAL "abcxyz" "abc") 3)
278 Pass: (EQL (STRING-NOT-EQUAL "abcxyz" "") 0)
279 Pass: (NOT (STRING-NOT-EQUAL "AbcDef" "cdef" :START1 2))
280 Pass: (NOT (STRING-NOT-EQUAL "cdef" "AbcDef" :START2 2))
281 Pass: (NOT (STRING-NOT-EQUAL "ABC" "abc"))
282 Pass: (= (STRING-NOT-EQUAL (QUOTE LOVE) (QUOTE HATE)) 0)
283 Pass: (= (STRING-NOT-EQUAL (QUOTE PEACE) (QUOTE WAR)) 0)
284 Pass: (NOT (STRING-NOT-EQUAL (QUOTE LOVE) (QUOTE LOVE)))
285 Pass: (NOT (STRING-NOT-EQUAL #\a #\a))
286 Pass: (= (STRING-NOT-EQUAL #\a #\b) 0)
287 Pass: (= (STRING-NOT-EQUAL #\z #\a) 0)
288 Pass: (NOT (STRING-LESSP "" ""))
289 Pass: (NOT (STRING-LESSP "dog" "dog"))
290 Pass: (NOT (STRING-LESSP " " " "))
291 Pass: (NOT (STRING-LESSP "abc" ""))
292 Pass: (EQL (STRING-LESSP "" "abc") 0)
293 Pass: (EQL (STRING-LESSP "ab" "abc") 2)
294 Pass: (NOT (STRING-LESSP "abc" "ab"))
295 Pass: (EQL (STRING-LESSP "aaa" "aba") 1)
296 Pass: (NOT (STRING-LESSP "aba" "aaa"))
297 Pass: (NOT (STRING-LESSP "my cat food" "your dog food" :START1 6 :START2 8))
298 Pass: (NOT (STRING-LESSP "cat food 2 dollars" "dog food 3 dollars" :START1 3 :END1 9 :START2 3 :END2 9))
299 Pass: (EQL (STRING-LESSP "xyzabc" "abcd" :START1 3) 6)
300 Pass: (EQL (STRING-LESSP "abc" "abc" :END1 1) 1)
301 Pass: (EQL (STRING-LESSP "xyzabc" "abc" :START1 3 :END1 5) 5)
302 Pass: (EQL (STRING-LESSP "xyz" "abcxyzXYZ" :START2 3) 3)
303 Pass: (NOT (STRING-LESSP "abc" "abcxyz" :END2 3))
304 Pass: (EQL (STRING-LESSP "xyz" "abcxyz" :END1 2 :START2 3) 2)
305 Pass: (NOT (STRING-LESSP "xyzabc" "abcdef" :START1 3 :END2 3))
306 Pass: (EQL (STRING-LESSP "aaaa" "z") 0)
307 Pass: (EQL (STRING-LESSP "pppTTTaTTTqqq" "pTTTxTTT" :START1 3 :START2 1) 6)
308 Pass: (EQL (STRING-LESSP "pppTTTaTTTqqq" "pTTTxTTT" :START1 6 :END1 7 :START2 4 :END2 5) 6)
309 Pass: (NOT (STRING-LESSP (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE CHARACTER)) (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE BASE-CHAR))))
310 Pass: (AND (NOT (STRING-LESSP "abc" "ABC")) (NOT (STRING-LESSP "ABC" "abc")))
311 Pass: (NOT (STRING-LESSP (QUOTE LOVE) (QUOTE HATE)))
312 Pass: (= (STRING-LESSP (QUOTE PEACE) (QUOTE WAR)) 0)
313 Pass: (NOT (STRING-LESSP (QUOTE LOVE) (QUOTE LOVE)))
314 Pass: (NOT (STRING-LESSP #\a #\a))
315 Pass: (= (STRING-LESSP #\a #\b) 0)
316 Pass: (NOT (STRING-LESSP #\z #\a))
317 Pass: (NOT (STRING-GREATERP "" ""))
318 Pass: (NOT (STRING-GREATERP "dog" "dog"))
319 Pass: (NOT (STRING-GREATERP " " " "))
320 Pass: (EQL (STRING-GREATERP "abc" "") 0)
321 Pass: (NOT (STRING-GREATERP "" "abc"))
322 Pass: (NOT (STRING-GREATERP "ab" "abc"))
323 Pass: (EQL (STRING-GREATERP "abc" "ab") 2)
324 Pass: (EQL (STRING-GREATERP "aba" "aaa") 1)
325 Pass: (NOT (STRING-GREATERP "aaa" "aba"))
326 Pass: (NOT (STRING-GREATERP "my cat food" "your dog food" :START1 6 :START2 8))
327 Pass: (NOT (STRING-GREATERP "cat food 2 dollars" "dog food 3 dollars" :START1 3 :END1 9 :START2 3 :END2 9))
328 Pass: (EQL (STRING-GREATERP "xyzabcde" "abcd" :START1 3) 7)
329 Pass: (NOT (STRING-GREATERP "abc" "abc" :END1 1))
330 Pass: (EQL (STRING-GREATERP "xyzabc" "a" :START1 3 :END1 5) 4)
331 Pass: (EQL (STRING-GREATERP "xyzXYZ" "abcxyz" :START2 3) 3)
332 Pass: (EQL (STRING-GREATERP "abcxyz" "abcxyz" :END2 3) 3)
333 Pass: (NOT (STRING-GREATERP "xyzXYZ" "abcxyz" :END1 2 :START2 3))
334 Pass: (NOT (STRING-GREATERP "xyzabc" "abcdef" :START1 3 :END2 3))
335 Pass: (EQL (STRING-GREATERP "z" "aaaa") 0)
336 Pass: (EQL (STRING-GREATERP "pTTTxTTTqqq" "pppTTTaTTT" :START1 1 :START2 3) 4)
337 Pass: (EQL (STRING-GREATERP "pppTTTxTTTqqq" "pTTTaTTT" :START1 6 :END1 7 :START2 4 :END2 5) 6)
338 Pass: (NOT (STRING-GREATERP (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE CHARACTER)) (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE BASE-CHAR))))
339 Pass: (AND (NOT (STRING-GREATERP "abc" "ABC")) (NOT (STRING-GREATERP "ABC" "abc")))
340 Pass: (= (STRING-GREATERP (QUOTE LOVE) (QUOTE HATE)) 0)
341 Pass: (NOT (STRING-GREATERP (QUOTE PEACE) (QUOTE WAR)))
342 Pass: (NOT (STRING-GREATERP (QUOTE LOVE) (QUOTE LOVE)))
343 Pass: (NOT (STRING-GREATERP #\a #\a))
344 Pass: (NOT (STRING-GREATERP #\a #\b))
345 Pass: (= (STRING-GREATERP #\z #\a) 0)
346 Pass: (EQL (STRING-NOT-GREATERP "" "") 0)
347 Pass: (EQL (STRING-NOT-GREATERP "dog" "dog") 3)
348 Pass: (EQL (STRING-NOT-GREATERP " " " ") 1)
349 Pass: (NOT (STRING-NOT-GREATERP "abc" ""))
350 Pass: (EQL (STRING-NOT-GREATERP "ab" "abc") 2)
351 Pass: (EQL (STRING-NOT-GREATERP "aaa" "aba") 1)
352 Pass: (NOT (STRING-NOT-GREATERP "aba" "aaa"))
353 Pass: (EQL (STRING-NOT-GREATERP "my cat food" "your dog food" :START1 6 :START2 8) 11)
354 Pass: (EQL (STRING-NOT-GREATERP "cat food 2 dollars" "dog food 3 dollars" :START1 3 :END1 9 :START2 3 :END2 9) 9)
355 Pass: (EQL (STRING-NOT-GREATERP "xyzabc" "abcd" :START1 3) 6)
356 Pass: (EQL (STRING-NOT-GREATERP "abc" "abc" :END1 1) 1)
357 Pass: (EQL (STRING-NOT-GREATERP "xyzabc" "abc" :START1 3 :END1 5) 5)
358 Pass: (EQL (STRING-NOT-GREATERP "xyz" "abcxyzXYZ" :START2 3) 3)
359 Pass: (EQL (STRING-NOT-GREATERP "abc" "abcxyz" :END2 3) 3)
360 Pass: (EQL (STRING-NOT-GREATERP "xyz" "abcxyz" :END1 2 :START2 3) 2)
361 Pass: (EQL (STRING-NOT-GREATERP "xyzabc" "abcdef" :START1 3 :END2 3) 6)
362 Pass: (EQL (STRING-NOT-GREATERP "aaaa" "z") 0)
363 Pass: (EQL (STRING-NOT-GREATERP "pppTTTaTTTqqq" "pTTTxTTT" :START1 3 :START2 1) 6)
364 Pass: (EQL (STRING-NOT-GREATERP "pppTTTaTTTqqq" "pTTTxTTT" :START1 6 :END1 7 :START2 4 :END2 5) 6)
365 Pass: (EQL (STRING-NOT-GREATERP (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE CHARACTER)) (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE BASE-CHAR))) 0)
366 Pass: (AND (EQL (STRING-NOT-GREATERP "abc" "ABC") 3) (EQL (STRING-NOT-GREATERP "ABC" "abc") 3))
367 Pass: (NOT (STRING-NOT-GREATERP (QUOTE LOVE) (QUOTE HATE)))
368 Pass: (= (STRING-NOT-GREATERP (QUOTE PEACE) (QUOTE WAR)) 0)
369 Pass: (= (STRING-NOT-GREATERP (QUOTE LOVE) (QUOTE LOVE)) 4)
370 Pass: (= (STRING-NOT-GREATERP #\a #\a) 1)
371 Pass: (= (STRING-NOT-GREATERP #\a #\b) 0)
372 Pass: (NOT (STRING-NOT-GREATERP #\z #\a))
373 Pass: (EQL (STRING-NOT-LESSP "" "") 0)
374 Pass: (EQL (STRING-NOT-LESSP "dog" "dog") 3)
375 Pass: (EQL (STRING-NOT-LESSP " " " ") 1)
376 Pass: (EQL (STRING-NOT-LESSP "abc" "") 0)
377 Pass: (NOT (STRING-NOT-LESSP "" "abc"))
378 Pass: (NOT (STRING-NOT-LESSP "ab" "abc"))
379 Pass: (EQL (STRING-NOT-LESSP "abc" "ab") 2)
380 Pass: (EQL (STRING-NOT-LESSP "aba" "aaa") 1)
381 Pass: (NOT (STRING-NOT-LESSP "aaa" "aba"))
382 Pass: (EQL (STRING-NOT-LESSP "my cat food" "your dog food" :START1 6 :START2 8) 11)
383 Pass: (EQL (STRING-NOT-LESSP "cat food 2 dollars" "dog food 3 dollars" :START1 3 :END1 9 :START2 3 :END2 9) 9)
384 Pass: (EQL (STRING-NOT-LESSP "xyzabcde" "abcd" :START1 3) 7)
385 Pass: (NOT (STRING-NOT-LESSP "abc" "abc" :END1 1))
386 Pass: (EQL (STRING-NOT-LESSP "xyzabc" "a" :START1 3 :END1 5) 4)
387 Pass: (EQL (STRING-NOT-LESSP "xyzXYZ" "abcxyz" :START2 3) 3)
388 Pass: (EQL (STRING-NOT-LESSP "abcxyz" "abcxyz" :END2 3) 3)
389 Pass: (NOT (STRING-NOT-LESSP "xyzXYZ" "abcxyz" :END1 2 :START2 3))
390 Pass: (EQL (STRING-NOT-LESSP "xyzabc" "abcdef" :START1 3 :END2 3) 6)
391 Pass: (EQL (STRING-NOT-LESSP "z" "aaaa") 0)
392 Pass: (EQL (STRING-NOT-LESSP "pTTTxTTTqqq" "pppTTTaTTT" :START1 1 :START2 3) 4)
393 Pass: (EQL (STRING-NOT-LESSP "pppTTTxTTTqqq" "pTTTaTTT" :START1 6 :END1 7 :START2 4 :END2 5) 6)
394 Pass: (EQL (STRING-NOT-LESSP (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE CHARACTER)) (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE BASE-CHAR))) 0)
395 Pass: (AND (EQL (STRING-NOT-LESSP "abc" "ABC") 3) (EQL (STRING-NOT-LESSP "ABC" "abc") 3))
396 Pass: (= (STRING-NOT-LESSP (QUOTE LOVE) (QUOTE HATE)) 0)
397 Pass: (NOT (STRING-NOT-LESSP (QUOTE PEACE) (QUOTE WAR)))
398 Pass: (= (STRING-NOT-LESSP (QUOTE LOVE) (QUOTE LOVE)) 4)
399 Pass: (= (STRING-NOT-LESSP #\a #\a) 1)
400 Pass: (NOT (STRING-NOT-LESSP #\a #\b))
401 Pass: (= (STRING-NOT-LESSP #\z #\a) 0)
402 Pass: (STRINGP "aaaaaa")
403 Pass: (STRINGP (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE CHARACTER)))
404 Pass: (STRINGP (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE BASE-CHAR)))
405 Pass: (STRINGP (MAKE-ARRAY 0 :ELEMENT-TYPE (QUOTE STANDARD-CHAR)))
406 Pass: (NOT (STRINGP #\a))
407 Pass: (NOT (STRINGP (QUOTE A)))
408 Pass: (NOT (STRINGP (QUOTE (STRING))))
409 Pass: (STRING= (MAKE-STRING 3 :INITIAL-ELEMENT #\a) "aaa")
410 Pass: (LET ((STR (MAKE-STRING 3))) (AND (SIMPLE-STRING-P STR) (SETF (SCHAR STR 0) #\x) (SETF (SCHAR STR 1) #\y) (SETF (SCHAR STR 2) #\z) (STRING= STR "xyz")))
411 Pass: (STRING= (MAKE-STRING 1 :INITIAL-ELEMENT #\ ) " ")
412 Pass: (STRING= (MAKE-STRING 0) "")
413 Pass: (SUBTYPEP (UPGRADED-ARRAY-ELEMENT-TYPE (ARRAY-ELEMENT-TYPE (MAKE-STRING 3 :ELEMENT-TYPE (QUOTE STANDARD-CHAR)))) (QUOTE CHARACTER))
Pass: 414, Failed: 0

test: sacla-tests/must-symbol.lisp
0 Pass: (SYMBOLP (QUOTE ELEPHANT))
1 Pass: (NOT (SYMBOLP 12))
2 Pass: (SYMBOLP NIL)
3 Pass: (SYMBOLP (QUOTE NIL))
4 Pass: (SYMBOLP :TEST)
5 Pass: (NOT (SYMBOLP "hello"))
6 Pass: (NOT (KEYWORDP (QUOTE ELEPHANT)))
7 Pass: (NOT (KEYWORDP 12))
8 Pass: (KEYWORDP :TEST)
9 Pass: (KEYWORDP (QUOTE :TEST))
10 Pass: (NOT (KEYWORDP NIL))
11 Pass: (KEYWORDP :NIL)
12 Pass: (NOT (KEYWORDP (QUOTE (:TEST))))
13 Pass: (NOT (KEYWORDP "hello"))
14 Pass: (NOT (KEYWORDP ":hello"))
15 Pass: (NOT (KEYWORDP (QUOTE &OPTIONAL)))
16 Pass: (LET ((NEW (MAKE-SYMBOL "symbol"))) (STRING= (SYMBOL-NAME NEW) "symbol"))
17 Pass: (LET ((NEW (MAKE-SYMBOL "symbol"))) (NOT (BOUNDP NEW)))
18 Pass: (LET ((NEW (MAKE-SYMBOL "symbol"))) (NOT (FBOUNDP NEW)))
19 Pass: (LET ((NEW (MAKE-SYMBOL "symbol"))) (NULL (SYMBOL-PLIST NEW)))
20 Pass: (LET ((NEW (MAKE-SYMBOL "symbol"))) (NULL (SYMBOL-PACKAGE NEW)))
21 Pass: (LET ((NEW (MAKE-SYMBOL "symbol"))) (NOT (MEMBER NEW (FIND-ALL-SYMBOLS "symbol"))))
22 Pass: (EVERY (FUNCTION IDENTITY) (MAPCAR (FUNCTION (LAMBDA (NAME) (LET ((NEW (MAKE-SYMBOL NAME))) (AND (STRING= (SYMBOL-NAME NEW) NAME) (NOT (BOUNDP NEW)) (NOT (FBOUNDP NEW)) (NULL (SYMBOL-PLIST NEW)) (NOT (MEMBER NEW (FIND-ALL-SYMBOLS NAME))))))) (QUOTE ("" "Symbol" "eat-this" "SYMBOL" ":S:Y:M:B:O:L:"))))
23 Pass: (LET ((COPY (COPY-SYMBOL (QUOTE CAR)))) (STRING= (SYMBOL-NAME COPY) (SYMBOL-NAME (QUOTE CAR))))
24 Pass: (LET ((COPY (COPY-SYMBOL (QUOTE CAR)))) (NOT (BOUNDP COPY)))
25 Pass: (LET ((COPY (COPY-SYMBOL (QUOTE CAR)))) (NOT (FBOUNDP COPY)))
26 Pass: (LET ((COPY (COPY-SYMBOL (QUOTE CAR)))) (NULL (SYMBOL-PLIST COPY)))
27 Pass: (LET ((COPY (COPY-SYMBOL (QUOTE CAR)))) (NULL (SYMBOL-PACKAGE COPY)))
28 Pass: (LET ((COPY (COPY-SYMBOL (QUOTE CAR) "copy properties too"))) (STRING= (SYMBOL-NAME COPY) (SYMBOL-NAME (QUOTE CAR))))
29 Pass: (LET ((COPY (COPY-SYMBOL (QUOTE CAR) "copy properties too"))) (IF (BOUNDP (QUOTE CAR)) (BOUNDP COPY) (NOT (BOUNDP COPY))))
30 Pass: (LET ((COPY (COPY-SYMBOL (QUOTE CAR) "copy properties too"))) (EQ (SYMBOL-FUNCTION COPY) (SYMBOL-FUNCTION (QUOTE CAR))))
31 Pass: (LET ((COPY (COPY-SYMBOL (QUOTE CAR) "copy properties too"))) (EQUAL (SYMBOL-PLIST COPY) (SYMBOL-PLIST (QUOTE CAR))))
32 Pass: (LET ((COPY (COPY-SYMBOL (QUOTE CAR) "copy properties too"))) (NULL (SYMBOL-PACKAGE COPY)))
33 Pass: (EVERY (FUNCTION IDENTITY) (MAPCAR (FUNCTION (LAMBDA (SYMBOL) (LET ((COPY1 (COPY-SYMBOL SYMBOL)) (COPY2 (COPY-SYMBOL SYMBOL "copy-properties"))) (AND (STRING= (SYMBOL-NAME COPY1) (SYMBOL-NAME SYMBOL)) (STRING= (SYMBOL-NAME COPY2) (SYMBOL-NAME SYMBOL)) (NOT (BOUNDP COPY1)) (IF (BOUNDP SYMBOL) (BOUNDP COPY2) (NOT (BOUNDP COPY2))) (NOT (FBOUNDP COPY1)) (IF (FBOUNDP SYMBOL) (FBOUNDP COPY2) (NOT (FBOUNDP COPY2))) (NULL (SYMBOL-PLIST COPY1)) (EQUAL (SYMBOL-PLIST COPY2) (SYMBOL-PLIST SYMBOL)) (NULL (SYMBOL-PACKAGE COPY1)) (NULL (SYMBOL-PACKAGE COPY2)) (NOT (MEMBER COPY1 (FIND-ALL-SYMBOLS SYMBOL))) (NOT (MEMBER COPY2 (FIND-ALL-SYMBOLS SYMBOL))))))) (QUOTE (NIL CDR *PACKAGE* LIST SYMBOL WEIRD-SYMBOL))))
34 Pass: (LET ((NEW (GENSYM))) (NOT (BOUNDP NEW)))
35 Pass: (LET ((NEW (GENSYM))) (NOT (FBOUNDP NEW)))
36 Pass: (LET ((NEW (GENSYM))) (NULL (SYMBOL-PLIST NEW)))
37 Pass: (LET ((NEW (GENSYM))) (NULL (SYMBOL-PACKAGE NEW)))
38 Pass: (LET ((NEW (GENSYM "How about this"))) (NOT (BOUNDP NEW)))
39 Pass: (LET ((NEW (GENSYM "How about this"))) (NOT (FBOUNDP NEW)))
40 Pass: (LET ((NEW (GENSYM "How about this"))) (NULL (SYMBOL-PLIST NEW)))
41 Pass: (LET ((NEW (GENSYM "How about this"))) (NULL (SYMBOL-PACKAGE NEW)))
42 Pass: (LET ((NEW (GENSYM 100))) (NOT (BOUNDP NEW)))
43 Pass: (LET ((NEW (GENSYM 10))) (NOT (FBOUNDP NEW)))
44 Pass: (LET ((NEW (GENSYM 9))) (NULL (SYMBOL-PLIST NEW)))
45 Pass: (LET ((NEW (GENSYM 8))) (NULL (SYMBOL-PACKAGE NEW)))
46 Pass: (LET* ((COUNTER *GENSYM-COUNTER*) (NEW (GENSYM))) (STRING= (SYMBOL-NAME NEW) (WITH-OUTPUT-TO-STRING (STREAM) (FORMAT STREAM "G~D" COUNTER))))
47 Pass: (LET* ((COUNTER *GENSYM-COUNTER*) (NEW (GENSYM "JJ"))) (STRING= (SYMBOL-NAME NEW) (WITH-OUTPUT-TO-STRING (STREAM) (FORMAT STREAM "JJ~D" COUNTER))))
48 Pass: (LET* ((COUNTER *GENSYM-COUNTER*) (NEW (GENSYM ""))) (STRING= (SYMBOL-NAME NEW) (WITH-OUTPUT-TO-STRING (STREAM) (FORMAT STREAM "~D" COUNTER))))
49 Pass: (LET ((NEW (GENSYM 0))) (STRING= (SYMBOL-NAME NEW) "G0"))
50 Pass: (LET ((NEW (GENSYM 1000))) (STRING= (SYMBOL-NAME NEW) "G1000"))
51 Pass: (LET ((SYMBOL (GENTEMP))) (CHAR= (AREF (SYMBOL-NAME SYMBOL) 0) #\T))
52 Pass: (LET ((SYMBOL (GENTEMP))) (NOT (BOUNDP SYMBOL)))
53 Pass: (LET ((SYMBOL (GENTEMP))) (NOT (FBOUNDP SYMBOL)))
54 Pass: (LET ((SYMBOL (GENTEMP))) (NULL (SYMBOL-PLIST SYMBOL)))
55 Pass: (LET ((SYMBOL (GENTEMP))) (MULTIPLE-VALUE-BIND (SYMBOL-FOUND STATUS) (FIND-SYMBOL (SYMBOL-NAME SYMBOL)) (AND (EQ SYMBOL-FOUND SYMBOL) (IF (EQ *PACKAGE* (FIND-PACKAGE "KEYWORD")) (EQ STATUS :EXTERNAL) (EQ STATUS :INTERNAL)))))
56 Pass: (LET ((SYMBOL-1 (GENTEMP)) (SYMBOL-2 (GENTEMP))) (NOT (STRING= (SYMBOL-NAME SYMBOL-1) (SYMBOL-NAME SYMBOL-2))))
57 Pass: (LET ((SYMBOL (GENTEMP "prefix"))) (STRING= (SUBSEQ (SYMBOL-NAME SYMBOL) 0 6) "prefix"))
58 Pass: (LET ((SYMBOL (GENTEMP "prefix"))) (NOT (BOUNDP SYMBOL)))
59 Pass: (LET ((SYMBOL (GENTEMP "prefix"))) (NOT (FBOUNDP SYMBOL)))
60 Pass: (LET ((SYMBOL (GENTEMP "prefix"))) (NULL (SYMBOL-PLIST SYMBOL)))
61 Pass: (LET ((SYMBOL (GENTEMP "prefix"))) (MULTIPLE-VALUE-BIND (SYMBOL-FOUND STATUS) (FIND-SYMBOL (SYMBOL-NAME SYMBOL)) (AND (EQ SYMBOL-FOUND SYMBOL) (IF (EQ *PACKAGE* (FIND-PACKAGE "KEYWORD")) (EQ STATUS :EXTERNAL) (EQ STATUS :INTERNAL)))))
62 Pass: (LET* ((PACKAGE (DEFPACKAGE "TEST-PACKAGE-FOR-GENTEMP")) (SYMBOL (GENTEMP "prefix" PACKAGE))) (STRING= (SUBSEQ (SYMBOL-NAME SYMBOL) 0 6) "prefix"))
63 Pass: (LET* ((PACKAGE (DEFPACKAGE "TEST-PACKAGE-FOR-GENTEMP")) (SYMBOL (GENTEMP "prefix" PACKAGE))) (NOT (BOUNDP SYMBOL)))
64 Pass: (LET* ((PACKAGE (DEFPACKAGE "TEST-PACKAGE-FOR-GENTEMP")) (SYMBOL (GENTEMP "prefix" PACKAGE))) (NOT (FBOUNDP SYMBOL)))
65 Pass: (LET* ((PACKAGE (DEFPACKAGE "TEST-PACKAGE-FOR-GENTEMP")) (SYMBOL (GENTEMP "prefix" PACKAGE))) (NULL (SYMBOL-PLIST SYMBOL)))
66 Pass: (LET* ((PACKAGE (DEFPACKAGE "TEST-PACKAGE-FOR-GENTEMP")) (SYMBOL (GENTEMP "prefix" PACKAGE))) (MULTIPLE-VALUE-BIND (SYMBOL-FOUND STATUS) (FIND-SYMBOL (SYMBOL-NAME SYMBOL) PACKAGE) (AND (EQ SYMBOL-FOUND SYMBOL) (EQ STATUS :INTERNAL))))
67 Pass: (FUNCTIONP (SYMBOL-FUNCTION (QUOTE CAR)))
68 Pass: (EQ (SYMBOL-FUNCTION (QUOTE CAR)) (FDEFINITION (QUOTE CAR)))
69 Pass: (PROGN (SETF (SYMBOL-FUNCTION (QUOTE SYMBOL-FOR-TEST)) (FUNCTION CAR)) (EQ (SYMBOL-FOR-TEST (QUOTE (A))) (QUOTE A)))
70 Pass: (LET ((F (FUNCTION (LAMBDA (A) A)))) (SETF (SYMBOL-FUNCTION (QUOTE SYMBOL-FOR-TEST)) F) (EQ (SYMBOL-FUNCTION (QUOTE SYMBOL-FOR-TEST)) F))
71 Pass: (STRINGP (SYMBOL-NAME (QUOTE SYMBOL)))
72 Pass: (STRING= (SYMBOL-NAME (INTERN "TEST-SYMBOL")) "TEST-SYMBOL")
73 Pass: (EQ (SYMBOL-PACKAGE (QUOTE CAR)) (FIND-PACKAGE "COMMON-LISP"))
74 Pass: (EQ (SYMBOL-PACKAGE (QUOTE :KEY)) (FIND-PACKAGE "KEYWORD"))
75 Pass: (NULL (SYMBOL-PACKAGE (MAKE-SYMBOL "temp")))
76 Pass: (NULL (SYMBOL-PACKAGE (GENSYM)))
77 Pass: (PACKAGEP (SYMBOL-PACKAGE (QUOTE A)))
78 Pass: (PACKAGEP (SYMBOL-PACKAGE (QUOTE MY-SYMBOL)))
79 Pass: (LISTP (SYMBOL-PLIST (QUOTE CAR)))
80 Pass: (LISTP (SYMBOL-PLIST (QUOTE CDR)))
81 Pass: (NULL (SYMBOL-PLIST (GENSYM)))
82 Pass: (NULL (SYMBOL-PLIST (GENTEMP)))
83 Pass: (LET ((SYMBOL (GENSYM))) (SETF (SYMBOL-PLIST SYMBOL) (LIST (QUOTE A) 1 (QUOTE B) 2 (QUOTE C) 3)) (EQUAL (SYMBOL-PLIST SYMBOL) (QUOTE (A 1 B 2 C 3))))
84 Pass: (LET ((SYMBOL (GENSYM))) (SETF (SYMBOL-PLIST SYMBOL) (LIST (QUOTE A) 1 (QUOTE B) 2 (QUOTE C) 3)) (SETF (SYMBOL-PLIST SYMBOL) (QUOTE NIL)) (NULL (SYMBOL-PLIST SYMBOL)))
85 Pass: (PROGN (SETF (SYMBOL-VALUE (QUOTE A)) 1) (EQL (SYMBOL-VALUE (QUOTE A)) 1))
86 Pass: (PROGN (SETF (SYMBOL-VALUE (QUOTE A)) 1) (LET ((A 2)) (EQL (SYMBOL-VALUE (QUOTE A)) 1)))
87 Pass: (PROGN (SETF (SYMBOL-VALUE (QUOTE A)) 1) (LET ((A 2)) (SETQ A 3) (EQL (SYMBOL-VALUE (QUOTE A)) 1)))
88 Pass: (PROGN (SETF (SYMBOL-VALUE (QUOTE A)) 1) (LET ((A 2)) (DECLARE (SPECIAL A)) (EQL (SYMBOL-VALUE (QUOTE A)) 2)))
89 Pass: (PROGN (SETF (SYMBOL-VALUE (QUOTE A)) 1) (LET ((A 2)) (DECLARE (SPECIAL A)) (SETQ A 3) (EQL (SYMBOL-VALUE (QUOTE A)) 3)))
90 Pass: (PROGN (SETF (SYMBOL-VALUE (QUOTE A)) 1) (AND (EQL (LET ((A 2)) (SETF (SYMBOL-VALUE (QUOTE A)) 3) A) 2) (EQL A 3)))
91 Pass: (PROGN (SETF (SYMBOL-VALUE (QUOTE A)) 1) (LET ((A 4)) (DECLARE (SPECIAL A)) (LET ((B (SYMBOL-VALUE (QUOTE A)))) (SETF (SYMBOL-VALUE (QUOTE A)) 5) (AND (EQL A 5) (EQL B 4)))))
92 Pass: (EQ (SYMBOL-VALUE :ANY-KEYWORD) :ANY-KEYWORD)
93 Pass: (EQ (SYMBOL-VALUE (QUOTE NIL)) NIL)
94 Pass: (EQ (SYMBOL-VALUE (QUOTE NIL)) NIL)
95 Pass: (EQ (SYMBOL-VALUE T) T)
96 Pass: (LET ((SYMBOL (GENSYM))) (SETF (SYMBOL-PLIST SYMBOL) (LIST (QUOTE A) 1 (QUOTE B) 2 (QUOTE C) 3)) (AND (EQL (GET SYMBOL (QUOTE A)) 1) (EQL (GET SYMBOL (QUOTE B)) 2) (EQL (GET SYMBOL (QUOTE C)) 3) (EQL (GET SYMBOL (QUOTE D)) NIL) (EQL (GET SYMBOL (QUOTE E) 9) 9)))
97 Pass: (LET ((SYMBOL (GENSYM))) (SETF (SYMBOL-PLIST SYMBOL) (LIST (QUOTE A) 1 (QUOTE B) 2 (QUOTE C) 3)) (AND (EQL (SETF (GET SYMBOL (QUOTE A)) 9) 9) (EQL (GET SYMBOL (QUOTE A)) 9) (EQL (SETF (GET SYMBOL (QUOTE B)) 8) 8) (EQL (GET SYMBOL (QUOTE B)) 8) (EQL (SETF (GET SYMBOL (QUOTE C)) 7) 7) (EQL (GET SYMBOL (QUOTE C)) 7) (EQL (SETF (GET SYMBOL (QUOTE D)) 6) 6) (EQL (GET SYMBOL (QUOTE D)) 6) (EQL (SETF (GET SYMBOL (QUOTE E)) 5) 5) (EQL (GET SYMBOL (QUOTE E)) 5)))
98 Pass: (LET ((SYMBOL (GENSYM)) TMP) (AND (NULL (GET SYMBOL (QUOTE A))) (SETF (GET SYMBOL (QUOTE A) (SETQ TMP 1)) TMP) (EQL (GET SYMBOL (QUOTE A)) 1)))
99 Pass: (LET ((SYMBOL (GENSYM))) (SETF (SYMBOL-PLIST SYMBOL) (LIST (QUOTE A) 1 (QUOTE B) 2 (QUOTE C) 3 (QUOTE A) 9)) (AND (EQL (SETF (GET SYMBOL (QUOTE A)) 5) 5) (EQL (GET SYMBOL (QUOTE A)) 5)))
100 Pass: (LET ((SYMBOL (GENSYM))) (SETF (SYMBOL-PLIST SYMBOL) (LIST (QUOTE A) 1 (QUOTE B) 2 (QUOTE C) 3)) (AND (REMPROP SYMBOL (QUOTE A)) (EQ (GET SYMBOL (QUOTE A) (QUOTE NOT-FOUND)) (QUOTE NOT-FOUND))))
101 Pass: (LET ((SYMBOL (GENSYM))) (NOT (REMPROP SYMBOL (QUOTE A))))
102 Pass: (LET ((SYMBOL (GENSYM))) (SETF (SYMBOL-PLIST SYMBOL) (LIST (QUOTE A) 1 (QUOTE B) 2 (QUOTE C) 3 (QUOTE A) 9)) (AND (REMPROP SYMBOL (QUOTE A)) (EQL (GET SYMBOL (QUOTE A)) 9)))
103 Pass: (LET ((SYMBOL (GENSYM))) (SETF (SYMBOL-PLIST SYMBOL) (LIST (QUOTE A) 1 (QUOTE B) 2 (QUOTE C) 3 (QUOTE A) 9)) (AND (REMPROP SYMBOL (QUOTE A)) (EQL (GET SYMBOL (QUOTE A)) 9) (REMPROP SYMBOL (QUOTE A)) (EQ (GET SYMBOL (QUOTE A) (QUOTE NOT-FOUND)) (QUOTE NOT-FOUND))))
104 Pass: (NOT (BOUNDP (GENSYM)))
105 Pass: (LET ((SYMBOL (GENSYM))) (SET SYMBOL 1) (BOUNDP SYMBOL))
106 Pass: (LET ((TEST-SYMBOL 1)) (NOT (BOUNDP (QUOTE TEST-SYMBOL))))
107 Pass: (LET ((TEST-SYMBOL 1)) (DECLARE (SPECIAL TEST-SYMBOL)) (BOUNDP (QUOTE TEST-SYMBOL)))
108 Pass: (NOT (BOUNDP (MAKUNBOUND (GENSYM))))
109 Pass: (LET ((TEST-SYMBOL 0)) (DECLARE (SPECIAL TEST-SYMBOL)) (AND (LET ((TEST-SYMBOL 1)) (DECLARE (SPECIAL TEST-SYMBOL)) (NOT (BOUNDP (MAKUNBOUND (QUOTE TEST-SYMBOL))))) (BOUNDP (QUOTE TEST-SYMBOL))))
110 Pass: (LET ((TEST-SYMBOL 0)) (DECLARE (SPECIAL TEST-SYMBOL)) (AND (LET ((TEST-SYMBOL 1)) (MAKUNBOUND (QUOTE TEST-SYMBOL)) (EQL TEST-SYMBOL 1)) (NOT (BOUNDP (QUOTE TEST-SYMBOL)))))
111 Pass: (LET ((TEST-SYMBOL 0)) (DECLARE (SPECIAL TEST-SYMBOL)) (AND (EQL TEST-SYMBOL 0) (SETF (SYMBOL-VALUE (QUOTE TEST-SYMBOL)) 1) (EQL TEST-SYMBOL 1) (EQL (SET (QUOTE TEST-SYMBOL) 10) 10) (EQL TEST-SYMBOL 10)))
112 Pass: (LET ((TEST-SYMBOL 0)) (DECLARE (SPECIAL TEST-SYMBOL)) (AND (LET ((TEST-SYMBOL 1)) (SET (QUOTE TEST-SYMBOL) 100) (EQL TEST-SYMBOL 1)) (EQL TEST-SYMBOL 100)))
Pass: 113, Failed: 0

test: sacla-tests/should-array.lisp
0 Pass: (HANDLER-CASE (PROGN (ADJUST-ARRAY (MAKE-ARRAY (QUOTE (3 3))) (QUOTE (1 9)) :FILL-POINTER 1)) (ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
1 Failed: (PROGN (HANDLER-CASE (PROGN (ADJUSTABLE-ARRAY-P "not-a-symbol")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL)))
2 Pass: (PROGN (HANDLER-CASE (PROGN (ADJUSTABLE-ARRAY-P #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL)))
3 Pass: (PROGN (HANDLER-CASE (PROGN (ADJUSTABLE-ARRAY-P (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL)))
4 Pass: (HANDLER-CASE (PROGN (ARRAY-DIMENSIONS (QUOTE NOT-AN-ARRAY))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
5 Pass: (HANDLER-CASE (PROGN (ARRAY-DIMENSIONS #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
6 Pass: (HANDLER-CASE (PROGN (ARRAY-DIMENSIONS (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
7 Pass: (HANDLER-CASE (PROGN (ARRAY-ELEMENT-TYPE (QUOTE NOT-AN-ARRAY))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
8 Pass: (HANDLER-CASE (PROGN (ARRAY-ELEMENT-TYPE #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
9 Pass: (HANDLER-CASE (PROGN (ARRAY-ELEMENT-TYPE (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
10 Pass: (PROGN (HANDLER-CASE (PROGN (ARRAY-HAS-FILL-POINTER-P (QUOTE NOT-AN-ARRAY))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL)))
11 Pass: (PROGN (HANDLER-CASE (PROGN (ARRAY-HAS-FILL-POINTER-P #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL)))
12 Pass: (PROGN (HANDLER-CASE (PROGN (ARRAY-HAS-FILL-POINTER-P (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL)))
13 Pass: (PROGN (HANDLER-CASE (PROGN (ARRAY-DISPLACEMENT (QUOTE NOT-AN-ARRAY))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL)))
14 Pass: (PROGN (HANDLER-CASE (PROGN (ARRAY-DISPLACEMENT #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL)))
15 Pass: (PROGN (HANDLER-CASE (PROGN (ARRAY-DISPLACEMENT (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL)))
16 Pass: (HANDLER-CASE (PROGN (ARRAY-RANK (QUOTE NOT-AN-ARRAY))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
17 Pass: (HANDLER-CASE (PROGN (ARRAY-RANK #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
18 Pass: (HANDLER-CASE (PROGN (ARRAY-RANK (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
19 Pass: (HANDLER-CASE (PROGN (ARRAY-TOTAL-SIZE (QUOTE NOT-AN-ARRAY))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
20 Pass: (HANDLER-CASE (PROGN (ARRAY-TOTAL-SIZE #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
21 Pass: (HANDLER-CASE (PROGN (ARRAY-TOTAL-SIZE (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
22 Pass: (HANDLER-CASE (PROGN (FILL-POINTER (QUOTE NOT-AN-ARRAY))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
23 Pass: (HANDLER-CASE (PROGN (FILL-POINTER #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
24 Pass: (HANDLER-CASE (PROGN (FILL-POINTER (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
25 Pass: (LET ((VECTOR (MAKE-ARRAY 10 :FILL-POINTER NIL))) (OR (NOT (ARRAY-HAS-FILL-POINTER-P VECTOR)) (HANDLER-CASE (PROGN (FILL-POINTER VECTOR)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))))
26 Pass: (LET ((VECTOR (MAKE-ARRAY 10 :FILL-POINTER NIL))) (OR (NOT (ARRAY-HAS-FILL-POINTER-P VECTOR)) (HANDLER-CASE (PROGN (SETF (FILL-POINTER VECTOR) 0)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))))
27 Failed: (PROGN (HANDLER-CASE (PROGN (VECTOR-POP (MAKE-ARRAY 10 :FILL-POINTER NIL))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL)))
28 Pass: (HANDLER-CASE (PROGN (VECTOR-POP (MAKE-ARRAY 10 :FILL-POINTER 0))) (ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
29 Pass: (LET ((VEC (MAKE-ARRAY 3 :FILL-POINTER T :INITIAL-CONTENTS (QUOTE (A B C))))) (AND (EQ (VECTOR-POP VEC) (QUOTE C)) (EQ (VECTOR-POP VEC) (QUOTE B)) (EQ (VECTOR-POP VEC) (QUOTE A)) (HANDLER-CASE (PROGN (VECTOR-POP VEC)) (ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))))
30 Pass: (LET ((VECTOR (MAKE-ARRAY 10 :FILL-POINTER NIL))) (OR (NOT (ARRAY-HAS-FILL-POINTER-P VECTOR)) (HANDLER-CASE (PROGN (VECTOR-PUSH (QUOTE A) VECTOR)) (ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))))
31 Pass: (LET ((VECTOR (MAKE-ARRAY 10 :FILL-POINTER NIL))) (OR (NOT (ARRAY-HAS-FILL-POINTER-P VECTOR)) (HANDLER-CASE (PROGN (VECTOR-PUSH-EXTEND (QUOTE A) VECTOR)) (ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))))
32 Pass: (LET ((VECTOR (MAKE-ARRAY 1 :FILL-POINTER T :ADJUSTABLE NIL))) (OR (ADJUSTABLE-ARRAY-P VECTOR) (HANDLER-CASE (PROGN (VECTOR-PUSH-EXTEND (QUOTE A) VECTOR)) (ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))))
Pass: 31, Failed: 2

test: sacla-tests/should-character.lisp
0 Pass: (HANDLER-CASE (PROGN (CHAR=)) (PROGRAM-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
1 Pass: (HANDLER-CASE (PROGN (CHAR/=)) (PROGRAM-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
2 Pass: (HANDLER-CASE (PROGN (CHAR<)) (PROGRAM-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
3 Pass: (HANDLER-CASE (PROGN (CHAR>)) (PROGRAM-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
4 Pass: (HANDLER-CASE (PROGN (CHAR<=)) (PROGRAM-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
5 Pass: (HANDLER-CASE (PROGN (CHAR>=)) (PROGRAM-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
6 Pass: (HANDLER-CASE (PROGN (CHAR-EQUAL)) (PROGRAM-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
7 Pass: (HANDLER-CASE (PROGN (CHAR-NOT-EQUAL)) (PROGRAM-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
8 Pass: (HANDLER-CASE (PROGN (CHAR-LESSP)) (PROGRAM-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
9 Pass: (HANDLER-CASE (PROGN (CHAR-GREATERP)) (PROGRAM-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
10 Pass: (HANDLER-CASE (PROGN (CHAR-NOT-GREATERP)) (PROGRAM-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
11 Pass: (HANDLER-CASE (PROGN (CHAR-NOT-LESSP)) (PROGRAM-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
12 Pass: (HANDLER-CASE (PROGN (CHARACTER "abc")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
13 Pass: (HANDLER-CASE (PROGN (CHARACTER (QUOTE MORE-THAN-ONE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
14 Pass: (HANDLER-CASE (PROGN (CHARACTER (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
15 Pass: (HANDLER-CASE (PROGN (ALPHA-CHAR-P "abc")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
16 Pass: (HANDLER-CASE (PROGN (ALPHA-CHAR-P (QUOTE NOT-A-CHAR))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
17 Pass: (HANDLER-CASE (PROGN (ALPHA-CHAR-P (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
18 Pass: (HANDLER-CASE (PROGN (ALPHANUMERICP "abc")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
19 Pass: (HANDLER-CASE (PROGN (ALPHANUMERICP (QUOTE NOT-A-CHAR))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
20 Pass: (HANDLER-CASE (PROGN (ALPHANUMERICP (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
21 Pass: (PROGN (HANDLER-CASE (PROGN (GRAPHIC-CHAR-P "abc")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL)))
22 Pass: (PROGN (HANDLER-CASE (PROGN (GRAPHIC-CHAR-P (QUOTE NOT-A-CHAR))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL)))
23 Pass: (PROGN (HANDLER-CASE (PROGN (GRAPHIC-CHAR-P (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL)))
24 Pass: (HANDLER-CASE (PROGN (STANDARD-CHAR-P "abc")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
25 Pass: (HANDLER-CASE (PROGN (STANDARD-CHAR-P (QUOTE NOT-A-CHAR))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
26 Pass: (HANDLER-CASE (PROGN (STANDARD-CHAR-P (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
27 Pass: (HANDLER-CASE (PROGN (CHAR-UPCASE "abc")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
28 Pass: (HANDLER-CASE (PROGN (CHAR-UPCASE (QUOTE NOT-A-CHAR))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
29 Pass: (HANDLER-CASE (PROGN (CHAR-UPCASE (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
30 Pass: (HANDLER-CASE (PROGN (CHAR-DOWNCASE "abc")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
31 Pass: (HANDLER-CASE (PROGN (CHAR-DOWNCASE (QUOTE NOT-A-CHAR))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
32 Pass: (HANDLER-CASE (PROGN (CHAR-DOWNCASE (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
33 Pass: (HANDLER-CASE (PROGN (UPPER-CASE-P "abc")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
34 Pass: (HANDLER-CASE (PROGN (UPPER-CASE-P (QUOTE NOT-A-CHAR))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
35 Pass: (HANDLER-CASE (PROGN (UPPER-CASE-P (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
36 Pass: (HANDLER-CASE (PROGN (LOWER-CASE-P "abc")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
37 Pass: (HANDLER-CASE (PROGN (LOWER-CASE-P (QUOTE NOT-A-CHAR))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
38 Pass: (HANDLER-CASE (PROGN (LOWER-CASE-P (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
39 Pass: (HANDLER-CASE (PROGN (BOTH-CASE-P "abc")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
40 Pass: (HANDLER-CASE (PROGN (BOTH-CASE-P (QUOTE NOT-A-CHAR))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
41 Pass: (HANDLER-CASE (PROGN (BOTH-CASE-P (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
42 Pass: (HANDLER-CASE (PROGN (CHAR-CODE "abc")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
43 Pass: (HANDLER-CASE (PROGN (CHAR-CODE (QUOTE NOT-A-CHAR))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
44 Pass: (HANDLER-CASE (PROGN (CHAR-CODE (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
45 Pass: (HANDLER-CASE (PROGN (CHAR-NAME "abc")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
46 Pass: (HANDLER-CASE (PROGN (CHAR-NAME (QUOTE NOT-A-CHAR))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
47 Pass: (HANDLER-CASE (PROGN (CHAR-NAME (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
48 Pass: (HANDLER-CASE (PROGN (NAME-CHAR (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
Pass: 49, Failed: 0

test: sacla-tests/should-cons.lisp
0 Pass: (HANDLER-CASE (PROGN (RPLACA NIL 1)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
1 Pass: (HANDLER-CASE (PROGN (RPLACA "NOT A CONS" 1)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
2 Pass: (HANDLER-CASE (PROGN (RPLACD NIL 1)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
3 Pass: (HANDLER-CASE (PROGN (RPLACD "NOT A CONS" 1)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
4 Pass: (HANDLER-CASE (PROGN (CAR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
5 Pass: (HANDLER-CASE (PROGN (CDR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
6 Pass: (HANDLER-CASE (PROGN (CAAR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
7 Pass: (HANDLER-CASE (PROGN (CADR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
8 Pass: (HANDLER-CASE (PROGN (CDAR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
9 Pass: (HANDLER-CASE (PROGN (CDDR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
10 Pass: (HANDLER-CASE (PROGN (CAAAR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
11 Pass: (HANDLER-CASE (PROGN (CAADR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
12 Pass: (HANDLER-CASE (PROGN (CADAR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
13 Pass: (HANDLER-CASE (PROGN (CADDR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
14 Pass: (HANDLER-CASE (PROGN (CDAAR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
15 Pass: (HANDLER-CASE (PROGN (CDADR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
16 Pass: (HANDLER-CASE (PROGN (CDDAR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
17 Pass: (HANDLER-CASE (PROGN (CDDDR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
18 Pass: (HANDLER-CASE (PROGN (CAAAAR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
19 Pass: (HANDLER-CASE (PROGN (CAAADR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
20 Pass: (HANDLER-CASE (PROGN (CAADAR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
21 Pass: (HANDLER-CASE (PROGN (CAADDR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
22 Pass: (HANDLER-CASE (PROGN (CADAAR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
23 Pass: (HANDLER-CASE (PROGN (CADADR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
24 Pass: (HANDLER-CASE (PROGN (CADDAR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
25 Pass: (HANDLER-CASE (PROGN (CADDDR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
26 Pass: (HANDLER-CASE (PROGN (CDAAAR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
27 Pass: (HANDLER-CASE (PROGN (CDAADR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
28 Pass: (HANDLER-CASE (PROGN (CDADAR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
29 Pass: (HANDLER-CASE (PROGN (CDADDR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
30 Pass: (HANDLER-CASE (PROGN (CDDAAR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
31 Pass: (HANDLER-CASE (PROGN (CDDADR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
32 Pass: (HANDLER-CASE (PROGN (CDDDAR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
33 Pass: (HANDLER-CASE (PROGN (CDDDDR "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
34 Pass: (HANDLER-CASE (PROGN (LIST-LENGTH (QUOTE (1 . 2)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
35 Pass: (HANDLER-CASE (PROGN (LIST-LENGTH "NEITHER A PROPER LIST NOR A CIRCULAR LIST")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
36 Pass: (HANDLER-CASE (PROGN (LIST-LENGTH (QUOTE NEITHER-A-PROPER-LIST-NOR-A-CIRCULAR-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
37 Pass: (HANDLER-CASE (PROGN (MAKE-LIST NIL)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
38 Pass: (HANDLER-CASE (PROGN (MAKE-LIST -1)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
39 Pass: (HANDLER-CASE (PROGN (MAKE-LIST 1.2)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
40 Pass: (HANDLER-CASE (PROGN (MAKE-LIST (QUOTE A))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
41 Pass: (HANDLER-CASE (PROGN (MAKE-LIST "NOT A NON-NEGATIVE INTEGER")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
42 Pass: (HANDLER-CASE (PROGN (FIRST "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
43 Pass: (HANDLER-CASE (PROGN (SECOND "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
44 Pass: (HANDLER-CASE (PROGN (THIRD "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
45 Pass: (HANDLER-CASE (PROGN (FOURTH "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
46 Pass: (HANDLER-CASE (PROGN (FIFTH "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
47 Pass: (HANDLER-CASE (PROGN (SIXTH "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
48 Pass: (HANDLER-CASE (PROGN (SEVENTH "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
49 Pass: (HANDLER-CASE (PROGN (NINTH "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
50 Pass: (HANDLER-CASE (PROGN (TENTH "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
51 Pass: (HANDLER-CASE (PROGN (NTHCDR -1 (QUOTE (1 2 3)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
52 Pass: (HANDLER-CASE (PROGN (NTHCDR 1.1 (QUOTE (1 2 3)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
53 Pass: (HANDLER-CASE (PROGN (NTHCDR #\a (QUOTE (1 2 3)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
54 Pass: (HANDLER-CASE (PROGN (NTHCDR 3 (QUOTE (1 . 2)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
55 Pass: (HANDLER-CASE (PROGN (NTH -1 (QUOTE (1 2)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
56 Pass: (HANDLER-CASE (PROGN (NTH "" (QUOTE (1 2)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
57 Pass: (HANDLER-CASE (PROGN (NTH 3 (QUOTE (1 . 2)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
58 Pass: (HANDLER-CASE (PROGN (ENDP 1)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
59 Pass: (HANDLER-CASE (PROGN (ENDP #\z)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
60 Pass: (HANDLER-CASE (PROGN (ENDP (QUOTE NOT-A-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
61 Pass: (HANDLER-CASE (PROGN (ENDP "not-a-list")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
62 Pass: (HANDLER-CASE (PROGN (BUTLAST (QUOTE NOT-A-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
63 Pass: (HANDLER-CASE (PROGN (BUTLAST (QUOTE NOT-A-LIST) (QUOTE NOT-A-INTEGER))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
64 Pass: (HANDLER-CASE (PROGN (BUTLAST (QUOTE (1 2 3 4 5)) -1)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
65 Pass: (HANDLER-CASE (PROGN (BUTLAST (QUOTE (1 2 3 4 5)) (QUOTE A))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
66 Pass: (HANDLER-CASE (PROGN (NBUTLAST (QUOTE NOT-A-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
67 Pass: (HANDLER-CASE (PROGN (NBUTLAST (QUOTE NOT-A-LIST) (QUOTE NOT-A-INTEGER))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
68 Pass: (HANDLER-CASE (PROGN (NBUTLAST (QUOTE (1 2 3 4 5)) -1)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
69 Pass: (HANDLER-CASE (PROGN (NBUTLAST (QUOTE (1 2 3 4 5)) (QUOTE A))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
70 Pass: (HANDLER-CASE (PROGN (LDIFF (QUOTE NOT-A-LIST) (QUOTE OBJ))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
71 Pass: (HANDLER-CASE (PROGN (TAILP (QUOTE OBJ) (QUOTE NOT-A-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
72 Pass: (HANDLER-CASE (PROGN (REST "NOT A CONS")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
73 Pass: (HANDLER-CASE (PROGN (MEMBER (QUOTE A) (QUOTE NOT-A-SET))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
74 Pass: (HANDLER-CASE (PROGN (MEMBER (QUOTE A) (QUOTE (1 . 2)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
75 Pass: (HANDLER-CASE (PROGN (MEMBER (QUOTE A) (QUOTE (1 2 3 4 . 5)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
76 Pass: (HANDLER-CASE (PROGN (MEMBER-IF (FUNCTION ATOM) (QUOTE NOT-A-SET))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
77 Pass: (HANDLER-CASE (PROGN (MEMBER-IF (FUNCTION CONSP) (QUOTE (1 . 2)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
78 Pass: (HANDLER-CASE (PROGN (MEMBER-IF (FUNCTION CONSP) (QUOTE (1 2 3 4 . 5)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
79 Pass: (HANDLER-CASE (PROGN (MEMBER-IF-NOT (COMPLEMENT (FUNCTION ATOM)) (QUOTE NOT-A-SET))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
80 Pass: (HANDLER-CASE (PROGN (MEMBER-IF-NOT (COMPLEMENT (FUNCTION CONSP)) (QUOTE (1 . 2)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
81 Pass: (HANDLER-CASE (PROGN (MEMBER-IF-NOT (COMPLEMENT (FUNCTION CONSP)) (QUOTE (1 2 3 4 . 5)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
82 Pass: (HANDLER-CASE (PROGN (MAPCAR (FUNCTION CAR) (QUOTE NOT-A-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
83 Pass: (HANDLER-CASE (PROGN (MAPCAR (FUNCTION LIST) (QUOTE (0 1)) (QUOTE NOT-A-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
84 Pass: (HANDLER-CASE (PROGN (MAPCAR (FUNCTION LIST) (QUOTE (0 . 1)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
85 Pass: (HANDLER-CASE (PROGN (MAPC (FUNCTION CAR) (QUOTE NOT-A-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
86 Pass: (HANDLER-CASE (PROGN (MAPC (FUNCTION LIST) (QUOTE (0 1)) (QUOTE NOT-A-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
87 Pass: (HANDLER-CASE (PROGN (MAPC (FUNCTION LIST) (QUOTE (0 . 1)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
88 Pass: (HANDLER-CASE (PROGN (MAPCAN (FUNCTION CAR) (QUOTE NOT-A-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
89 Pass: (HANDLER-CASE (PROGN (MAPCAN (FUNCTION LIST) (QUOTE (0 1)) (QUOTE NOT-A-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
90 Pass: (HANDLER-CASE (PROGN (MAPCAN (FUNCTION LIST) (QUOTE (0 . 1)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
91 Pass: (HANDLER-CASE (PROGN (MAPLIST (FUNCTION CAR) (QUOTE NOT-A-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
92 Pass: (HANDLER-CASE (PROGN (MAPLIST (FUNCTION LIST) (QUOTE (0 1)) (QUOTE NOT-A-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
93 Pass: (HANDLER-CASE (PROGN (MAPLIST (FUNCTION LIST) (QUOTE (0 . 1)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
94 Pass: (HANDLER-CASE (PROGN (MAPL (FUNCTION CAR) (QUOTE NOT-A-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
95 Pass: (HANDLER-CASE (PROGN (MAPL (FUNCTION LIST) (QUOTE (0 1)) (QUOTE NOT-A-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
96 Pass: (HANDLER-CASE (PROGN (MAPL (FUNCTION LIST) (QUOTE (0 . 1)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
97 Pass: (HANDLER-CASE (PROGN (MAPCON (FUNCTION CAR) (QUOTE NOT-A-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
98 Pass: (HANDLER-CASE (PROGN (MAPCON (FUNCTION LIST) (QUOTE (0 1)) (QUOTE NOT-A-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
99 Pass: (HANDLER-CASE (PROGN (MAPCON (FUNCTION LIST) (QUOTE (0 . 1)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
100 Pass: (HANDLER-CASE (PROGN (ASSOC (QUOTE KEY) (QUOTE (A B C)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
101 Pass: (HANDLER-CASE (PROGN (ASSOC-IF (FUNCTION NUMBERP) (QUOTE (A B C)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
102 Pass: (HANDLER-CASE (PROGN (ASSOC-IF-NOT (FUNCTION NUMBERP) (QUOTE (A B C)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
103 Pass: (HANDLER-CASE (PROGN (ASSOC (QUOTE KEY) (QUOTE 0))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
104 Pass: (HANDLER-CASE (PROGN (ASSOC-IF (FUNCTION NUMBERP) (QUOTE 0))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
105 Pass: (HANDLER-CASE (PROGN (ASSOC-IF-NOT (FUNCTION NUMBERP) (QUOTE 0))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
106 Pass: (HANDLER-CASE (PROGN (ASSOC (QUOTE KEY) (QUOTE NOT-AN-ALIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
107 Pass: (HANDLER-CASE (PROGN (ASSOC-IF (QUOTE IDENTITY) (QUOTE NOT-AN-ALIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
108 Pass: (HANDLER-CASE (PROGN (ASSOC-IF-NOT (QUOTE IDENTITY) (QUOTE NOT-AN-ALIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
109 Pass: (HANDLER-CASE (PROGN (PAIRLIS (QUOTE NOT-A-LIST) (QUOTE NOT-A-LIST) (QUOTE ((A . B))))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
110 Pass: (HANDLER-CASE (PROGN (PAIRLIS (QUOTE 0) (QUOTE (0 1 2)) (QUOTE ((KEY . DATUM))))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
111 Pass: (HANDLER-CASE (PROGN (PAIRLIS (QUOTE (0)) (QUOTE 1) (QUOTE ((KEY . DATUM))))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
112 Pass: (HANDLER-CASE (PROGN (INTERSECTION (QUOTE (0)) (QUOTE 1))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
113 Pass: (HANDLER-CASE (PROGN (INTERSECTION (QUOTE (0)) (QUOTE 1) :TEST (FUNCTION EQUALP))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
114 Pass: (HANDLER-CASE (PROGN (INTERSECTION #\a (QUOTE (1 2 3)) :TEST (FUNCTION =))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
115 Pass: (HANDLER-CASE (PROGN (INTERSECTION 0 1)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
116 Pass: (HANDLER-CASE (PROGN (INTERSECTION #\a #\b)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
117 Pass: (HANDLER-CASE (PROGN (INTERSECTION 0 1 :TEST (FUNCTION =))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
118 Pass: (HANDLER-CASE (PROGN (INTERSECTION #\a #\b :TEST-NOT (COMPLEMENT (FUNCTION CHAR=)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
119 Pass: (HANDLER-CASE (PROGN (INTERSECTION (QUOTE (1 2 3 . 4)) (QUOTE (2 3)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
120 Pass: (HANDLER-CASE (PROGN (INTERSECTION (QUOTE (1 2 3 . 4)) (QUOTE (2 3)) :TEST (FUNCTION =))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
121 Pass: (HANDLER-CASE (PROGN (INTERSECTION (QUOTE (1 2 3)) (QUOTE (2 . 3)) :TEST (FUNCTION =))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
122 Pass: (HANDLER-CASE (PROGN (INTERSECTION (QUOTE ((1) (2) (3))) (QUOTE ((2) 3)) :TEST (FUNCTION =) :KEY (FUNCTION CAR))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
123 Pass: (HANDLER-CASE (PROGN (NINTERSECTION (LIST 0) (QUOTE 1))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
124 Pass: (HANDLER-CASE (PROGN (NINTERSECTION (LIST 0) (QUOTE 1) :TEST (FUNCTION EQUALP))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
125 Pass: (HANDLER-CASE (PROGN (NINTERSECTION #\a (QUOTE (1 2 3)) :TEST (FUNCTION =))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
126 Pass: (HANDLER-CASE (PROGN (NINTERSECTION 0 1)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
127 Pass: (HANDLER-CASE (PROGN (NINTERSECTION #\a #\b)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
128 Pass: (HANDLER-CASE (PROGN (NINTERSECTION 0 1 :TEST (FUNCTION =))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
129 Pass: (HANDLER-CASE (PROGN (INTERSECTION #\a #\b :TEST-NOT (COMPLEMENT (FUNCTION CHAR=)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
130 Pass: (HANDLER-CASE (PROGN (NINTERSECTION (LIST* 1 2 3 4) (QUOTE (2 3)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
131 Pass: (HANDLER-CASE (PROGN (NINTERSECTION (LIST* 1 2 3 4) (QUOTE (2 3)) :TEST (FUNCTION =))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
132 Pass: (HANDLER-CASE (PROGN (NINTERSECTION (LIST 1 2 3) (QUOTE (2 . 3)) :TEST (FUNCTION =))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
133 Pass: (HANDLER-CASE (PROGN (NINTERSECTION (LIST (QUOTE (1)) (QUOTE (2)) (QUOTE (3))) (QUOTE ((2) 3)) :TEST (FUNCTION =) :KEY (FUNCTION CAR))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
134 Pass: (HANDLER-CASE (PROGN (ADJOIN (QUOTE A) (QUOTE A))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
135 Pass: (HANDLER-CASE (PROGN (ADJOIN (QUOTE X) (QUOTE (A . B)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
136 Pass: (HANDLER-CASE (PROGN (SET-DIFFERENCE (QUOTE NOT-A-LIST) (QUOTE NOT-A-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
137 Pass: (HANDLER-CASE (PROGN (NSET-DIFFERENCE (QUOTE NOT-A-LIST) (QUOTE NOT-A-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
138 Pass: (HANDLER-CASE (PROGN (SET-EXCLUSIVE-OR (QUOTE NOT-A-LIST) (QUOTE NOT-A-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
139 Pass: (HANDLER-CASE (PROGN (NSET-EXCLUSIVE-OR (QUOTE NOT-A-LIST) (QUOTE NOT-A-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
140 Pass: (HANDLER-CASE (PROGN (UNION (QUOTE NOT-A-LIST) (QUOTE NOT-A-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
Pass: 141, Failed: 0

test: sacla-tests/should-data-and-control.lisp
0 Pass: (HANDLER-CASE (PROGN (FUNCALL (GENSYM) 0 1 2)) (UNDEFINED-FUNCTION NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
1 Failed: (HANDLER-CASE (PROGN (VALUES-LIST (QUOTE NOT-A-LIST))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
2 Failed: (HANDLER-CASE (PROGN (VALUES-LIST #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
3 Failed: (HANDLER-CASE (PROGN (VALUES-LIST (QUOTE (A . B)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
Pass: 1, Failed: 3

test: sacla-tests/should-eval.lisp
0 Failed: (HANDLER-CASE (PROGN (SPECIAL-OPERATOR-P (QUOTE (IF T NIL T)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
1 Failed: (HANDLER-CASE (PROGN (SPECIAL-OPERATOR-P (QUOTE (NOT A SYMBOL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
Pass: 0, Failed: 2

test: sacla-tests/should-hash-table.lisp
0 Pass: (HANDLER-CASE (PROGN (HASH-TABLE-REHASH-SIZE (QUOTE NOT-A-HASH-TABLE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
1 Pass: (HANDLER-CASE (PROGN (HASH-TABLE-REHASH-THRESHOLD (QUOTE NOT-A-HASH-TABLE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
2 Pass: (HANDLER-CASE (PROGN (HASH-TABLE-TEST (QUOTE NOT-A-HASH-TABLE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
Pass: 3, Failed: 0

test: sacla-tests/should-package.lisp
0 Pass: (HANDLER-CASE (PROGN (PACKAGE-NAME (QUOTE (NOT A PACKAGE DESIGNATOR)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
1 Pass: (HANDLER-CASE (PROGN (PACKAGE-NICKNAMES (QUOTE (NOT A PACKAGE DESIGNATOR)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
2 Failed: (HANDLER-CASE (PROGN (PACKAGE-SHADOWING-SYMBOLS (QUOTE (NOT A PACKAGE DESIGNATOR)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
3 Failed: (HANDLER-CASE (PROGN (PACKAGE-USE-LIST (QUOTE (NOT A PACKAGE DESIGNATOR)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
4 Failed: (HANDLER-CASE (PROGN (PACKAGE-USED-BY-LIST (QUOTE (NOT A PACKAGE DESIGNATOR)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
5 Pass: (HANDLER-CASE (PROGN (EVAL (MACROEXPAND (QUOTE (WITH-PACKAGE-ITERATOR (GET (QUOTE CL))))))) (PROGRAM-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
Pass: 3, Failed: 3

test: sacla-tests/should-sequence.lisp
0 Pass: (HANDLER-CASE (PROGN (LENGTH (QUOTE NOT-A-SEQ))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
1 Pass: (HANDLER-CASE (PROGN (COPY-SEQ (QUOTE NOT-A-SEQ))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
2 Failed: no dispatch function defined for #\A
3 Failed: Illegal function call: ((#\a #\b #\c) (#\x #\y #\z))
4 Failed: unmatched close parenthesis
5 Failed: unmatched close parenthesis
6 Failed: The value NIL is not of the expected type T
7 Failed: The value NIL is not of the expected type CONDITION
8 Failed: Illegal function call: (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL)
9 Failed: unmatched close parenthesis
10 Pass: (HANDLER-CASE (PROGN (COPY-SEQ #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
11 Failed: (HANDLER-CASE (PROGN (COPY-SEQ (QUOTE (A . B)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
12 Pass: (HANDLER-CASE (PROGN (ELT (QUOTE NOT-A-SEQ) 0)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
13 Pass: (HANDLER-CASE (PROGN (ELT #\a 0)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
14 Pass: (HANDLER-CASE (PROGN (ELT (QUOTE (0 1 . 2)) 2)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
15 Pass: (HANDLER-CASE (PROGN (SETF (ELT (QUOTE NOT-A-SEQ) 0) 0)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
16 Pass: (HANDLER-CASE (PROGN (SETF (ELT #\a 0) 0)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
17 Pass: (HANDLER-CASE (PROGN (SETF (ELT (QUOTE (0 1 . 2)) 2) 0)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
18 Failed: (HANDLER-CASE (PROGN (ELT "012" -1)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
19 Failed: (HANDLER-CASE (PROGN (ELT "012" (QUOTE INDEX))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
20 Failed: (HANDLER-CASE (PROGN (ELT "012" "xyz")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
21 Failed: (HANDLER-CASE (PROGN (ELT "012" 100)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
22 Failed: (HANDLER-CASE (PROGN (ELT #(A B C D) 100)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
23 Failed: (HANDLER-CASE (PROGN (ELT (QUOTE (0 1 2)) 100)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
24 Failed: (HANDLER-CASE (PROGN (ELT (MAKE-ARRAY 10 :FILL-POINTER 3 :INITIAL-CONTENTS (QUOTE (0 1 2 3 4 5 6 7 8 9))) 3)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
25 Failed: (HANDLER-CASE (PROGN (SETF (ELT (COPY-SEQ "012") -1) #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
26 Pass: (HANDLER-CASE (PROGN (SETF (ELT (COPY-SEQ "012") (QUOTE INDEX)) #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
27 Pass: (HANDLER-CASE (PROGN (SETF (ELT (COPY-SEQ "012") "xyz") #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
28 Failed: (HANDLER-CASE (PROGN (SETF (ELT (COPY-SEQ "012") 100) #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
29 Pass: (HANDLER-CASE (PROGN (SETF (ELT (LIST 0 1 2) 100) 0)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
30 Pass: (HANDLER-CASE (PROGN (SETF (ELT (LIST 0 1 2) -1) 0)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
31 Pass: (HANDLER-CASE (PROGN (FILL (QUOTE NOT-A-SEQ) (QUOTE A))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
32 Pass: (HANDLER-CASE (PROGN (FILL #\a (QUOTE A))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
33 Pass: (HANDLER-CASE (PROGN (FILL (LIST 0 1 2) (QUOTE A) :START (QUOTE NOT-A-INT))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
34 Pass: (HANDLER-CASE (PROGN (FILL (LIST 0 1 2) (QUOTE A) :START -1)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
35 Pass: (HANDLER-CASE (PROGN (FILL (LIST 0 1 2) (QUOTE A) :END (QUOTE NOT-A-INT))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
36 Failed: (HANDLER-CASE (PROGN (FILL (LIST 0 1 2) (QUOTE A) :END -1)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
37 Failed: (HANDLER-CASE (PROGN (MAKE-SEQUENCE (QUOTE (VECTOR * 2)) 3)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
38 Failed: (HANDLER-CASE (PROGN (MAKE-SEQUENCE (QUOTE (VECTOR * 4)) 3)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
39 Failed: (HANDLER-CASE (PROGN (MAKE-SEQUENCE (QUOTE (ARRAY * 3)) 2)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
40 Failed: (HANDLER-CASE (PROGN (MAKE-SEQUENCE (QUOTE (ARRAY * (1 2 3))) 2)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
41 Pass: (HANDLER-CASE (PROGN (MAKE-SEQUENCE (QUOTE SYMBOL) 2)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
42 Pass: (HANDLER-CASE (PROGN (SUBSEQ (QUOTE NOT-A-SEQ) 0)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
43 Pass: (HANDLER-CASE (PROGN (SUBSEQ #\a 0)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
44 Pass: (HANDLER-CASE (PROGN (SETF (SUBSEQ (LIST 0 1 2 3) 1) (QUOTE NOT-A-SEQ))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
45 Pass: (HANDLER-CASE (PROGN (SETF (SUBSEQ (VECTOR 0 1 2 3) 1) (QUOTE NOT-A-SEQ))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
46 Failed: (HANDLER-CASE (PROGN (MAP (QUOTE (VECTOR T 10)) (FUNCTION +) (QUOTE (0 1)) (QUOTE (1 0)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
47 Pass: (HANDLER-CASE (PROGN (MAP (QUOTE LIST) (FUNCTION +) (QUOTE (0 1)) (QUOTE (1 0)) (QUOTE NOT-A-SEQ))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
48 Failed: (PROGN (HANDLER-CASE (PROGN (MAP (QUOTE (VECTOR * 4)) (FUNCTION CONS) "abc" "de")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL)))
49 Pass: (PROGN (HANDLER-CASE (PROGN (MAP (QUOTE NULL) (FUNCTION CONS) "abc" "de")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL)))
50 Failed: (PROGN (HANDLER-CASE (PROGN (MAP (QUOTE (CONS * NULL)) (FUNCTION CONS) "abc" "de")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL)))
51 Pass: (HANDLER-CASE (PROGN (MAP-INTO (QUOTE NOT-A-SEQ) (FUNCTION +) (QUOTE (0 1 2)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
52 Pass: (PROGN (HANDLER-CASE (PROGN (MAP-INTO (LIST 0 1 2 3) (FUNCTION +) (QUOTE NOT-A-SEQ))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL)))
53 Pass: (PROGN (HANDLER-CASE (PROGN (MAP-INTO (LIST 0 1 2 3) (FUNCTION +) (QUOTE (0 1)) (QUOTE NOT-A-SEQ))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL)))
54 Pass: (HANDLER-CASE (PROGN (REDUCE (FUNCTION LIST) (QUOTE NOT-A-SEQUENCE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
55 Pass: (HANDLER-CASE (PROGN (COUNT 0 (QUOTE NOT-A-SEQUENCE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
56 Pass: (HANDLER-CASE (PROGN (COUNT 0 #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
57 Pass: (HANDLER-CASE (PROGN (COUNT-IF (FUNCTION NUMBERP) (QUOTE NOT-A-SEQUENCE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
58 Pass: (HANDLER-CASE (PROGN (COUNT-IF (FUNCTION NUMBERP) #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
59 Pass: (HANDLER-CASE (PROGN (COUNT-IF-NOT (FUNCTION NUMBERP) (QUOTE NOT-A-SEQUENCE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
60 Pass: (HANDLER-CASE (PROGN (COUNT-IF-NOT (FUNCTION NUMBERP) #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
61 Pass: (HANDLER-CASE (PROGN (REVERSE (QUOTE NOT-A-SEQUENCE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
62 Pass: (HANDLER-CASE (PROGN (NREVERSE (QUOTE NOT-A-SEQUENCE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
63 Pass: (HANDLER-CASE (PROGN (FIND (QUOTE ITEM) (QUOTE NOT-A-SEQUENCE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
64 Pass: (HANDLER-CASE (PROGN (FIND-IF (CONSTANTLY NIL) (QUOTE NOT-A-SEQUENCE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
65 Pass: (HANDLER-CASE (PROGN (FIND-IF-NOT (CONSTANTLY T) (QUOTE NOT-A-SEQUENCE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
66 Pass: (HANDLER-CASE (PROGN (POSITION (QUOTE ITEM) (QUOTE NOT-A-SEQUENCE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
67 Pass: (HANDLER-CASE (PROGN (POSITION-IF (CONSTANTLY NIL) (QUOTE NOT-A-SEQUENCE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
68 Pass: (HANDLER-CASE (PROGN (POSITION-IF-NOT (CONSTANTLY T) (QUOTE NOT-A-SEQUENCE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
69 Failed: (HANDLER-CASE (PROGN (CONCATENATE (QUOTE (VECTOR * 2)) "a" "bc")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
70 Failed: (HANDLER-CASE (PROGN (MERGE (QUOTE (VECTOR * 4)) (QUOTE (1 5)) (QUOTE (2 4 6)) (FUNCTION <))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
71 Pass: (HANDLER-CASE (PROGN (REMOVE (QUOTE A) (QUOTE NOT-A-SEQUENCE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
72 Pass: (HANDLER-CASE (PROGN (REMOVE-IF (CONSTANTLY T) (QUOTE NOT-A-SEQUENCE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
73 Pass: (HANDLER-CASE (PROGN (REMOVE-IF-NOT (COMPLEMENT (CONSTANTLY T)) (QUOTE NOT-A-SEQUENCE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
74 Pass: (HANDLER-CASE (PROGN (DELETE (QUOTE A) (QUOTE NOT-A-SEQUENCE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
75 Pass: (HANDLER-CASE (PROGN (DELETE-IF (CONSTANTLY T) (QUOTE NOT-A-SEQUENCE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
76 Pass: (HANDLER-CASE (PROGN (DELETE-IF-NOT (COMPLEMENT (CONSTANTLY T)) (QUOTE NOT-A-SEQUENCE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
77 Pass: (HANDLER-CASE (PROGN (REMOVE-DUPLICATES (QUOTE NOT-A-SEQUENCE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
78 Pass: (HANDLER-CASE (PROGN (DELETE-DUPLICATES (QUOTE NOT-A-SEQUENCE))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
Pass: 51, Failed: 28

test: sacla-tests/should-string.lisp
Pass: 0, Failed: 0

test: sacla-tests/should-symbol.lisp
0 Pass: (HANDLER-CASE (PROGN (MAKE-SYMBOL (QUOTE NOT-A-STRING))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
1 Pass: (HANDLER-CASE (PROGN (MAKE-SYMBOL #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
2 Pass: (HANDLER-CASE (PROGN (MAKE-SYMBOL (QUOTE (NAME)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
3 Pass: (HANDLER-CASE (PROGN (COPY-SYMBOL "NOT A SYMBOL")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
4 Pass: (HANDLER-CASE (PROGN (COPY-SYMBOL #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
5 Pass: (HANDLER-CASE (PROGN (COPY-SYMBOL (QUOTE (NAME)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
6 Pass: (HANDLER-CASE (PROGN (GENSYM (QUOTE EAT-THIS))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
7 Pass: (HANDLER-CASE (PROGN (GENSYM -1)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
8 Pass: (HANDLER-CASE (PROGN (GENSYM #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
9 Pass: (HANDLER-CASE (PROGN (GENTEMP (QUOTE NOT-A-STRING))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
10 Pass: (HANDLER-CASE (PROGN (GENTEMP #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
11 Pass: (HANDLER-CASE (PROGN (GENTEMP "TEMP" (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
12 Pass: (HANDLER-CASE (PROGN (SYMBOL-FUNCTION "not-a-function")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
13 Pass: (HANDLER-CASE (PROGN (SYMBOL-FUNCTION #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
14 Pass: (HANDLER-CASE (PROGN (SYMBOL-FUNCTION (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
15 Pass: (HANDLER-CASE (PROGN (FMAKUNBOUND (QUOTE SYMBOL-FOR-TEST)) (SYMBOL-FUNCTION (QUOTE SYMBOL-FOR-TEST))) (UNDEFINED-FUNCTION NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
16 Pass: (HANDLER-CASE (PROGN (SYMBOL-NAME "not-a-symbol")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
17 Pass: (HANDLER-CASE (PROGN (SYMBOL-NAME #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
18 Pass: (HANDLER-CASE (PROGN (SYMBOL-NAME (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
19 Pass: (HANDLER-CASE (PROGN (SYMBOL-PACKAGE "not-a-symbol")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
20 Pass: (HANDLER-CASE (PROGN (SYMBOL-PACKAGE #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
21 Pass: (HANDLER-CASE (PROGN (SYMBOL-PACKAGE (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
22 Pass: (HANDLER-CASE (PROGN (SYMBOL-PLIST "not-a-symbol")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
23 Pass: (HANDLER-CASE (PROGN (SYMBOL-PLIST #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
24 Pass: (HANDLER-CASE (PROGN (SYMBOL-PLIST (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
25 Pass: (HANDLER-CASE (PROGN (SYMBOL-VALUE "not-a-symbol")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
26 Pass: (HANDLER-CASE (PROGN (SYMBOL-VALUE #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
27 Pass: (HANDLER-CASE (PROGN (SYMBOL-VALUE (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
28 Pass: (HANDLER-CASE (PROGN (PROGN (MAKUNBOUND (QUOTE A)) (SYMBOL-VALUE (QUOTE A)))) (UNBOUND-VARIABLE NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
29 Pass: (HANDLER-CASE (PROGN (GET "not-a-symbol" (QUOTE A))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
30 Pass: (HANDLER-CASE (PROGN (GET #\a (QUOTE A))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
31 Pass: (HANDLER-CASE (PROGN (GET (QUOTE (NIL)) (QUOTE A))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
32 Pass: (HANDLER-CASE (PROGN (REMPROP "not-a-symbol" (QUOTE A))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
33 Pass: (HANDLER-CASE (PROGN (REMPROP #\a (QUOTE A))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
34 Pass: (HANDLER-CASE (PROGN (REMPROP (QUOTE (NIL)) (QUOTE A))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
35 Pass: (HANDLER-CASE (PROGN (BOUNDP "not-a-symbol")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
36 Pass: (HANDLER-CASE (PROGN (BOUNDP #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
37 Pass: (HANDLER-CASE (PROGN (BOUNDP (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
38 Pass: (HANDLER-CASE (PROGN (MAKUNBOUND "not-a-symbol")) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
39 Pass: (HANDLER-CASE (PROGN (MAKUNBOUND #\a)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
40 Pass: (HANDLER-CASE (PROGN (MAKUNBOUND (QUOTE (NIL)))) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
41 Pass: (HANDLER-CASE (PROGN (SET "not-a-symbol" 1)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
42 Pass: (HANDLER-CASE (PROGN (SET #\a 0)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
43 Pass: (HANDLER-CASE (PROGN (SET (QUOTE (NIL)) 2)) (TYPE-ERROR NIL T) (ERROR NIL NIL) (:NO-ERROR (&REST REST) (DECLARE (IGNORE REST)) NIL))
Pass: 44, Failed: 0

time: 1378103

(("sacla-tests/should-symbol.lisp" 44 0)
 ("sacla-tests/should-string.lisp" 0 0)
 ("sacla-tests/should-sequence.lisp" 51 28)
 ("sacla-tests/should-package.lisp" 3 3)
 ("sacla-tests/should-hash-table.lisp" 3 0)
 ("sacla-tests/should-eval.lisp" 0 2)
 ("sacla-tests/should-data-and-control.lisp" 1 3)
 ("sacla-tests/should-cons.lisp" 141 0)
 ("sacla-tests/should-character.lisp" 49 0)
 ("sacla-tests/should-array.lisp" 31 2)
 ("sacla-tests/must-symbol.lisp" 113 0)
 ("sacla-tests/must-string.lisp" 414 0)
 ("sacla-tests/must-sequence.lisp" 3851 8)
 ("sacla-tests/must-hash-table.lisp" 66 30)
 ("sacla-tests/must-eval.lisp" 9 0)
 ("sacla-tests/must-do.lisp" 75 0)
 ("sacla-tests/must-data-and-control.lisp" 170 144)
 ("sacla-tests/must-cons.lisp" 728 0)
 ("sacla-tests/must-condition.lisp" 142 5)
 ("sacla-tests/must-character.lisp" 313 0)
 ("sacla-tests/must-array.lisp" 162 171)
 ("sacla-tests/desirable-printer.lisp" 14 22)) 