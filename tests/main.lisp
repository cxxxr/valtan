;; (run-sacla-tests)

;; (defclass a () ())
;; (defclass b (a) ())

;; (js:console.time #j"c")
;; (defclass c (b) ())
;; (js:console.time-end #j"c")

;; #+(or)
;; (let ((class (find-class 'c)))
;;   (print (list (cl::class-name class)
;;                (cl::class-direct-subclasses class)
;;                (cl::class-direct-superclasses class)
;;                (cl::class-direct-slots class)
;;                (cl::class-precedence-list class)
;;                (cl::class-slots class)
;;                (cl::class-direct-default-initargs class))))

;; (js:console.time #j"c")
;; (let ((class (cl::make-standard-instance :class cl::+standard-class+)))
;;   (setf (cl::class-name class) 'c
;;         (cl::class-direct-subclasses class) ()
;;         (cl::class-direct-superclasses class) (list (find-class 'b))
;;         (cl::class-direct-slots class) ()
;;         (cl::class-precedence-list class) (list class (find-class 'b) (find-class 'a) (find-class 'standard-object) (find-class t))
;;         (cl::class-slots class) ()
;;         (cl::class-direct-default-initargs class) ()
;;         (find-class 'c) class))
;; (js:console.time-end #j"c")

;; #+(or)
;; (let ((class (find-class 'c)))
;;   (print (list (cl::class-name class)
;;                (cl::class-direct-subclasses class)
;;                (cl::class-direct-superclasses class)
;;                (cl::class-direct-slots class)
;;                (cl::class-precedence-list class)
;;                (cl::class-slots class)
;;                (cl::class-direct-default-initargs class))))

#+valtan(js:console.time #j"documentation")
#+valtan((ffi:ref "lisp" "startProfile"))
(defmethod hoge ((x integer) (y string) (z function)))
#+valtan((ffi:ref "lisp" "finishProfile"))
#+valtan(js:console.time-end #j"documentation")
